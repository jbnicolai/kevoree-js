if (!global.Kotlin) {
    global.Kotlin = require('kevoree-kotlin');
}
var Kotlin = global.Kotlin;

if (!Kotlin.modules['org.kevoree.model.js']) {
    var _ = Kotlin.defineRootPackage(null, /** @lends _ */ {
        java: Kotlin.definePackage(null, /** @lends _.java */ {
            io: Kotlin.definePackage(null, /** @lends _.java.io */ {
                InputStream: Kotlin.createTrait(null),
                OutputStream: Kotlin.createTrait(null),
                BufferedOutputStream: Kotlin.createClass(function () {
                    return [_.java.io.OutputStream];
                }, function (oo) {
                    this.oo = oo;
                }, /** @lends _.java.io.BufferedOutputStream.prototype */ {
                    write: function (s) {
                        var tmp$0;
                        ((tmp$0 = this.oo) != null ? tmp$0 : Kotlin.throwNPE()).result = s;
                    }
                }),
                ByteArrayInputStream: Kotlin.createClass(function () {
                    return [_.java.io.InputStream];
                }, function (inputBytes) {
                    this.inputBytes = inputBytes;
                }, /** @lends _.java.io.ByteArrayInputStream.prototype */ {
                    readBytes: function () {
                        return this.inputBytes;
                    }
                }),
                ByteArrayOutputStream: Kotlin.createClass(function () {
                    return [_.java.io.OutputStream];
                }, function () {
                    this.result = '';
                }, /** @lends _.java.io.ByteArrayOutputStream.prototype */ {
                    flush: function () {
                    },
                    close: function () {
                    },
                    toString: function () {
                        return this.result;
                    }
                }),
                PrintStream: Kotlin.createClass(null, function (oo, autoflush) {
                    this.oo = oo;
                    this.result = '';
                }, /** @lends _.java.io.PrintStream.prototype */ {
                    println: function () {
                        this.result = this.result + '\n';
                    },
                    print_4: function (s) {
                        this.result = this.result + s;
                    },
                    println_2: function (s) {
                        this.print_4(s);
                        this.println();
                    },
                    print_1: function (s) {
                        this.result = this.result + s;
                    },
                    print_2: function (s) {
                        this.result = this.result + s;
                    },
                    print_3: function (s) {
                        this.result = this.result + s;
                    },
                    print: function (s) {
                        if (s) {
                            this.result = this.result + 'true';
                        }
                        else {
                            this.result = this.result + 'false';
                        }
                    },
                    println_1: function (s) {
                        this.print_1(s);
                        this.println();
                    },
                    flush: function () {
                        var tmp$0;
                        ((tmp$0 = this.oo) != null ? tmp$0 : Kotlin.throwNPE()).write(this.result);
                    },
                    close: function () {
                    }
                })
            })
        }),
        js: Kotlin.definePackage(null, /** @lends _.js */ {
            toChar_mz3mef$: function ($receiver) {
                return $receiver != null ? $receiver : Kotlin.throwNPE();
            },
            lastIndexOf_orzsrp$: function ($receiver, ch, fromIndex) {
                return $receiver.lastIndexOf(ch.toString(), fromIndex);
            },
            lastIndexOf_960177$: function ($receiver, ch) {
                return $receiver.lastIndexOf(ch.toString());
            },
            indexOf_960177$: function ($receiver, ch) {
                return $receiver.indexOf(ch.toString());
            },
            indexOf_orzsrp$: function ($receiver, ch, fromIndex) {
                return $receiver.indexOf(ch.toString(), fromIndex);
            },
            matches_94jgcu$: function ($receiver, regex) {
                var result = $receiver.match(regex);
                return result != null && result.length > 0;
            },
            capitalize_pdl1w0$: function ($receiver) {
                return _.kotlin.isNotEmpty_pdl1w0$($receiver) ? $receiver.substring(0, 1).toUpperCase() + $receiver.substring(1) : $receiver;
            },
            decapitalize_pdl1w0$: function ($receiver) {
                return _.kotlin.isNotEmpty_pdl1w0$($receiver) ? $receiver.substring(0, 1).toLowerCase() + $receiver.substring(1) : $receiver;
            }
        }),
        org: Kotlin.definePackage(null, /** @lends _.org */ {
            kevoree: Kotlin.definePackage(null, /** @lends _.org.kevoree */ {
                ComponentInstance: Kotlin.createTrait(function () {
                    return [_.org.kevoree.Instance, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ComponentInstance.prototype */ {
                    provided: {
                        get: function () {
                            return this.$provided_2hpw3s$;
                        },
                        set: function (tmp$0) {
                            this.$provided_2hpw3s$ = tmp$0;
                        }
                    },
                    required: {
                        get: function () {
                            return this.$required_7c57n8$;
                        },
                        set: function (tmp$0) {
                            this.$required_7c57n8$ = tmp$0;
                        }
                    },
                    namespace: {
                        get: function () {
                            return this.$namespace_njd5t2$;
                        },
                        set: function (tmp$0) {
                            this.$namespace_njd5t2$ = tmp$0;
                        }
                    }
                }),
                ComponentType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypeDefinition, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ComponentType.prototype */ {
                    required: {
                        get: function () {
                            return this.$required_oda9db$;
                        },
                        set: function (tmp$0) {
                            this.$required_oda9db$ = tmp$0;
                        }
                    },
                    provided: {
                        get: function () {
                            return this.$provided_ejf5mb$;
                        },
                        set: function (tmp$0) {
                            this.$provided_ejf5mb$ = tmp$0;
                        }
                    }
                }),
                ContainerNode: Kotlin.createTrait(function () {
                    return [_.org.kevoree.Instance, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ContainerNode.prototype */ {
                    components: {
                        get: function () {
                            return this.$components_easq5i$;
                        },
                        set: function (tmp$0) {
                            this.$components_easq5i$ = tmp$0;
                        }
                    },
                    hosts: {
                        get: function () {
                            return this.$hosts_f0e4hl$;
                        },
                        set: function (tmp$0) {
                            this.$hosts_f0e4hl$ = tmp$0;
                        }
                    },
                    host: {
                        get: function () {
                            return this.$host_fjzar0$;
                        },
                        set: function (tmp$0) {
                            this.$host_fjzar0$ = tmp$0;
                        }
                    },
                    groups: {
                        get: function () {
                            return this.$groups_vg5qvs$;
                        },
                        set: function (tmp$0) {
                            this.$groups_vg5qvs$ = tmp$0;
                        }
                    },
                    networkInformation: {
                        get: function () {
                            return this.$networkInformation_nv4882$;
                        },
                        set: function (tmp$0) {
                            this.$networkInformation_nv4882$ = tmp$0;
                        }
                    }
                }),
                ContainerRoot: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ContainerRoot.prototype */ {
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_ejvotm$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_ejvotm$ = tmp$0;
                        }
                    },
                    nodes: {
                        get: function () {
                            return this.$nodes_c2xjm5$;
                        },
                        set: function (tmp$0) {
                            this.$nodes_c2xjm5$ = tmp$0;
                        }
                    },
                    typeDefinitions: {
                        get: function () {
                            return this.$typeDefinitions_ud0tvi$;
                        },
                        set: function (tmp$0) {
                            this.$typeDefinitions_ud0tvi$ = tmp$0;
                        }
                    },
                    repositories: {
                        get: function () {
                            return this.$repositories_z79tl8$;
                        },
                        set: function (tmp$0) {
                            this.$repositories_z79tl8$ = tmp$0;
                        }
                    },
                    dataTypes: {
                        get: function () {
                            return this.$dataTypes_fbqfxx$;
                        },
                        set: function (tmp$0) {
                            this.$dataTypes_fbqfxx$ = tmp$0;
                        }
                    },
                    libraries: {
                        get: function () {
                            return this.$libraries_4agkfp$;
                        },
                        set: function (tmp$0) {
                            this.$libraries_4agkfp$ = tmp$0;
                        }
                    },
                    hubs: {
                        get: function () {
                            return this.$hubs_6hj9z2$;
                        },
                        set: function (tmp$0) {
                            this.$hubs_6hj9z2$ = tmp$0;
                        }
                    },
                    mBindings: {
                        get: function () {
                            return this.$mBindings_gns4jb$;
                        },
                        set: function (tmp$0) {
                            this.$mBindings_gns4jb$ = tmp$0;
                        }
                    },
                    deployUnits: {
                        get: function () {
                            return this.$deployUnits_dbjgro$;
                        },
                        set: function (tmp$0) {
                            this.$deployUnits_dbjgro$ = tmp$0;
                        }
                    },
                    nodeNetworks: {
                        get: function () {
                            return this.$nodeNetworks_7tqm6j$;
                        },
                        set: function (tmp$0) {
                            this.$nodeNetworks_7tqm6j$ = tmp$0;
                        }
                    },
                    groups: {
                        get: function () {
                            return this.$groups_g3uzy0$;
                        },
                        set: function (tmp$0) {
                            this.$groups_g3uzy0$ = tmp$0;
                        }
                    }
                }),
                PortType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypeDefinition, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.PortType.prototype */ {
                    synchrone: {
                        get: function () {
                            return this.$synchrone_81cijd$;
                        },
                        set: function (tmp$0) {
                            this.$synchrone_81cijd$ = tmp$0;
                        }
                    }
                }),
                Port: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Port.prototype */ {
                    bindings: {
                        get: function () {
                            return this.$bindings_5hhece$;
                        },
                        set: function (tmp$0) {
                            this.$bindings_5hhece$ = tmp$0;
                        }
                    },
                    portTypeRef: {
                        get: function () {
                            return this.$portTypeRef_mhir4s$;
                        },
                        set: function (tmp$0) {
                            this.$portTypeRef_mhir4s$ = tmp$0;
                        }
                    }
                }),
                Namespace: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Namespace.prototype */ {
                    elements: {
                        get: function () {
                            return this.$elements_qhbad9$;
                        },
                        set: function (tmp$0) {
                            this.$elements_qhbad9$ = tmp$0;
                        }
                    }
                }),
                Dictionary: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Dictionary.prototype */ {
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_4n99az$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_4n99az$ = tmp$0;
                        }
                    },
                    values: {
                        get: function () {
                            return this.$values_relsch$;
                        },
                        set: function (tmp$0) {
                            this.$values_relsch$ = tmp$0;
                        }
                    }
                }),
                FragmentDictionary: Kotlin.createTrait(function () {
                    return [_.org.kevoree.Dictionary, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.FragmentDictionary.prototype */ {
                    name: {
                        get: function () {
                            return this.$name_7w7v5y$;
                        },
                        set: function (tmp$0) {
                            this.$name_7w7v5y$ = tmp$0;
                        }
                    }
                }),
                DictionaryType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.DictionaryType.prototype */ {
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_i5cet1$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_i5cet1$ = tmp$0;
                        }
                    },
                    attributes: {
                        get: function () {
                            return this.$attributes_ajawmc$;
                        },
                        set: function (tmp$0) {
                            this.$attributes_ajawmc$ = tmp$0;
                        }
                    }
                }),
                DictionaryAttribute: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.DictionaryAttribute.prototype */ {
                    optional: {
                        get: function () {
                            return this.$optional_q3pn27$;
                        },
                        set: function (tmp$0) {
                            this.$optional_q3pn27$ = tmp$0;
                        }
                    },
                    state: {
                        get: function () {
                            return this.$state_o1zrsg$;
                        },
                        set: function (tmp$0) {
                            this.$state_o1zrsg$ = tmp$0;
                        }
                    },
                    datatype: {
                        get: function () {
                            return this.$datatype_4t2ef9$;
                        },
                        set: function (tmp$0) {
                            this.$datatype_4t2ef9$ = tmp$0;
                        }
                    },
                    fragmentDependant: {
                        get: function () {
                            return this.$fragmentDependant_tefpca$;
                        },
                        set: function (tmp$0) {
                            this.$fragmentDependant_tefpca$ = tmp$0;
                        }
                    },
                    defaultValue: {
                        get: function () {
                            return this.$defaultValue_5tt7f5$;
                        },
                        set: function (tmp$0) {
                            this.$defaultValue_5tt7f5$ = tmp$0;
                        }
                    }
                }),
                DictionaryValue: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.DictionaryValue.prototype */ {
                    name: {
                        get: function () {
                            return this.$name_t1ewl3$;
                        },
                        set: function (tmp$0) {
                            this.$name_t1ewl3$ = tmp$0;
                        }
                    },
                    value: {
                        get: function () {
                            return this.$value_n28b23$;
                        },
                        set: function (tmp$0) {
                            this.$value_n28b23$ = tmp$0;
                        }
                    }
                }),
                PortTypeRef: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.PortTypeRef.prototype */ {
                    optional: {
                        get: function () {
                            return this.$optional_x07kgh$;
                        },
                        set: function (tmp$0) {
                            this.$optional_x07kgh$ = tmp$0;
                        }
                    },
                    noDependency: {
                        get: function () {
                            return this.$noDependency_t9zxol$;
                        },
                        set: function (tmp$0) {
                            this.$noDependency_t9zxol$ = tmp$0;
                        }
                    },
                    ref: {
                        get: function () {
                            return this.$ref_yibe1w$;
                        },
                        set: function (tmp$0) {
                            this.$ref_yibe1w$ = tmp$0;
                        }
                    },
                    mappings: {
                        get: function () {
                            return this.$mappings_sheb7w$;
                        },
                        set: function (tmp$0) {
                            this.$mappings_sheb7w$ = tmp$0;
                        }
                    }
                }),
                ServicePortType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.PortType, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ServicePortType.prototype */ {
                    interface: {
                        get: function () {
                            return this.$interface_wlgea$;
                        },
                        set: function (tmp$0) {
                            this.$interface_wlgea$ = tmp$0;
                        }
                    },
                    operations: {
                        get: function () {
                            return this.$operations_ggf0fx$;
                        },
                        set: function (tmp$0) {
                            this.$operations_ggf0fx$ = tmp$0;
                        }
                    }
                }),
                Operation: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Operation.prototype */ {
                    parameters: {
                        get: function () {
                            return this.$parameters_nryb4m$;
                        },
                        set: function (tmp$0) {
                            this.$parameters_nryb4m$ = tmp$0;
                        }
                    },
                    returnType: {
                        get: function () {
                            return this.$returnType_98xmpi$;
                        },
                        set: function (tmp$0) {
                            this.$returnType_98xmpi$ = tmp$0;
                        }
                    }
                }),
                Parameter: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Parameter.prototype */ {
                    order: {
                        get: function () {
                            return this.$order_tm5icw$;
                        },
                        set: function (tmp$0) {
                            this.$order_tm5icw$ = tmp$0;
                        }
                    },
                    type: {
                        get: function () {
                            return this.$type_3moby0$;
                        },
                        set: function (tmp$0) {
                            this.$type_3moby0$ = tmp$0;
                        }
                    }
                }),
                TypedElement: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.TypedElement.prototype */ {
                    genericTypes: {
                        get: function () {
                            return this.$genericTypes_32ol0l$;
                        },
                        set: function (tmp$0) {
                            this.$genericTypes_32ol0l$ = tmp$0;
                        }
                    }
                }),
                MessagePortType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.PortType, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.MessagePortType.prototype */ {
                    filters: {
                        get: function () {
                            return this.$filters_a0gt4a$;
                        },
                        set: function (tmp$0) {
                            this.$filters_a0gt4a$ = tmp$0;
                        }
                    }
                }),
                Repository: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Repository.prototype */ {
                    url: {
                        get: function () {
                            return this.$url_htkyl8$;
                        },
                        set: function (tmp$0) {
                            this.$url_htkyl8$ = tmp$0;
                        }
                    }
                }),
                DeployUnit: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.DeployUnit.prototype */ {
                    groupName: {
                        get: function () {
                            return this.$groupName_3j9s80$;
                        },
                        set: function (tmp$0) {
                            this.$groupName_3j9s80$ = tmp$0;
                        }
                    },
                    version: {
                        get: function () {
                            return this.$version_m3ipvy$;
                        },
                        set: function (tmp$0) {
                            this.$version_m3ipvy$ = tmp$0;
                        }
                    },
                    url: {
                        get: function () {
                            return this.$url_i45wyt$;
                        },
                        set: function (tmp$0) {
                            this.$url_i45wyt$ = tmp$0;
                        }
                    },
                    hashcode: {
                        get: function () {
                            return this.$hashcode_a0cemd$;
                        },
                        set: function (tmp$0) {
                            this.$hashcode_a0cemd$ = tmp$0;
                        }
                    },
                    type: {
                        get: function () {
                            return this.$type_6ntjgc$;
                        },
                        set: function (tmp$0) {
                            this.$type_6ntjgc$ = tmp$0;
                        }
                    },
                    requiredLibs: {
                        get: function () {
                            return this.$requiredLibs_vqdz55$;
                        },
                        set: function (tmp$0) {
                            this.$requiredLibs_vqdz55$ = tmp$0;
                        }
                    }
                }),
                TypeLibrary: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.TypeLibrary.prototype */ {
                    subTypes: {
                        get: function () {
                            return this.$subTypes_lmvuqp$;
                        },
                        set: function (tmp$0) {
                            this.$subTypes_lmvuqp$ = tmp$0;
                        }
                    }
                }),
                NamedElement: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.NamedElement.prototype */ {
                    name: {
                        get: function () {
                            return this.$name_mc5v37$;
                        },
                        set: function (tmp$0) {
                            this.$name_mc5v37$ = tmp$0;
                        }
                    }
                }),
                PortTypeMapping: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.PortTypeMapping.prototype */ {
                    beanMethodName: {
                        get: function () {
                            return this.$beanMethodName_sgmp8w$;
                        },
                        set: function (tmp$0) {
                            this.$beanMethodName_sgmp8w$ = tmp$0;
                        }
                    },
                    serviceMethodName: {
                        get: function () {
                            return this.$serviceMethodName_kdedgt$;
                        },
                        set: function (tmp$0) {
                            this.$serviceMethodName_kdedgt$ = tmp$0;
                        }
                    },
                    paramTypes: {
                        get: function () {
                            return this.$paramTypes_fy6jxc$;
                        },
                        set: function (tmp$0) {
                            this.$paramTypes_fy6jxc$ = tmp$0;
                        }
                    },
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_690oqi$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_690oqi$ = tmp$0;
                        }
                    }
                }),
                Channel: Kotlin.createTrait(function () {
                    return [_.org.kevoree.Instance, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Channel.prototype */ {
                    bindings: {
                        get: function () {
                            return this.$bindings_ty2776$;
                        },
                        set: function (tmp$0) {
                            this.$bindings_ty2776$ = tmp$0;
                        }
                    }
                }),
                MBinding: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.MBinding.prototype */ {
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_fziggz$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_fziggz$ = tmp$0;
                        }
                    },
                    port: {
                        get: function () {
                            return this.$port_6otxb6$;
                        },
                        set: function (tmp$0) {
                            this.$port_6otxb6$ = tmp$0;
                        }
                    },
                    hub: {
                        get: function () {
                            return this.$hub_ijo8js$;
                        },
                        set: function (tmp$0) {
                            this.$hub_ijo8js$ = tmp$0;
                        }
                    }
                }),
                NodeNetwork: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.NodeNetwork.prototype */ {
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_fhrlkx$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_fhrlkx$ = tmp$0;
                        }
                    },
                    link: {
                        get: function () {
                            return this.$link_7zc9cb$;
                        },
                        set: function (tmp$0) {
                            this.$link_7zc9cb$ = tmp$0;
                        }
                    },
                    initBy: {
                        get: function () {
                            return this.$initBy_ekaym$;
                        },
                        set: function (tmp$0) {
                            this.$initBy_ekaym$ = tmp$0;
                        }
                    },
                    target: {
                        get: function () {
                            return this.$target_4lxpqk$;
                        },
                        set: function (tmp$0) {
                            this.$target_4lxpqk$ = tmp$0;
                        }
                    }
                }),
                NodeLink: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.NodeLink.prototype */ {
                    networkType: {
                        get: function () {
                            return this.$networkType_cjd1jj$;
                        },
                        set: function (tmp$0) {
                            this.$networkType_cjd1jj$ = tmp$0;
                        }
                    },
                    estimatedRate: {
                        get: function () {
                            return this.$estimatedRate_fdbair$;
                        },
                        set: function (tmp$0) {
                            this.$estimatedRate_fdbair$ = tmp$0;
                        }
                    },
                    lastCheck: {
                        get: function () {
                            return this.$lastCheck_v8x0h3$;
                        },
                        set: function (tmp$0) {
                            this.$lastCheck_v8x0h3$ = tmp$0;
                        }
                    },
                    zoneID: {
                        get: function () {
                            return this.$zoneID_oqk2jk$;
                        },
                        set: function (tmp$0) {
                            this.$zoneID_oqk2jk$ = tmp$0;
                        }
                    },
                    generated_KMF_ID: {
                        get: function () {
                            return this.$generated_KMF_ID_hnsswx$;
                        },
                        set: function (tmp$0) {
                            this.$generated_KMF_ID_hnsswx$ = tmp$0;
                        }
                    },
                    networkProperties: {
                        get: function () {
                            return this.$networkProperties_odt0so$;
                        },
                        set: function (tmp$0) {
                            this.$networkProperties_odt0so$ = tmp$0;
                        }
                    }
                }),
                NetworkInfo: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.NetworkInfo.prototype */ {
                    values: {
                        get: function () {
                            return this.$values_itr2zx$;
                        },
                        set: function (tmp$0) {
                            this.$values_itr2zx$ = tmp$0;
                        }
                    }
                }),
                NetworkProperty: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.NetworkProperty.prototype */ {
                    value: {
                        get: function () {
                            return this.$value_byln4j$;
                        },
                        set: function (tmp$0) {
                            this.$value_byln4j$ = tmp$0;
                        }
                    }
                }),
                ChannelType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypeDefinition, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.ChannelType.prototype */ {
                    lowerBindings: {
                        get: function () {
                            return this.$lowerBindings_8zhvff$;
                        },
                        set: function (tmp$0) {
                            this.$lowerBindings_8zhvff$ = tmp$0;
                        }
                    },
                    upperBindings: {
                        get: function () {
                            return this.$upperBindings_ffz8ee$;
                        },
                        set: function (tmp$0) {
                            this.$upperBindings_ffz8ee$ = tmp$0;
                        }
                    },
                    lowerFragments: {
                        get: function () {
                            return this.$lowerFragments_r3d52k$;
                        },
                        set: function (tmp$0) {
                            this.$lowerFragments_r3d52k$ = tmp$0;
                        }
                    },
                    upperFragments: {
                        get: function () {
                            return this.$upperFragments_32uu0b$;
                        },
                        set: function (tmp$0) {
                            this.$upperFragments_32uu0b$ = tmp$0;
                        }
                    }
                }),
                TypeDefinition: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.TypeDefinition.prototype */ {
                    version: {
                        get: function () {
                            return this.$version_tm0unk$;
                        },
                        set: function (tmp$0) {
                            this.$version_tm0unk$ = tmp$0;
                        }
                    },
                    factoryBean: {
                        get: function () {
                            return this.$factoryBean_wgppzi$;
                        },
                        set: function (tmp$0) {
                            this.$factoryBean_wgppzi$ = tmp$0;
                        }
                    },
                    bean: {
                        get: function () {
                            return this.$bean_o4i4bc$;
                        },
                        set: function (tmp$0) {
                            this.$bean_o4i4bc$ = tmp$0;
                        }
                    },
                    abstract: {
                        get: function () {
                            return this.$abstract_ez9r92$;
                        },
                        set: function (tmp$0) {
                            this.$abstract_ez9r92$ = tmp$0;
                        }
                    },
                    deployUnit: {
                        get: function () {
                            return this.$deployUnit_3hafub$;
                        },
                        set: function (tmp$0) {
                            this.$deployUnit_3hafub$ = tmp$0;
                        }
                    },
                    dictionaryType: {
                        get: function () {
                            return this.$dictionaryType_vkfvko$;
                        },
                        set: function (tmp$0) {
                            this.$dictionaryType_vkfvko$ = tmp$0;
                        }
                    },
                    superTypes: {
                        get: function () {
                            return this.$superTypes_dv6lpi$;
                        },
                        set: function (tmp$0) {
                            this.$superTypes_dv6lpi$ = tmp$0;
                        }
                    }
                }),
                Instance: Kotlin.createTrait(function () {
                    return [_.org.kevoree.NamedElement, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Instance.prototype */ {
                    metaData: {
                        get: function () {
                            return this.$metaData_18932n$;
                        },
                        set: function (tmp$0) {
                            this.$metaData_18932n$ = tmp$0;
                        }
                    },
                    started: {
                        get: function () {
                            return this.$started_sh883l$;
                        },
                        set: function (tmp$0) {
                            this.$started_sh883l$ = tmp$0;
                        }
                    },
                    typeDefinition: {
                        get: function () {
                            return this.$typeDefinition_ezyus3$;
                        },
                        set: function (tmp$0) {
                            this.$typeDefinition_ezyus3$ = tmp$0;
                        }
                    },
                    dictionary: {
                        get: function () {
                            return this.$dictionary_pt7ca2$;
                        },
                        set: function (tmp$0) {
                            this.$dictionary_pt7ca2$ = tmp$0;
                        }
                    },
                    fragmentDictionary: {
                        get: function () {
                            return this.$fragmentDictionary_6cu6ii$;
                        },
                        set: function (tmp$0) {
                            this.$fragmentDictionary_6cu6ii$ = tmp$0;
                        }
                    }
                }),
                Group: Kotlin.createTrait(function () {
                    return [_.org.kevoree.Instance, _.org.kevoree.modeling.api.KMFContainer];
                }, /** @lends _.org.kevoree.Group.prototype */ {
                    subNodes: {
                        get: function () {
                            return this.$subNodes_lc0dmh$;
                        },
                        set: function (tmp$0) {
                            this.$subNodes_lc0dmh$ = tmp$0;
                        }
                    }
                }),
                GroupType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypeDefinition, _.org.kevoree.modeling.api.KMFContainer];
                }),
                NodeType: Kotlin.createTrait(function () {
                    return [_.org.kevoree.TypeDefinition, _.org.kevoree.modeling.api.KMFContainer];
                }),
                KevoreeFactory: Kotlin.createTrait(function () {
                    return [_.org.kevoree.modeling.api.KMFFactory];
                }),
                cloner: Kotlin.definePackage(null, /** @lends _.org.kevoree.cloner */ {
                    DefaultModelCloner: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.ModelCloner];
                    }, function () {
                        this.$mainFactory_mvyzsw$ = new _.org.kevoree.factory.MainFactory();
                    }, /** @lends _.org.kevoree.cloner.DefaultModelCloner.prototype */ {
                        createContext: function () {
                            return new Kotlin.ComplexHashMap();
                        },
                        mainFactory: {
                            get: function () {
                                return this.$mainFactory_mvyzsw$;
                            },
                            set: function (tmp$0) {
                                this.$mainFactory_mvyzsw$ = tmp$0;
                            }
                        }
                    })
                }),
                compare: Kotlin.definePackage(null, /** @lends _.org.kevoree.compare */ {
                    DefaultModelCompare: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.compare.ModelCompare];
                    }, null, /** @lends _.org.kevoree.compare.DefaultModelCompare.prototype */ {
                        createSequence: function () {
                            return new _.org.kevoree.trace.DefaultTraceSequence();
                        }
                    })
                }),
                container: Kotlin.definePackage(function () {
                    this.cleanCacheVisitor = Kotlin.createObject(function () {
                        return [_.org.kevoree.modeling.api.util.ModelVisitor];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                    }, {
                        visit: function (elem, refNameInParent, parent) {
                            (elem != null ? elem : Kotlin.throwNPE()).path_cache = null;
                        }
                    });
                }, /** @lends _.org.kevoree.container */ {
                    KMFContainerImpl: Kotlin.createTrait(function () {
                        return [_.org.kevoree.modeling.api.KMFContainer];
                    }, /** @lends _.org.kevoree.container.KMFContainerImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_v316j1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_v316j1$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_clnprc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_clnprc$ = tmp$0;
                            }
                        },
                        eContainer: function () {
                            return this.internal_eContainer;
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_2rxjyb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_2rxjyb$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_bdx8q0$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_bdx8q0$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_uv4k8b$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_uv4k8b$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_1u9252$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_1u9252$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_czt5qs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_czt5qs$ = tmp$0;
                            }
                        },
                        addInboundReference: function (path, refName) {
                            if (!this.internal_deleteInProgress) {
                                _.kotlin.getOrPut_ynyybx$(this.internal_inboundReferences, path, _.org.kevoree.container.KMFContainerImpl.addInboundReference$f).add_za3rmp$(refName);
                            }
                        },
                        removeInboundReference: function (path, refName) {
                            if (!this.internal_deleteInProgress) {
                                var refs = this.internal_inboundReferences.get_za3rmp$(path);
                                if (refs != null) {
                                    if (refs.size() > 1) {
                                        refs.remove_za3rmp$(refName);
                                    }
                                    else {
                                        this.internal_inboundReferences.remove_za3rmp$(path);
                                    }
                                }
                            }
                        },
                        advertiseInboundRefs: function (action, value) {
                            var tmp$0;
                            var inbRefTmp = (tmp$0 = this.internal_inboundReferences) != null ? tmp$0 : Kotlin.throwNPE();
                            {
                                var tmp$1 = inbRefTmp.keySet().iterator();
                                while (tmp$1.hasNext()) {
                                    var inboundElem = tmp$1.next();
                                    var tmp$2;
                                    var refList = (tmp$2 = inbRefTmp.get_za3rmp$(inboundElem)) != null ? tmp$2 : Kotlin.throwNPE();
                                    {
                                        var tmp$3 = refList.iterator();
                                        while (tmp$3.hasNext()) {
                                            var ref = tmp$3.next();
                                            inboundElem.reflexiveMutator(action, ref, value, false, true);
                                        }
                                    }
                                }
                            }
                        },
                        setRecursiveReadOnly: function () {
                            if (Kotlin.equals(this.internal_recursive_readOnlyElem, true)) {
                                return;
                            }
                            this.setInternalRecursiveReadOnly();
                            var recVisitor = _.org.kevoree.container.KMFContainerImpl.setRecursiveReadOnly$f();
                            this.visit(recVisitor, true, true, true);
                            this.setInternalReadOnly();
                        },
                        setInternalReadOnly: function () {
                            this.internal_readOnlyElem = true;
                        },
                        setInternalRecursiveReadOnly: function () {
                            this.internal_recursive_readOnlyElem = true;
                        },
                        getRefInParent: function () {
                            return this.internal_containmentRefName;
                        },
                        isReadOnly: function () {
                            return this.internal_readOnlyElem;
                        },
                        isRecursiveReadOnly: function () {
                            return this.internal_recursive_readOnlyElem;
                        },
                        setEContainer: function (container, unsetCmd, refNameInParent) {
                            if (this.internal_readOnlyElem) {
                                return;
                            }
                            if (Kotlin.equals(this.eContainer(), container)) {
                                return;
                            }
                            var tempUnsetCmd = this.internal_unsetCmd;
                            this.internal_unsetCmd = null;
                            if (tempUnsetCmd != null) {
                                tempUnsetCmd.run();
                            }
                            this.internal_eContainer = container;
                            this.internal_unsetCmd = unsetCmd;
                            this.internal_containmentRefName = refNameInParent;
                            this.path_cache = null;
                            this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                        },
                        selectByQuery: function (query) {
                            throw new Error('Not activated, please add selector option in KMF generation plugin');
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_dtvvyj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_dtvvyj$ = tmp$0;
                            }
                        },
                        fireModelEvent: function (evt) {
                            if (this.internal_modelElementListeners != null) {
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.internal_modelElementListeners) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var lst = tmp$1.next();
                                        lst.elementChanged(evt);
                                    }
                                }
                            }
                            this.fireModelEventOnTree(evt);
                        },
                        addModelElementListener: function (lst) {
                            if (this.internal_modelElementListeners == null) {
                                this.internal_modelElementListeners = new Kotlin.ArrayList();
                            }
                            var tmp$0;
                            ((tmp$0 = this.internal_modelElementListeners) != null ? tmp$0 : Kotlin.throwNPE()).add_za3rmp$(lst);
                        },
                        removeModelElementListener: function (lst) {
                            if (this.internal_modelElementListeners != null) {
                                var tmp$0, tmp$1;
                                ((tmp$0 = this.internal_modelElementListeners) != null ? tmp$0 : Kotlin.throwNPE()).remove_za3rmp$(lst);
                                if (((tmp$1 = this.internal_modelElementListeners) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
                                    this.internal_modelElementListeners = null;
                                }
                            }
                        },
                        removeAllModelElementListeners: function () {
                            if (this.internal_modelElementListeners != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_modelElementListeners) != null ? tmp$0 : Kotlin.throwNPE()).clear();
                                this.internal_modelElementListeners = null;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_uom9b$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_uom9b$ = tmp$0;
                            }
                        },
                        fireModelEventOnTree: function (evt) {
                            if (this.internal_modelTreeListeners != null) {
                                var tmp$0;
                                {
                                    var tmp$1 = ((tmp$0 = this.internal_modelTreeListeners) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var lst = tmp$1.next();
                                        lst.elementChanged(evt);
                                    }
                                }
                            }
                            if (this.eContainer() != null) {
                                var tmp$2;
                                ((tmp$2 = this.eContainer()) != null ? tmp$2 : Kotlin.throwNPE()).fireModelEventOnTree(evt);
                            }
                        },
                        addModelTreeListener: function (lst) {
                            if (this.internal_modelTreeListeners == null) {
                                this.internal_modelTreeListeners = new Kotlin.ArrayList();
                            }
                            var tmp$0;
                            ((tmp$0 = this.internal_modelTreeListeners) != null ? tmp$0 : Kotlin.throwNPE()).add_za3rmp$(lst);
                        },
                        removeModelTreeListener: function (lst) {
                            if (this.internal_modelTreeListeners != null) {
                                var tmp$0, tmp$1;
                                ((tmp$0 = this.internal_modelTreeListeners) != null ? tmp$0 : Kotlin.throwNPE()).remove_za3rmp$(lst);
                                if (((tmp$1 = this.internal_modelTreeListeners) != null ? tmp$1 : Kotlin.throwNPE()).isEmpty()) {
                                    this.internal_modelTreeListeners = null;
                                }
                            }
                        },
                        removeAllModelTreeListeners: function () {
                            if (this.internal_modelTreeListeners != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_modelTreeListeners) != null ? tmp$0 : Kotlin.throwNPE()).clear();
                                this.internal_modelElementListeners = null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                        },
                        visitAttributes: function (visitor) {
                        },
                        internal_visit: function (visitor, internalElem, recursive, containedReference, nonContainedReference, refName) {
                            if (internalElem != null) {
                                if (nonContainedReference && recursive) {
                                    var tmp$0, tmp$1, tmp$2;
                                    var elemPath = (tmp$0 = internalElem.path()) != null ? tmp$0 : Kotlin.throwNPE();
                                    if (visitor.alreadyVisited != null && ((tmp$1 = visitor.alreadyVisited) != null ? tmp$1 : Kotlin.throwNPE()).containsKey_za3rmp$(elemPath)) {
                                        return;
                                    }
                                    if (visitor.alreadyVisited == null) {
                                        visitor.alreadyVisited = new Kotlin.PrimitiveHashMap();
                                    }
                                    ((tmp$2 = visitor.alreadyVisited) != null ? tmp$2 : Kotlin.throwNPE()).put_wn2jw4$(elemPath, internalElem);
                                }
                                visitor.visit(internalElem, refName, this);
                                if (!visitor.visitStopped) {
                                    if (recursive && (visitor.visitChildren || visitor.visitReferences)) {
                                        var visitSubReferences = nonContainedReference && visitor.visitReferences;
                                        var visitSubChilds = containedReference && visitor.visitChildren;
                                        internalElem.visit(visitor, recursive, visitSubChilds, visitSubReferences);
                                    }
                                    visitor.visitChildren = true;
                                    visitor.visitReferences = true;
                                }
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_5gbaib$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_5gbaib$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_vns4l3$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_vns4l3$ = tmp$0;
                            }
                        },
                        path: function () {
                            if (this.path_cache != null) {
                                return this.path_cache;
                            }
                            var container = this.eContainer();
                            if (container != null) {
                                var parentPath = container.path();
                                if (parentPath == null) {
                                    return null;
                                }
                                else {
                                    var tmp$0;
                                    if (Kotlin.equals(parentPath, '')) {
                                        tmp$0 = '';
                                    }
                                    else {
                                        tmp$0 = parentPath + '/';
                                    }
                                    this.path_cache = tmp$0 + this.internal_containmentRefName + '[' + this.internalGetKey() + ']';
                                }
                            }
                            else {
                                this.path_cache = '';
                            }
                            return this.path_cache;
                        },
                        modelEquals: function (similarObj) {
                            if (similarObj == null) {
                                return false;
                            }
                            if (Kotlin.equals(this, similarObj)) {
                                return true;
                            }
                            if (!Kotlin.equals(similarObj.metaClassName(), this.metaClassName())) {
                                return false;
                            }
                            var values = new Kotlin.PrimitiveHashMap();
                            var attVisitor = _.org.kevoree.container.KMFContainerImpl.modelEquals$f(values);
                            this.visitAttributes(attVisitor);
                            similarObj.visitAttributes(attVisitor);
                            if (!values.isEmpty()) {
                                return false;
                            }
                            var payload = '';
                            var refVisitor = _.org.kevoree.container.KMFContainerImpl.modelEquals$f_0(values, payload);
                            this.visit(refVisitor, false, false, true);
                            similarObj.visit(refVisitor, false, false, true);
                            if (!values.isEmpty()) {
                                return false;
                            }
                            return true;
                        },
                        deepModelEquals: function (similarObj) {
                            if (!this.modelEquals(similarObj)) {
                                return false;
                            }
                            var similarRoot = similarObj != null ? similarObj : Kotlin.throwNPE();
                            while (similarRoot.eContainer() != null) {
                                var tmp$0;
                                similarRoot = (tmp$0 = similarRoot.eContainer()) != null ? tmp$0 : Kotlin.throwNPE();
                            }
                            var resultTest = {v: true};
                            var finalRoot = similarRoot;
                            var objVisitor = _.org.kevoree.container.KMFContainerImpl.deepModelEquals$f(finalRoot, resultTest);
                            this.visit(objVisitor, true, true, false);
                            return resultTest.v;
                        },
                        findByPath: function (query) {
                            if (Kotlin.equals(query, this.path())) {
                                return this;
                            }
                            var firstSepIndex = _.js.indexOf_960177$(query, '[');
                            if (firstSepIndex === -1) {
                                if (query.length === 0) {
                                    return this;
                                }
                                else {
                                    return null;
                                }
                            }
                            var queryID = '';
                            var extraReadChar = 2;
                            var relationName = query.substring(0, _.js.indexOf_960177$(query, '['));
                            if (_.js.indexOf_960177$(query, '{') === firstSepIndex + 1) {
                                queryID = query.substring(_.js.indexOf_960177$(query, '{') + 1, _.js.indexOf_960177$(query, '}'));
                                extraReadChar = extraReadChar + 2;
                            }
                            else {
                                var indexFirstClose = _.js.indexOf_960177$(query, ']');
                                while (indexFirstClose + 1 < query.length && query.charAt(indexFirstClose + 1) !== '/') {
                                    indexFirstClose = _.js.indexOf_orzsrp$(query, ']', indexFirstClose + 1);
                                }
                                queryID = query.substring(_.js.indexOf_960177$(query, '[') + 1, indexFirstClose);
                            }
                            var subquery = query.substring(relationName.length + queryID.length + extraReadChar, query.length);
                            if (_.js.indexOf_960177$(subquery, '/') !== -1) {
                                subquery = subquery.substring(_.js.indexOf_960177$(subquery, '/') + 1, subquery.length);
                            }
                            var objFound = this.findByID(relationName, queryID);
                            if (!Kotlin.equals(subquery, '') && objFound != null) {
                                return objFound.findByPath(subquery);
                            }
                            else {
                                return objFound;
                            }
                        },
                        createTraces: function (similarObj, isInter, isMerge, onlyReferences, onlyAttributes) {
                            var traces = new Kotlin.ArrayList();
                            var values = new Kotlin.PrimitiveHashMap();
                            if (onlyAttributes) {
                                var attVisitorFill = _.org.kevoree.container.KMFContainerImpl.createTraces$f(values);
                                this.visitAttributes(attVisitorFill);
                                var attVisitor = _.org.kevoree.container.KMFContainerImpl.createTraces$f_0(values, isInter, traces, this);
                                if (similarObj != null) {
                                    similarObj.visitAttributes(attVisitor);
                                }
                                if (!isInter && !isMerge && _.kotlin.get_size(values) !== 0) {
                                    {
                                        var tmp$0 = values.keySet().iterator();
                                        while (tmp$0.hasNext()) {
                                            var hashLoopRes = tmp$0.next();
                                            var tmp$1;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), hashLoopRes, null, null, null));
                                        }
                                    }
                                }
                            }
                            if (onlyReferences) {
                                var payload = '';
                                var refVisitorFill = _.org.kevoree.container.KMFContainerImpl.createTraces$f_1(values, payload);
                                this.visit(refVisitorFill, false, false, true);
                                var refVisitor = _.org.kevoree.container.KMFContainerImpl.createTraces$f_2(values, isInter, traces, this);
                                if (similarObj != null) {
                                    similarObj.visit(refVisitor, false, false, true);
                                }
                                if (!isInter && !isMerge && _.kotlin.get_size(values) !== 0) {
                                    {
                                        var tmp$2 = values.keySet().iterator();
                                        while (tmp$2.hasNext()) {
                                            var hashLoopRes_0 = tmp$2.next();
                                            var splittedVal = Kotlin.splitString(hashLoopRes_0, '_');
                                            var tmp$3;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$3 = this.path()) != null ? tmp$3 : Kotlin.throwNPE(), splittedVal[0], splittedVal[1]));
                                        }
                                    }
                                }
                            }
                            return traces;
                        },
                        toTraces: function (attributes, references) {
                            var traces = new Kotlin.ArrayList();
                            if (attributes) {
                                var attVisitorFill = _.org.kevoree.container.KMFContainerImpl.toTraces$f(traces, this);
                                this.visitAttributes(attVisitorFill);
                            }
                            if (references) {
                                var refVisitorFill = _.org.kevoree.container.KMFContainerImpl.toTraces$f_0(traces, this);
                                this.visit(refVisitorFill, false, true, true);
                            }
                            return traces;
                        }
                    }, /** @lends _.org.kevoree.container.KMFContainerImpl */ {
                        addInboundReference$f: function () {
                            return new Kotlin.ArrayList();
                        },
                        setRecursiveReadOnly$f: function () {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    if (elem.isRecursiveReadOnly()) {
                                        this.noChildrenVisit();
                                    }
                                    else {
                                        (elem != null ? elem : Kotlin.throwNPE()).setInternalRecursiveReadOnly();
                                        elem.setInternalReadOnly();
                                    }
                                }
                            });
                        },
                        modelEquals$f: function (values) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                            }, null, {
                                visit: function (value, name, parent) {
                                    if (values.containsKey_za3rmp$(name)) {
                                        if (Kotlin.equals(values.get_za3rmp$(name), value != null ? value.toString() : null)) {
                                            values.remove_za3rmp$(name);
                                        }
                                    }
                                    else {
                                        values.put_wn2jw4$(name, value != null ? value.toString() : null);
                                    }
                                }
                            });
                        },
                        modelEquals$f_0: function (values, payload) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    var concatedKey = refNameInParent + '_' + elem.path();
                                    if (values.containsKey_za3rmp$(concatedKey)) {
                                        values.remove_za3rmp$(concatedKey);
                                    }
                                    else {
                                        values.put_wn2jw4$(concatedKey, payload);
                                    }
                                }
                            });
                        },
                        deepModelEquals$f: function (finalRoot, resultTest) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    var tmp$0;
                                    var similarSubObj = finalRoot.findByPath((tmp$0 = elem.path()) != null ? tmp$0 : Kotlin.throwNPE());
                                    if (!elem.modelEquals(similarSubObj)) {
                                        resultTest.v = false;
                                        this.stopVisit();
                                    }
                                }
                            });
                        },
                        createTraces$f: function (values) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                            }, null, {
                                visit: function (value, name, parent) {
                                    values.put_wn2jw4$(name, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(value));
                                }
                            });
                        },
                        createTraces$f_0: function (values, isInter, traces, this$KMFContainerImpl) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                            }, null, {
                                visit: function (value, name, parent) {
                                    var attVal2 = _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(value);
                                    if (Kotlin.equals(values.get_za3rmp$(name), attVal2)) {
                                        if (isInter) {
                                            var tmp$0;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this$KMFContainerImpl.path()) != null ? tmp$0 : Kotlin.throwNPE(), name, null, attVal2, null));
                                        }
                                    }
                                    else {
                                        if (!isInter) {
                                            var tmp$1;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this$KMFContainerImpl.path()) != null ? tmp$1 : Kotlin.throwNPE(), name, null, attVal2, null));
                                        }
                                    }
                                    values.remove_za3rmp$(name);
                                }
                            });
                        },
                        createTraces$f_1: function (values, payload) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    var concatedKey = refNameInParent + '_' + elem.path();
                                    values.put_wn2jw4$(concatedKey, payload);
                                }
                            });
                        },
                        createTraces$f_2: function (values, isInter, traces, this$KMFContainerImpl) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    var concatedKey = refNameInParent + '_' + elem.path();
                                    if (values.get_za3rmp$(concatedKey) != null) {
                                        if (isInter) {
                                            var tmp$0, tmp$1;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = this$KMFContainerImpl.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE(), null));
                                        }
                                    }
                                    else {
                                        if (!isInter) {
                                            var tmp$2, tmp$3;
                                            traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$2 = this$KMFContainerImpl.path()) != null ? tmp$2 : Kotlin.throwNPE(), refNameInParent, (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE(), null));
                                        }
                                    }
                                    values.remove_za3rmp$(concatedKey);
                                }
                            });
                        },
                        toTraces$f: function (traces, this$KMFContainerImpl) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                            }, null, {
                                visit: function (value, name, parent) {
                                    var tmp$0;
                                    traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = this$KMFContainerImpl.path()) != null ? tmp$0 : Kotlin.throwNPE(), name, null, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(value), null));
                                }
                            });
                        },
                        toTraces$f_0: function (traces, this$KMFContainerImpl) {
                            return Kotlin.createObject(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, {
                                visit: function (elem, refNameInParent, parent) {
                                    var tmp$0, tmp$1;
                                    traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = this$KMFContainerImpl.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE(), null));
                                }
                            });
                        }
                    }),
                    RemoveFromContainerCommand: Kotlin.createClass(null, function (target, mutatorType, refName, element) {
                        this.target = target;
                        this.mutatorType = mutatorType;
                        this.refName = refName;
                        this.element = element;
                    }, /** @lends _.org.kevoree.container.RemoveFromContainerCommand.prototype */ {
                        run: function () {
                            this.target.reflexiveMutator(this.mutatorType, this.refName, this.element, true, true);
                        }
                    })
                }),
                factory: Kotlin.definePackage(function () {
                    this.Package = Kotlin.createObject(null, function () {
                        this.ORG_KEVOREE = 0;
                    }, {
                        getPackageForName: function (metaClassName) {
                            if (metaClassName.startsWith('org.kevoree')) {
                                return 0;
                            }
                            return -1;
                        }
                    });
                }, /** @lends _.org.kevoree.factory */ {
                    MainFactory: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.KMFFactory];
                    }, function () {
                        this.factories_w8u2z6$ = Kotlin.arrayFromFun(1, _.org.kevoree.factory.MainFactory.MainFactory$f);
                        this.factories_w8u2z6$[_.org.kevoree.factory.Package.ORG_KEVOREE] = new _.org.kevoree.impl.DefaultKevoreeFactory();
                    }, /** @lends _.org.kevoree.factory.MainFactory.prototype */ {
                        getFactoryForPackage: function (pack) {
                            return this.factories_w8u2z6$[pack];
                        },
                        getKevoreeFactory: function () {
                            var tmp$0;
                            return (tmp$0 = this.factories_w8u2z6$[_.org.kevoree.factory.Package.ORG_KEVOREE]) != null ? tmp$0 : Kotlin.throwNPE();
                        },
                        setKevoreeFactory: function (fct) {
                            this.factories_w8u2z6$[_.org.kevoree.factory.Package.ORG_KEVOREE] = fct;
                        },
                        create: function (metaClassName) {
                            var pack = _.org.kevoree.factory.Package.getPackageForName(metaClassName);
                            if (pack !== -1) {
                                var tmp$0;
                                return (tmp$0 = this.getFactoryForPackage(pack)) != null ? tmp$0.create(metaClassName) : null;
                            }
                            else {
                                var tmp$1, tmp$2, tmp$3, tmp$4;
                                {
                                    tmp$1 = Kotlin.arrayIndices(this.factories_w8u2z6$), tmp$2 = tmp$1.start, tmp$3 = tmp$1.end, tmp$4 = tmp$1.increment;
                                    for (var i = tmp$2; i <= tmp$3; i += tmp$4) {
                                        var tmp$5;
                                        var obj = ((tmp$5 = this.factories_w8u2z6$[i]) != null ? tmp$5 : Kotlin.throwNPE()).create(metaClassName);
                                        if (obj != null) {
                                            return obj;
                                        }
                                    }
                                }
                                return null;
                            }
                        }
                    }, /** @lends _.org.kevoree.factory.MainFactory */ {
                        MainFactory$f: function (i) {
                            return null;
                        }
                    })
                }),
                impl: Kotlin.definePackage(null, /** @lends _.org.kevoree.impl */ {
                    ChannelImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Channel, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_cchzb2$ = null;
                        this.$internal_containmentRefName_90vn2m$ = null;
                        this.$internal_unsetCmd_4t8cab$ = null;
                        this.$internal_readOnlyElem_h5s8p9$ = false;
                        this.$internal_recursive_readOnlyElem_9xg1b4$ = false;
                        this.$internal_inboundReferences_d3fkxt$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_x70dk1$ = false;
                        this.$internal_modelElementListeners_yynwp6$ = null;
                        this.$internal_modelTreeListeners_73mpdm$ = null;
                        this.$path_cache_lhhprs$ = null;
                        this.$key_cache_5vawfy$ = null;
                        this.$name_j026ln$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$metaData_ifygfj$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$started_pyhbkv$ = true;
                        this._bindings = new Kotlin.PrimitiveHashMap();
                        this._fragmentDictionary = new Kotlin.PrimitiveHashMap();
                        this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                        this.$typeDefinition_57fvd9$ = null;
                        this.$dictionary_xc6jgq$ = null;
                    }, /** @lends _.org.kevoree.impl.ChannelImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_cchzb2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_cchzb2$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_90vn2m$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_90vn2m$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_4t8cab$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_4t8cab$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_h5s8p9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_h5s8p9$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_9xg1b4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_9xg1b4$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_d3fkxt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_d3fkxt$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_x70dk1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_x70dk1$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_yynwp6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_yynwp6$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_73mpdm$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_73mpdm$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_lhhprs$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_lhhprs$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_5vawfy$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_5vawfy$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.typeDefinition != null) {
                                var tmp$0;
                                (((tmp$0 = this.typeDefinition) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                this.typeDefinition = null;
                            }
                            if (this.dictionary != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionary) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                this.dictionary = null;
                            }
                            var tmp$2;
                            {
                                var tmp$3 = ((tmp$2 = this.fragmentDictionary) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            this.removeAllBindings();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$4;
                                ((tmp$4 = this.internal_unsetCmd) != null ? tmp$4 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_j026ln$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_j026ln$;
                                this.$name_j026ln$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        metaData: {
                            get: function () {
                                return this.$metaData_ifygfj$;
                            },
                            set: function (iP) {
                                this.internal_metaData(iP, true);
                            }
                        },
                        internal_metaData: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.metaData)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$metaData_ifygfj$;
                                this.$metaData_ifygfj$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_metaData, this.metaData, kmf_previousVal));
                                }
                            }
                        },
                        started: {
                            get: function () {
                                return this.$started_pyhbkv$;
                            },
                            set: function (iP) {
                                this.internal_started(iP, true);
                            }
                        },
                        internal_started: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.started)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$started_pyhbkv$;
                                this.$started_pyhbkv$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_started, this.started, kmf_previousVal));
                                }
                            }
                        },
                        bindings: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._bindings.values());
                            },
                            set: function (bindingsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (bindingsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_bindings(bindingsP, true, true);
                            }
                        },
                        internal_bindings: function (bindingsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._bindings.values(), bindingsP)) {
                                var kmf_previousVal = this._bindings;
                                this.internal_removeAllBindings(true, false);
                                {
                                    var tmp$0 = bindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._bindings.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_hub, this, false, fireEvents);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddBindings: function (bindingsP) {
                            var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._bindings.containsKey_za3rmp$(_key_)) {
                                this._bindings.put_wn2jw4$(_key_, bindingsP);
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                            }
                        },
                        addBindings: function (bindingsP) {
                            this.internal_addBindings(bindingsP, true, true);
                        },
                        addAllBindings: function (bindingsP) {
                            this.internal_addAllBindings(bindingsP, true, true);
                        },
                        internal_addBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddBindings(bindingsP);
                            if (setOpposite) {
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_hub, this, false, fireEvents);
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, null));
                            }
                        },
                        internal_addAllBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = bindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddBindings(el);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_hub, this, false, fireEvents);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = bindingsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddBindings(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, null));
                            }
                        },
                        removeBindings: function (bindingsP) {
                            this.internal_removeBindings(bindingsP, true, true);
                        },
                        removeAllBindings: function () {
                            this.internal_removeAllBindings(true, true);
                        },
                        internal_removeBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._bindings.size() !== 0 && this._bindings.containsKey_za3rmp$((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = bindingsP.path();
                                this._bindings.remove_za3rmp$((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, previousPathToBeRemoved));
                                }
                                if (setOpposite) {
                                    (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_hub, null, false, fireEvents);
                                }
                            }
                        },
                        internal_removeAllBindings: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.bindings) != null ? tmp$0 : Kotlin.throwNPE();
                            if (setOpposite) {
                                {
                                    var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        (el != null ? el : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_hub, null, false, fireEvents);
                                    }
                                }
                            }
                            this._bindings.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, temp_els, null));
                            }
                        },
                        fragmentDictionary: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._fragmentDictionary.values());
                            },
                            set: function (fragmentDictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (fragmentDictionaryP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_fragmentDictionary(fragmentDictionaryP, true, true);
                            }
                        },
                        internal_fragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._fragmentDictionary.values(), fragmentDictionaryP)) {
                                var kmf_previousVal = this._fragmentDictionary;
                                this._fragmentDictionary.clear();
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._fragmentDictionary.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, el), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFragmentDictionary: function (fragmentDictionaryP) {
                            var _key_ = (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._fragmentDictionary.containsKey_za3rmp$(_key_)) {
                                this._fragmentDictionary.put_wn2jw4$(_key_, fragmentDictionaryP);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                        },
                        addFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        addAllFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addAllFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        internal_addFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFragmentDictionary(fragmentDictionaryP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        internal_addAllFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFragmentDictionary(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = fragmentDictionaryP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFragmentDictionary(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        removeFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_removeFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        removeAllFragmentDictionary: function () {
                            this.internal_removeAllFragmentDictionary(true, true);
                        },
                        internal_removeFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = fragmentDictionaryP.path();
                                this._fragmentDictionary.remove_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey());
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                ((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()) != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllFragmentDictionaryCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFragmentDictionary: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllFragmentDictionaryCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.fragmentDictionary) != null ? tmp$0 : Kotlin.throwNPE();
                            this._fragmentDictionary.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, temp_els, null));
                                this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                            }
                        },
                        typeDefinition: {
                            get: function () {
                                return this.$typeDefinition_57fvd9$;
                            },
                            set: function (typeDefinitionP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_typeDefinition(typeDefinitionP, true, true);
                            }
                        },
                        internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$typeDefinition_57fvd9$, typeDefinitionP)) {
                                var kmf_previousVal = this.$typeDefinition_57fvd9$;
                                if (typeDefinitionP != null) {
                                    ((typeDefinitionP != null ? typeDefinitionP : Kotlin.throwNPE()) != null ? typeDefinitionP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$typeDefinition_57fvd9$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                this.$typeDefinition_57fvd9$ = typeDefinitionP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_typeDefinition, typeDefinitionP, kmf_previousVal));
                                }
                            }
                        },
                        dictionary: {
                            get: function () {
                                return this.$dictionary_xc6jgq$;
                            },
                            set: function (dictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionary(dictionaryP, true, true);
                            }
                        },
                        internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionary_xc6jgq$, dictionaryP)) {
                                if (this.$dictionary_xc6jgq$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionary_xc6jgq$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryP != null) {
                                    (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                var kmf_previousVal = this.$dictionary_xc6jgq$;
                                if (dictionaryP != null) {
                                    ((dictionaryP != null ? dictionaryP : Kotlin.throwNPE()) != null ? dictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionary_xc6jgq$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                this.$dictionary_xc6jgq$ = dictionaryP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionary, dictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_metaData) {
                                this.internal_metaData(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_started) {
                                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_typeDefinition(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionary(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFragmentDictionary();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$(value)) {
                                        var obj = this._fragmentDictionary.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._fragmentDictionary.remove_za3rmp$(value);
                                        this._fragmentDictionary.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_bindings) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.internal_removeAllBindings(setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._bindings.size() !== 0 && this._bindings.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._bindings.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._bindings.remove_za3rmp$(value);
                                        this._bindings.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findFragmentDictionaryByID: function (key) {
                            return this._fragmentDictionary.get_za3rmp$(key);
                        },
                        findBindingsByID: function (key) {
                            return this._bindings.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                var objFound = this.typeDefinition;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                var objFound_0 = this.dictionary;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                return this.findFragmentDictionaryByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_bindings) {
                                return this.findBindingsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionary, _.org.kevoree.util.Constants.org_kevoree_Dictionary);
                                this.internal_visit(visitor, this.dictionary, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary, _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary);
                                {
                                    var tmp$0 = this._fragmentDictionary.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._fragmentDictionary.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                this.internal_visit(visitor, this.typeDefinition, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_bindings, _.org.kevoree.util.Constants.org_kevoree_MBinding);
                                {
                                    var tmp$1 = this._bindings.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._bindings.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_bindings);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_bindings);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.started, _.org.kevoree.util.Constants.Att_started, this);
                            visitor.visit(this.metaData, _.org.kevoree.util.Constants.Att_metaData, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Channel;
                        }
                    }),
                    ChannelTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ChannelType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_p3y5rc$ = null;
                        this.$internal_containmentRefName_yewt20$ = null;
                        this.$internal_unsetCmd_ybs3xv$ = null;
                        this.$internal_readOnlyElem_kjnzn$ = false;
                        this.$internal_recursive_readOnlyElem_4yqmva$ = false;
                        this.$internal_inboundReferences_9wwhuj$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_jce2mf$ = false;
                        this.$internal_modelElementListeners_3tuwy8$ = null;
                        this.$internal_modelTreeListeners_yoyb84$ = null;
                        this.$path_cache_dqee6q$ = null;
                        this.$key_cache_utnug4$ = null;
                        this.$name_2jcrtd$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_wxesu$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_qnd2y4$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_2j56nq$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_x4svag$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$lowerBindings_2eifxl$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$upperBindings_qtzjre$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$lowerFragments_p02ne0$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$upperFragments_zkcbr$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$dictionaryType_v1n452$ = null;
                        this.$deployUnit_wxjjj$ = null;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.ChannelTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_p3y5rc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_p3y5rc$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_yewt20$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_yewt20$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_ybs3xv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_ybs3xv$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_kjnzn$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_kjnzn$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_4yqmva$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_4yqmva$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_9wwhuj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_9wwhuj$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_jce2mf$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_jce2mf$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_3tuwy8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_3tuwy8$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_yoyb84$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_yoyb84$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_dqee6q$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_dqee6q$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_utnug4$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_utnug4$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_2jcrtd$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_2jcrtd$;
                                this.$name_2jcrtd$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_wxesu$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_wxesu$;
                                this.$version_wxesu$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_qnd2y4$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_qnd2y4$;
                                this.$factoryBean_qnd2y4$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_2j56nq$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_2j56nq$;
                                this.$bean_2j56nq$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_x4svag$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_x4svag$;
                                this.$abstract_x4svag$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        lowerBindings: {
                            get: function () {
                                return this.$lowerBindings_2eifxl$;
                            },
                            set: function (iP) {
                                this.internal_lowerBindings(iP, true);
                            }
                        },
                        internal_lowerBindings: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.lowerBindings) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$lowerBindings_2eifxl$;
                                this.$lowerBindings_2eifxl$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_lowerBindings, this.lowerBindings, kmf_previousVal));
                                }
                            }
                        },
                        upperBindings: {
                            get: function () {
                                return this.$upperBindings_qtzjre$;
                            },
                            set: function (iP) {
                                this.internal_upperBindings(iP, true);
                            }
                        },
                        internal_upperBindings: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.upperBindings) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$upperBindings_qtzjre$;
                                this.$upperBindings_qtzjre$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_upperBindings, this.upperBindings, kmf_previousVal));
                                }
                            }
                        },
                        lowerFragments: {
                            get: function () {
                                return this.$lowerFragments_p02ne0$;
                            },
                            set: function (iP) {
                                this.internal_lowerFragments(iP, true);
                            }
                        },
                        internal_lowerFragments: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.lowerFragments) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$lowerFragments_p02ne0$;
                                this.$lowerFragments_p02ne0$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_lowerFragments, this.lowerFragments, kmf_previousVal));
                                }
                            }
                        },
                        upperFragments: {
                            get: function () {
                                return this.$upperFragments_zkcbr$;
                            },
                            set: function (iP) {
                                this.internal_upperFragments(iP, true);
                            }
                        },
                        internal_upperFragments: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.upperFragments) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$upperFragments_zkcbr$;
                                this.$upperFragments_zkcbr$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_upperFragments, this.upperFragments, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_v1n452$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_v1n452$, dictionaryTypeP)) {
                                if (this.$dictionaryType_v1n452$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_v1n452$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_v1n452$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_v1n452$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_v1n452$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_wxjjj$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_wxjjj$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_wxjjj$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_wxjjj$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_wxjjj$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_lowerBindings) {
                                this.internal_lowerBindings(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_upperBindings) {
                                this.internal_upperBindings(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_lowerFragments) {
                                this.internal_lowerFragments(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_upperFragments) {
                                this.internal_upperFragments(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$0 = this._superTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.upperFragments, _.org.kevoree.util.Constants.Att_upperFragments, this);
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.upperBindings, _.org.kevoree.util.Constants.Att_upperBindings, this);
                            visitor.visit(this.lowerBindings, _.org.kevoree.util.Constants.Att_lowerBindings, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.lowerFragments, _.org.kevoree.util.Constants.Att_lowerFragments, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ChannelType;
                        }
                    }),
                    ComponentInstanceImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ComponentInstance, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_nmak19$ = null;
                        this.$internal_containmentRefName_kll01p$ = null;
                        this.$internal_unsetCmd_y60xya$ = null;
                        this.$internal_readOnlyElem_ikwqaq$ = false;
                        this.$internal_recursive_readOnlyElem_7d07xt$ = false;
                        this.$internal_inboundReferences_h2chgw$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_70mf3m$ = false;
                        this.$internal_modelElementListeners_ef9b0b$ = null;
                        this.$internal_modelTreeListeners_ioc2cp$ = null;
                        this.$path_cache_mu1bpj$ = null;
                        this.$key_cache_f2th5b$ = null;
                        this.$name_wk34d8$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$metaData_pdzzds$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$started_igd7rk$ = true;
                        this._fragmentDictionary = new Kotlin.PrimitiveHashMap();
                        this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                        this._provided = new Kotlin.PrimitiveHashMap();
                        this.removeAllProvidedCurrentlyProcessing = false;
                        this.$typeDefinition_fs7rgi$ = null;
                        this.$dictionary_yoq5eh$ = null;
                        this._required = new Kotlin.PrimitiveHashMap();
                        this.removeAllRequiredCurrentlyProcessing = false;
                        this.$namespace_x3lgh6$ = null;
                    }, /** @lends _.org.kevoree.impl.ComponentInstanceImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_nmak19$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_nmak19$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_kll01p$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_kll01p$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_y60xya$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_y60xya$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_ikwqaq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_ikwqaq$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_7d07xt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_7d07xt$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_h2chgw$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_h2chgw$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_70mf3m$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_70mf3m$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_ef9b0b$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_ef9b0b$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_ioc2cp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_ioc2cp$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_mu1bpj$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_mu1bpj$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_f2th5b$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_f2th5b$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.typeDefinition != null) {
                                var tmp$0;
                                (((tmp$0 = this.typeDefinition) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                this.typeDefinition = null;
                            }
                            if (this.dictionary != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionary) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                this.dictionary = null;
                            }
                            var tmp$2, tmp$4, tmp$6;
                            {
                                var tmp$3 = ((tmp$2 = this.fragmentDictionary) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            {
                                var tmp$5 = ((tmp$4 = this.provided) != null ? tmp$4 : Kotlin.throwNPE()).iterator();
                                while (tmp$5.hasNext()) {
                                    var el_0 = tmp$5.next();
                                    el_0.delete();
                                }
                            }
                            {
                                var tmp$7 = ((tmp$6 = this.required) != null ? tmp$6 : Kotlin.throwNPE()).iterator();
                                while (tmp$7.hasNext()) {
                                    var el_1 = tmp$7.next();
                                    el_1.delete();
                                }
                            }
                            if (this.namespace != null) {
                                var tmp$8;
                                (((tmp$8 = this.namespace) != null ? tmp$8 : Kotlin.throwNPE()) != null ? tmp$8 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_namespace);
                                this.namespace = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$9;
                                ((tmp$9 = this.internal_unsetCmd) != null ? tmp$9 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_wk34d8$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_wk34d8$;
                                this.$name_wk34d8$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        metaData: {
                            get: function () {
                                return this.$metaData_pdzzds$;
                            },
                            set: function (iP) {
                                this.internal_metaData(iP, true);
                            }
                        },
                        internal_metaData: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.metaData)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$metaData_pdzzds$;
                                this.$metaData_pdzzds$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_metaData, this.metaData, kmf_previousVal));
                                }
                            }
                        },
                        started: {
                            get: function () {
                                return this.$started_igd7rk$;
                            },
                            set: function (iP) {
                                this.internal_started(iP, true);
                            }
                        },
                        internal_started: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.started)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$started_igd7rk$;
                                this.$started_igd7rk$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_started, this.started, kmf_previousVal));
                                }
                            }
                        },
                        fragmentDictionary: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._fragmentDictionary.values());
                            },
                            set: function (fragmentDictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (fragmentDictionaryP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_fragmentDictionary(fragmentDictionaryP, true, true);
                            }
                        },
                        internal_fragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._fragmentDictionary.values(), fragmentDictionaryP)) {
                                var kmf_previousVal = this._fragmentDictionary;
                                this._fragmentDictionary.clear();
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._fragmentDictionary.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, el), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFragmentDictionary: function (fragmentDictionaryP) {
                            var _key_ = (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._fragmentDictionary.containsKey_za3rmp$(_key_)) {
                                this._fragmentDictionary.put_wn2jw4$(_key_, fragmentDictionaryP);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                        },
                        addFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        addAllFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addAllFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        internal_addFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFragmentDictionary(fragmentDictionaryP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        internal_addAllFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFragmentDictionary(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = fragmentDictionaryP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFragmentDictionary(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        removeFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_removeFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        removeAllFragmentDictionary: function () {
                            this.internal_removeAllFragmentDictionary(true, true);
                        },
                        internal_removeFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = fragmentDictionaryP.path();
                                this._fragmentDictionary.remove_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey());
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                ((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()) != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllFragmentDictionaryCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFragmentDictionary: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllFragmentDictionaryCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.fragmentDictionary) != null ? tmp$0 : Kotlin.throwNPE();
                            this._fragmentDictionary.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, temp_els, null));
                                this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                            }
                        },
                        provided: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._provided.values());
                            },
                            set: function (providedP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (providedP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_provided(providedP, true, true);
                            }
                        },
                        internal_provided: function (providedP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._provided.values(), providedP)) {
                                var kmf_previousVal = this._provided;
                                this._provided.clear();
                                {
                                    var tmp$0 = providedP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._provided.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_provided, el), _.org.kevoree.util.Constants.Ref_provided);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, kmf_previousVal));
                                }
                            }
                        },
                        doAddProvided: function (providedP) {
                            var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._provided.containsKey_za3rmp$(_key_)) {
                                this._provided.put_wn2jw4$(_key_, providedP);
                                (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_provided, providedP), _.org.kevoree.util.Constants.Ref_provided);
                                (providedP != null ? providedP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                            }
                        },
                        addProvided: function (providedP) {
                            this.internal_addProvided(providedP, true, true);
                        },
                        addAllProvided: function (providedP) {
                            this.internal_addAllProvided(providedP, true, true);
                        },
                        internal_addProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddProvided(providedP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, null));
                            }
                        },
                        internal_addAllProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = providedP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddProvided(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = providedP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddProvided(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, null));
                            }
                        },
                        removeProvided: function (providedP) {
                            this.internal_removeProvided(providedP, true, true);
                        },
                        removeAllProvided: function () {
                            this.internal_removeAllProvided(true, true);
                        },
                        internal_removeProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._provided.size() !== 0 && this._provided.containsKey_za3rmp$((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = providedP.path();
                                this._provided.remove_za3rmp$((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                                (providedP != null ? providedP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllProvidedCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllProvided: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllProvidedCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.provided) != null ? tmp$0 : Kotlin.throwNPE();
                            this._provided.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, temp_els, null));
                                this.removeAllProvidedCurrentlyProcessing = false;
                            }
                        },
                        typeDefinition: {
                            get: function () {
                                return this.$typeDefinition_fs7rgi$;
                            },
                            set: function (typeDefinitionP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_typeDefinition(typeDefinitionP, true, true);
                            }
                        },
                        internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$typeDefinition_fs7rgi$, typeDefinitionP)) {
                                var kmf_previousVal = this.$typeDefinition_fs7rgi$;
                                if (typeDefinitionP != null) {
                                    ((typeDefinitionP != null ? typeDefinitionP : Kotlin.throwNPE()) != null ? typeDefinitionP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$typeDefinition_fs7rgi$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                this.$typeDefinition_fs7rgi$ = typeDefinitionP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_typeDefinition, typeDefinitionP, kmf_previousVal));
                                }
                            }
                        },
                        dictionary: {
                            get: function () {
                                return this.$dictionary_yoq5eh$;
                            },
                            set: function (dictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionary(dictionaryP, true, true);
                            }
                        },
                        internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionary_yoq5eh$, dictionaryP)) {
                                if (this.$dictionary_yoq5eh$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionary_yoq5eh$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryP != null) {
                                    (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                var kmf_previousVal = this.$dictionary_yoq5eh$;
                                if (dictionaryP != null) {
                                    ((dictionaryP != null ? dictionaryP : Kotlin.throwNPE()) != null ? dictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionary_yoq5eh$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                this.$dictionary_yoq5eh$ = dictionaryP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionary, dictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        required: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._required.values());
                            },
                            set: function (requiredP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (requiredP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_required(requiredP, true, true);
                            }
                        },
                        internal_required: function (requiredP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._required.values(), requiredP)) {
                                var kmf_previousVal = this._required;
                                this._required.clear();
                                {
                                    var tmp$0 = requiredP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._required.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_required, el), _.org.kevoree.util.Constants.Ref_required);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, kmf_previousVal));
                                }
                            }
                        },
                        doAddRequired: function (requiredP) {
                            var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._required.containsKey_za3rmp$(_key_)) {
                                this._required.put_wn2jw4$(_key_, requiredP);
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_required, requiredP), _.org.kevoree.util.Constants.Ref_required);
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                            }
                        },
                        addRequired: function (requiredP) {
                            this.internal_addRequired(requiredP, true, true);
                        },
                        addAllRequired: function (requiredP) {
                            this.internal_addAllRequired(requiredP, true, true);
                        },
                        internal_addRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddRequired(requiredP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, null));
                            }
                        },
                        internal_addAllRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = requiredP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddRequired(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = requiredP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddRequired(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, null));
                            }
                        },
                        removeRequired: function (requiredP) {
                            this.internal_removeRequired(requiredP, true, true);
                        },
                        removeAllRequired: function () {
                            this.internal_removeAllRequired(true, true);
                        },
                        internal_removeRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._required.size() !== 0 && this._required.containsKey_za3rmp$((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = requiredP.path();
                                this._required.remove_za3rmp$((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllRequiredCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllRequired: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllRequiredCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.required) != null ? tmp$0 : Kotlin.throwNPE();
                            this._required.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, temp_els, null));
                                this.removeAllRequiredCurrentlyProcessing = false;
                            }
                        },
                        namespace: {
                            get: function () {
                                return this.$namespace_x3lgh6$;
                            },
                            set: function (namespaceP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_namespace(namespaceP, true, true);
                            }
                        },
                        internal_namespace: function (namespaceP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$namespace_x3lgh6$, namespaceP)) {
                                var kmf_previousVal = this.$namespace_x3lgh6$;
                                if (namespaceP != null) {
                                    ((namespaceP != null ? namespaceP : Kotlin.throwNPE()) != null ? namespaceP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_namespace);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$namespace_x3lgh6$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_namespace);
                                }
                                this.$namespace_x3lgh6$ = namespaceP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_namespace, namespaceP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_metaData) {
                                this.internal_metaData(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_started) {
                                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_typeDefinition(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionary(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFragmentDictionary();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$(value)) {
                                        var obj = this._fragmentDictionary.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._fragmentDictionary.remove_za3rmp$(value);
                                        this._fragmentDictionary.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_provided) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllProvided();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._provided.size() !== 0 && this._provided.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._provided.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._provided.remove_za3rmp$(value);
                                        this._provided.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_required) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllRequired();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._required.size() !== 0 && this._required.containsKey_za3rmp$(value)) {
                                        var obj_1 = this._required.get_za3rmp$(value);
                                        var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_1 == null) {
                                            throw new Error('Key newed to null ' + obj_1);
                                        }
                                        this._required.remove_za3rmp$(value);
                                        this._required.put_wn2jw4$(objNewKey_1, obj_1);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_namespace) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_namespace(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_namespace(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_namespace(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findFragmentDictionaryByID: function (key) {
                            return this._fragmentDictionary.get_za3rmp$(key);
                        },
                        findProvidedByID: function (key) {
                            return this._provided.get_za3rmp$(key);
                        },
                        findRequiredByID: function (key) {
                            return this._required.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                var objFound = this.typeDefinition;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                var objFound_0 = this.dictionary;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                return this.findFragmentDictionaryByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_provided) {
                                return this.findProvidedByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_required) {
                                return this.findRequiredByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_namespace) {
                                var objFound_1 = this.namespace;
                                if (objFound_1 != null && Kotlin.equals((objFound_1 != null ? objFound_1 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_1;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionary, _.org.kevoree.util.Constants.org_kevoree_Dictionary);
                                this.internal_visit(visitor, this.dictionary, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary, _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary);
                                {
                                    var tmp$0 = this._fragmentDictionary.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._fragmentDictionary.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_provided, _.org.kevoree.util.Constants.org_kevoree_Port);
                                {
                                    var tmp$1 = this._provided.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._provided.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_provided);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_provided);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_required, _.org.kevoree.util.Constants.org_kevoree_Port);
                                {
                                    var tmp$2 = this._required.keySet().iterator();
                                    while (tmp$2.hasNext()) {
                                        var KMFLoopEntryKey_1 = tmp$2.next();
                                        this.internal_visit(visitor, this._required.get_za3rmp$(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_required);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_required);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                this.internal_visit(visitor, this.typeDefinition, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_namespace, _.org.kevoree.util.Constants.org_kevoree_Namespace);
                                this.internal_visit(visitor, this.namespace, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_namespace);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_namespace);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.started, _.org.kevoree.util.Constants.Att_started, this);
                            visitor.visit(this.metaData, _.org.kevoree.util.Constants.Att_metaData, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ComponentInstance;
                        }
                    }),
                    ComponentTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ComponentType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_16ip9q$ = null;
                        this.$internal_containmentRefName_u5b5cu$ = null;
                        this.$internal_unsetCmd_3rxrnd$ = null;
                        this.$internal_readOnlyElem_j7e9vd$ = false;
                        this.$internal_recursive_readOnlyElem_ocbfg4$ = false;
                        this.$internal_inboundReferences_c2fo45$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_12zpjh$ = false;
                        this.$internal_modelElementListeners_vhhkc6$ = null;
                        this.$internal_modelTreeListeners_w2k31u$ = null;
                        this.$path_cache_g5zodw$ = null;
                        this.$key_cache_doblxy$ = null;
                        this.$name_kd67dj$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_muvtak$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_n5pkvm$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_kcym7w$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_b99riq$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$dictionaryType_n08r3w$ = null;
                        this._provided = new Kotlin.PrimitiveHashMap();
                        this.removeAllProvidedCurrentlyProcessing = false;
                        this.$deployUnit_szgj13$ = null;
                        this._required = new Kotlin.PrimitiveHashMap();
                        this.removeAllRequiredCurrentlyProcessing = false;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.ComponentTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_16ip9q$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_16ip9q$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_u5b5cu$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_u5b5cu$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_3rxrnd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_3rxrnd$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_j7e9vd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_j7e9vd$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_ocbfg4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_ocbfg4$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_c2fo45$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_c2fo45$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_12zpjh$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_12zpjh$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_vhhkc6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_vhhkc6$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_w2k31u$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_w2k31u$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_g5zodw$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_g5zodw$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_doblxy$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_doblxy$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            var tmp$2, tmp$4;
                            {
                                var tmp$3 = ((tmp$2 = this.required) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            {
                                var tmp$5 = ((tmp$4 = this.provided) != null ? tmp$4 : Kotlin.throwNPE()).iterator();
                                while (tmp$5.hasNext()) {
                                    var el_0 = tmp$5.next();
                                    el_0.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$6;
                                ((tmp$6 = this.internal_unsetCmd) != null ? tmp$6 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_kd67dj$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_kd67dj$;
                                this.$name_kd67dj$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_muvtak$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_muvtak$;
                                this.$version_muvtak$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_n5pkvm$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_n5pkvm$;
                                this.$factoryBean_n5pkvm$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_kcym7w$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_kcym7w$;
                                this.$bean_kcym7w$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_b99riq$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_b99riq$;
                                this.$abstract_b99riq$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_n08r3w$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_n08r3w$, dictionaryTypeP)) {
                                if (this.$dictionaryType_n08r3w$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_n08r3w$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_n08r3w$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_n08r3w$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_n08r3w$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        provided: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._provided.values());
                            },
                            set: function (providedP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (providedP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_provided(providedP, true, true);
                            }
                        },
                        internal_provided: function (providedP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._provided.values(), providedP)) {
                                var kmf_previousVal = this._provided;
                                this._provided.clear();
                                {
                                    var tmp$0 = providedP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._provided.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_provided, el), _.org.kevoree.util.Constants.Ref_provided);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, kmf_previousVal));
                                }
                            }
                        },
                        doAddProvided: function (providedP) {
                            var _key_ = (providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._provided.containsKey_za3rmp$(_key_)) {
                                this._provided.put_wn2jw4$(_key_, providedP);
                                (providedP != null ? providedP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_provided, providedP), _.org.kevoree.util.Constants.Ref_provided);
                                (providedP != null ? providedP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                            }
                        },
                        addProvided: function (providedP) {
                            this.internal_addProvided(providedP, true, true);
                        },
                        addAllProvided: function (providedP) {
                            this.internal_addAllProvided(providedP, true, true);
                        },
                        internal_addProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddProvided(providedP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, null));
                            }
                        },
                        internal_addAllProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = providedP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddProvided(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = providedP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddProvided(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, null));
                            }
                        },
                        removeProvided: function (providedP) {
                            this.internal_removeProvided(providedP, true, true);
                        },
                        removeAllProvided: function () {
                            this.internal_removeAllProvided(true, true);
                        },
                        internal_removeProvided: function (providedP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._provided.size() !== 0 && this._provided.containsKey_za3rmp$((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = providedP.path();
                                this._provided.remove_za3rmp$((providedP != null ? providedP : Kotlin.throwNPE()).internalGetKey());
                                (providedP != null ? providedP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_provided);
                                ((providedP != null ? providedP : Kotlin.throwNPE()) != null ? providedP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllProvidedCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, providedP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllProvided: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllProvidedCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.provided) != null ? tmp$0 : Kotlin.throwNPE();
                            this._provided.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_provided, temp_els, null));
                                this.removeAllProvidedCurrentlyProcessing = false;
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_szgj13$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_szgj13$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_szgj13$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_szgj13$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_szgj13$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        required: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._required.values());
                            },
                            set: function (requiredP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (requiredP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_required(requiredP, true, true);
                            }
                        },
                        internal_required: function (requiredP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._required.values(), requiredP)) {
                                var kmf_previousVal = this._required;
                                this._required.clear();
                                {
                                    var tmp$0 = requiredP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._required.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_required, el), _.org.kevoree.util.Constants.Ref_required);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, kmf_previousVal));
                                }
                            }
                        },
                        doAddRequired: function (requiredP) {
                            var _key_ = (requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._required.containsKey_za3rmp$(_key_)) {
                                this._required.put_wn2jw4$(_key_, requiredP);
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_required, requiredP), _.org.kevoree.util.Constants.Ref_required);
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                            }
                        },
                        addRequired: function (requiredP) {
                            this.internal_addRequired(requiredP, true, true);
                        },
                        addAllRequired: function (requiredP) {
                            this.internal_addAllRequired(requiredP, true, true);
                        },
                        internal_addRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddRequired(requiredP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, null));
                            }
                        },
                        internal_addAllRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = requiredP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddRequired(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = requiredP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddRequired(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, null));
                            }
                        },
                        removeRequired: function (requiredP) {
                            this.internal_removeRequired(requiredP, true, true);
                        },
                        removeAllRequired: function () {
                            this.internal_removeAllRequired(true, true);
                        },
                        internal_removeRequired: function (requiredP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._required.size() !== 0 && this._required.containsKey_za3rmp$((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = requiredP.path();
                                this._required.remove_za3rmp$((requiredP != null ? requiredP : Kotlin.throwNPE()).internalGetKey());
                                (requiredP != null ? requiredP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_required);
                                ((requiredP != null ? requiredP : Kotlin.throwNPE()) != null ? requiredP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllRequiredCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, requiredP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllRequired: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllRequiredCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.required) != null ? tmp$0 : Kotlin.throwNPE();
                            this._required.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_required, temp_els, null));
                                this.removeAllRequiredCurrentlyProcessing = false;
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_required) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeRequired(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllRequired();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._required.size() !== 0 && this._required.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._required.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._required.remove_za3rmp$(value);
                                        this._required.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_provided) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeProvided(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllProvided();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._provided.size() !== 0 && this._provided.containsKey_za3rmp$(value)) {
                                        var obj_1 = this._provided.get_za3rmp$(value);
                                        var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_1 == null) {
                                            throw new Error('Key newed to null ' + obj_1);
                                        }
                                        this._provided.remove_za3rmp$(value);
                                        this._provided.put_wn2jw4$(objNewKey_1, obj_1);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findRequiredByID: function (key) {
                            return this._required.get_za3rmp$(key);
                        },
                        findProvidedByID: function (key) {
                            return this._provided.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_required) {
                                return this.findRequiredByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_provided) {
                                return this.findProvidedByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_required, _.org.kevoree.util.Constants.org_kevoree_PortTypeRef);
                                {
                                    var tmp$0 = this._required.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._required.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_required);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_required);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_provided, _.org.kevoree.util.Constants.org_kevoree_PortTypeRef);
                                {
                                    var tmp$1 = this._provided.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._provided.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_provided);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_provided);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$2 = this._superTypes.keySet().iterator();
                                    while (tmp$2.hasNext()) {
                                        var KMFLoopEntryKey_1 = tmp$2.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ComponentType;
                        }
                    }),
                    ContainerNodeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ContainerNode, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_ff71em$ = null;
                        this.$internal_containmentRefName_5lz5gu$ = null;
                        this.$internal_unsetCmd_537mr1$ = null;
                        this.$internal_readOnlyElem_pjij83$ = false;
                        this.$internal_recursive_readOnlyElem_mlmdhc$ = false;
                        this.$internal_inboundReferences_ywu8v3$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_50jgan$ = false;
                        this.$internal_modelElementListeners_p0q5cm$ = null;
                        this.$internal_modelTreeListeners_3oq7ru$ = null;
                        this.$path_cache_ixfdyg$ = null;
                        this.$key_cache_mxha8y$ = null;
                        this.$name_fcvh8r$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$metaData_nydk9b$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$started_k1o3r5$ = true;
                        this.$host_fcrxuw$ = null;
                        this._fragmentDictionary = new Kotlin.PrimitiveHashMap();
                        this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                        this._hosts = new Kotlin.PrimitiveHashMap();
                        this.$typeDefinition_ydov9v$ = null;
                        this._components = new Kotlin.PrimitiveHashMap();
                        this.removeAllComponentsCurrentlyProcessing = false;
                        this.$dictionary_72qk9i$ = null;
                        this._networkInformation = new Kotlin.PrimitiveHashMap();
                        this.removeAllNetworkInformationCurrentlyProcessing = false;
                        this._groups = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.ContainerNodeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_ff71em$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_ff71em$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_5lz5gu$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_5lz5gu$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_537mr1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_537mr1$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_pjij83$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_pjij83$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_mlmdhc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_mlmdhc$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_ywu8v3$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_ywu8v3$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_50jgan$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_50jgan$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_p0q5cm$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_p0q5cm$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_3oq7ru$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_3oq7ru$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_ixfdyg$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_ixfdyg$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_mxha8y$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_mxha8y$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.typeDefinition != null) {
                                var tmp$0;
                                (((tmp$0 = this.typeDefinition) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                this.typeDefinition = null;
                            }
                            if (this.dictionary != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionary) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                this.dictionary = null;
                            }
                            var tmp$2, tmp$4, tmp$7;
                            {
                                var tmp$3 = ((tmp$2 = this.fragmentDictionary) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            {
                                var tmp$5 = ((tmp$4 = this.components) != null ? tmp$4 : Kotlin.throwNPE()).iterator();
                                while (tmp$5.hasNext()) {
                                    var el_0 = tmp$5.next();
                                    el_0.delete();
                                }
                            }
                            this.removeAllHosts();
                            if (this.host != null) {
                                var tmp$6;
                                (((tmp$6 = this.host) != null ? tmp$6 : Kotlin.throwNPE()) != null ? tmp$6 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_host);
                                this.host = null;
                            }
                            this.removeAllGroups();
                            {
                                var tmp$8 = ((tmp$7 = this.networkInformation) != null ? tmp$7 : Kotlin.throwNPE()).iterator();
                                while (tmp$8.hasNext()) {
                                    var el_1 = tmp$8.next();
                                    el_1.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$9;
                                ((tmp$9 = this.internal_unsetCmd) != null ? tmp$9 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_fcvh8r$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_fcvh8r$;
                                this.$name_fcvh8r$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        metaData: {
                            get: function () {
                                return this.$metaData_nydk9b$;
                            },
                            set: function (iP) {
                                this.internal_metaData(iP, true);
                            }
                        },
                        internal_metaData: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.metaData)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$metaData_nydk9b$;
                                this.$metaData_nydk9b$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_metaData, this.metaData, kmf_previousVal));
                                }
                            }
                        },
                        started: {
                            get: function () {
                                return this.$started_k1o3r5$;
                            },
                            set: function (iP) {
                                this.internal_started(iP, true);
                            }
                        },
                        internal_started: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.started)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$started_k1o3r5$;
                                this.$started_k1o3r5$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_started, this.started, kmf_previousVal));
                                }
                            }
                        },
                        host: {
                            get: function () {
                                return this.$host_fcrxuw$;
                            },
                            set: function (hostP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_host(hostP, true, true);
                            }
                        },
                        internal_host: function (hostP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$host_fcrxuw$, hostP)) {
                                if (setOpposite) {
                                    if (this.$host_fcrxuw$ != null) {
                                        var tmp$0;
                                        ((tmp$0 = this.$host_fcrxuw$) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_hosts, this, false, fireEvents);
                                    }
                                    if (hostP != null) {
                                        hostP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_hosts, this, false, fireEvents);
                                    }
                                }
                                var kmf_previousVal = this.$host_fcrxuw$;
                                if (hostP != null) {
                                    ((hostP != null ? hostP : Kotlin.throwNPE()) != null ? hostP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_host);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$host_fcrxuw$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_host);
                                }
                                this.$host_fcrxuw$ = hostP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_host, hostP, kmf_previousVal));
                                }
                            }
                        },
                        fragmentDictionary: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._fragmentDictionary.values());
                            },
                            set: function (fragmentDictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (fragmentDictionaryP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_fragmentDictionary(fragmentDictionaryP, true, true);
                            }
                        },
                        internal_fragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._fragmentDictionary.values(), fragmentDictionaryP)) {
                                var kmf_previousVal = this._fragmentDictionary;
                                this._fragmentDictionary.clear();
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._fragmentDictionary.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, el), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFragmentDictionary: function (fragmentDictionaryP) {
                            var _key_ = (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._fragmentDictionary.containsKey_za3rmp$(_key_)) {
                                this._fragmentDictionary.put_wn2jw4$(_key_, fragmentDictionaryP);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                        },
                        addFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        addAllFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addAllFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        internal_addFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFragmentDictionary(fragmentDictionaryP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        internal_addAllFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFragmentDictionary(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = fragmentDictionaryP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFragmentDictionary(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        removeFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_removeFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        removeAllFragmentDictionary: function () {
                            this.internal_removeAllFragmentDictionary(true, true);
                        },
                        internal_removeFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = fragmentDictionaryP.path();
                                this._fragmentDictionary.remove_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey());
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                ((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()) != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllFragmentDictionaryCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFragmentDictionary: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllFragmentDictionaryCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.fragmentDictionary) != null ? tmp$0 : Kotlin.throwNPE();
                            this._fragmentDictionary.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, temp_els, null));
                                this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                            }
                        },
                        hosts: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._hosts.values());
                            },
                            set: function (hostsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (hostsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_hosts(hostsP, true, true);
                            }
                        },
                        internal_hosts: function (hostsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._hosts.values(), hostsP)) {
                                var kmf_previousVal = this._hosts;
                                this.internal_removeAllHosts(true, false);
                                {
                                    var tmp$0 = hostsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._hosts.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_hosts);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_host, this, false, fireEvents);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hosts, hostsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddHosts: function (hostsP) {
                            var _key_ = (hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._hosts.containsKey_za3rmp$(_key_)) {
                                this._hosts.put_wn2jw4$(_key_, hostsP);
                                (hostsP != null ? hostsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_hosts);
                            }
                        },
                        addHosts: function (hostsP) {
                            this.internal_addHosts(hostsP, true, true);
                        },
                        addAllHosts: function (hostsP) {
                            this.internal_addAllHosts(hostsP, true, true);
                        },
                        internal_addHosts: function (hostsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddHosts(hostsP);
                            if (setOpposite) {
                                (hostsP != null ? hostsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_host, this, false, fireEvents);
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hosts, hostsP, null));
                            }
                        },
                        internal_addAllHosts: function (hostsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = hostsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddHosts(el);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_host, this, false, fireEvents);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = hostsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddHosts(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hosts, hostsP, null));
                            }
                        },
                        removeHosts: function (hostsP) {
                            this.internal_removeHosts(hostsP, true, true);
                        },
                        removeAllHosts: function () {
                            this.internal_removeAllHosts(true, true);
                        },
                        internal_removeHosts: function (hostsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._hosts.size() !== 0 && this._hosts.containsKey_za3rmp$((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = hostsP.path();
                                this._hosts.remove_za3rmp$((hostsP != null ? hostsP : Kotlin.throwNPE()).internalGetKey());
                                (hostsP != null ? hostsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_hosts);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hosts, hostsP, previousPathToBeRemoved));
                                }
                                if (setOpposite) {
                                    (hostsP != null ? hostsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_host, null, false, fireEvents);
                                }
                            }
                        },
                        internal_removeAllHosts: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.hosts) != null ? tmp$0 : Kotlin.throwNPE();
                            if (setOpposite) {
                                {
                                    var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        (el != null ? el : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_hosts);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_host, null, false, fireEvents);
                                    }
                                }
                            }
                            this._hosts.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hosts, temp_els, null));
                            }
                        },
                        typeDefinition: {
                            get: function () {
                                return this.$typeDefinition_ydov9v$;
                            },
                            set: function (typeDefinitionP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_typeDefinition(typeDefinitionP, true, true);
                            }
                        },
                        internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$typeDefinition_ydov9v$, typeDefinitionP)) {
                                var kmf_previousVal = this.$typeDefinition_ydov9v$;
                                if (typeDefinitionP != null) {
                                    ((typeDefinitionP != null ? typeDefinitionP : Kotlin.throwNPE()) != null ? typeDefinitionP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$typeDefinition_ydov9v$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                this.$typeDefinition_ydov9v$ = typeDefinitionP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_typeDefinition, typeDefinitionP, kmf_previousVal));
                                }
                            }
                        },
                        components: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._components.values());
                            },
                            set: function (componentsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (componentsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_components(componentsP, true, true);
                            }
                        },
                        internal_components: function (componentsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._components.values(), componentsP)) {
                                var kmf_previousVal = this._components;
                                this._components.clear();
                                {
                                    var tmp$0 = componentsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._components.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_components);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_components, el), _.org.kevoree.util.Constants.Ref_components);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_components, componentsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddComponents: function (componentsP) {
                            var _key_ = (componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._components.containsKey_za3rmp$(_key_)) {
                                this._components.put_wn2jw4$(_key_, componentsP);
                                (componentsP != null ? componentsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_components, componentsP), _.org.kevoree.util.Constants.Ref_components);
                                (componentsP != null ? componentsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_components);
                            }
                        },
                        addComponents: function (componentsP) {
                            this.internal_addComponents(componentsP, true, true);
                        },
                        addAllComponents: function (componentsP) {
                            this.internal_addAllComponents(componentsP, true, true);
                        },
                        internal_addComponents: function (componentsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddComponents(componentsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_components, componentsP, null));
                            }
                        },
                        internal_addAllComponents: function (componentsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = componentsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddComponents(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = componentsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddComponents(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_components, componentsP, null));
                            }
                        },
                        removeComponents: function (componentsP) {
                            this.internal_removeComponents(componentsP, true, true);
                        },
                        removeAllComponents: function () {
                            this.internal_removeAllComponents(true, true);
                        },
                        internal_removeComponents: function (componentsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._components.size() !== 0 && this._components.containsKey_za3rmp$((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = componentsP.path();
                                this._components.remove_za3rmp$((componentsP != null ? componentsP : Kotlin.throwNPE()).internalGetKey());
                                (componentsP != null ? componentsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_components);
                                ((componentsP != null ? componentsP : Kotlin.throwNPE()) != null ? componentsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllComponentsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_components, componentsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllComponents: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllComponentsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.components) != null ? tmp$0 : Kotlin.throwNPE();
                            this._components.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_components, temp_els, null));
                                this.removeAllComponentsCurrentlyProcessing = false;
                            }
                        },
                        dictionary: {
                            get: function () {
                                return this.$dictionary_72qk9i$;
                            },
                            set: function (dictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionary(dictionaryP, true, true);
                            }
                        },
                        internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionary_72qk9i$, dictionaryP)) {
                                if (this.$dictionary_72qk9i$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionary_72qk9i$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryP != null) {
                                    (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                var kmf_previousVal = this.$dictionary_72qk9i$;
                                if (dictionaryP != null) {
                                    ((dictionaryP != null ? dictionaryP : Kotlin.throwNPE()) != null ? dictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionary_72qk9i$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                this.$dictionary_72qk9i$ = dictionaryP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionary, dictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        networkInformation: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._networkInformation.values());
                            },
                            set: function (networkInformationP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (networkInformationP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_networkInformation(networkInformationP, true, true);
                            }
                        },
                        internal_networkInformation: function (networkInformationP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._networkInformation.values(), networkInformationP)) {
                                var kmf_previousVal = this._networkInformation;
                                this._networkInformation.clear();
                                {
                                    var tmp$0 = networkInformationP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._networkInformation.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_networkInformation);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_networkInformation, el), _.org.kevoree.util.Constants.Ref_networkInformation);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkInformation, networkInformationP, kmf_previousVal));
                                }
                            }
                        },
                        doAddNetworkInformation: function (networkInformationP) {
                            var _key_ = (networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._networkInformation.containsKey_za3rmp$(_key_)) {
                                this._networkInformation.put_wn2jw4$(_key_, networkInformationP);
                                (networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_networkInformation, networkInformationP), _.org.kevoree.util.Constants.Ref_networkInformation);
                                (networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_networkInformation);
                            }
                        },
                        addNetworkInformation: function (networkInformationP) {
                            this.internal_addNetworkInformation(networkInformationP, true, true);
                        },
                        addAllNetworkInformation: function (networkInformationP) {
                            this.internal_addAllNetworkInformation(networkInformationP, true, true);
                        },
                        internal_addNetworkInformation: function (networkInformationP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddNetworkInformation(networkInformationP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkInformation, networkInformationP, null));
                            }
                        },
                        internal_addAllNetworkInformation: function (networkInformationP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = networkInformationP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddNetworkInformation(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = networkInformationP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddNetworkInformation(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkInformation, networkInformationP, null));
                            }
                        },
                        removeNetworkInformation: function (networkInformationP) {
                            this.internal_removeNetworkInformation(networkInformationP, true, true);
                        },
                        removeAllNetworkInformation: function () {
                            this.internal_removeAllNetworkInformation(true, true);
                        },
                        internal_removeNetworkInformation: function (networkInformationP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._networkInformation.size() !== 0 && this._networkInformation.containsKey_za3rmp$((networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = networkInformationP.path();
                                this._networkInformation.remove_za3rmp$((networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).internalGetKey());
                                (networkInformationP != null ? networkInformationP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_networkInformation);
                                ((networkInformationP != null ? networkInformationP : Kotlin.throwNPE()) != null ? networkInformationP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllNetworkInformationCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkInformation, networkInformationP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllNetworkInformation: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllNetworkInformationCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.networkInformation) != null ? tmp$0 : Kotlin.throwNPE();
                            this._networkInformation.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkInformation, temp_els, null));
                                this.removeAllNetworkInformationCurrentlyProcessing = false;
                            }
                        },
                        groups: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._groups.values());
                            },
                            set: function (groupsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (groupsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_groups(groupsP, true, true);
                            }
                        },
                        internal_groups: function (groupsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._groups.values(), groupsP)) {
                                var kmf_previousVal = this._groups;
                                this.internal_removeAllGroups(true, false);
                                {
                                    var tmp$0 = groupsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._groups.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_subNodes, this, false, fireEvents);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_groups, groupsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddGroups: function (groupsP) {
                            var _key_ = (groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._groups.containsKey_za3rmp$(_key_)) {
                                this._groups.put_wn2jw4$(_key_, groupsP);
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                            }
                        },
                        addGroups: function (groupsP) {
                            this.internal_addGroups(groupsP, true, true);
                        },
                        addAllGroups: function (groupsP) {
                            this.internal_addAllGroups(groupsP, true, true);
                        },
                        internal_addGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddGroups(groupsP);
                            if (setOpposite) {
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_subNodes, this, false, fireEvents);
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_groups, groupsP, null));
                            }
                        },
                        internal_addAllGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = groupsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddGroups(el);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_subNodes, this, false, fireEvents);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = groupsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddGroups(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_groups, groupsP, null));
                            }
                        },
                        removeGroups: function (groupsP) {
                            this.internal_removeGroups(groupsP, true, true);
                        },
                        removeAllGroups: function () {
                            this.internal_removeAllGroups(true, true);
                        },
                        internal_removeGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._groups.size() !== 0 && this._groups.containsKey_za3rmp$((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = groupsP.path();
                                this._groups.remove_za3rmp$((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey());
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_groups, groupsP, previousPathToBeRemoved));
                                }
                                if (setOpposite) {
                                    (groupsP != null ? groupsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_subNodes, this, false, fireEvents);
                                }
                            }
                        },
                        internal_removeAllGroups: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.groups) != null ? tmp$0 : Kotlin.throwNPE();
                            if (setOpposite) {
                                {
                                    var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        (el != null ? el : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_subNodes, this, false, fireEvents);
                                    }
                                }
                            }
                            this._groups.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_groups, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_metaData) {
                                this.internal_metaData(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_started) {
                                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_typeDefinition(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionary(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFragmentDictionary();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$(value)) {
                                        var obj = this._fragmentDictionary.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._fragmentDictionary.remove_za3rmp$(value);
                                        this._fragmentDictionary.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_components) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeComponents(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllComponents();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._components.size() !== 0 && this._components.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._components.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._components.remove_za3rmp$(value);
                                        this._components.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_hosts) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeHosts(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.internal_removeAllHosts(setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._hosts.size() !== 0 && this._hosts.containsKey_za3rmp$(value)) {
                                        var obj_1 = this._hosts.get_za3rmp$(value);
                                        var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_1 == null) {
                                            throw new Error('Key newed to null ' + obj_1);
                                        }
                                        this._hosts.remove_za3rmp$(value);
                                        this._hosts.put_wn2jw4$(objNewKey_1, obj_1);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_host) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_host(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_host(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_host(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_groups) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.internal_removeAllGroups(setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._groups.size() !== 0 && this._groups.containsKey_za3rmp$(value)) {
                                        var obj_2 = this._groups.get_za3rmp$(value);
                                        var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_2 == null) {
                                            throw new Error('Key newed to null ' + obj_2);
                                        }
                                        this._groups.remove_za3rmp$(value);
                                        this._groups.put_wn2jw4$(objNewKey_2, obj_2);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_networkInformation) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addNetworkInformation(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllNetworkInformation(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeNetworkInformation(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllNetworkInformation();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._networkInformation.size() !== 0 && this._networkInformation.containsKey_za3rmp$(value)) {
                                        var obj_3 = this._networkInformation.get_za3rmp$(value);
                                        var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_3 == null) {
                                            throw new Error('Key newed to null ' + obj_3);
                                        }
                                        this._networkInformation.remove_za3rmp$(value);
                                        this._networkInformation.put_wn2jw4$(objNewKey_3, obj_3);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findFragmentDictionaryByID: function (key) {
                            return this._fragmentDictionary.get_za3rmp$(key);
                        },
                        findComponentsByID: function (key) {
                            return this._components.get_za3rmp$(key);
                        },
                        findHostsByID: function (key) {
                            return this._hosts.get_za3rmp$(key);
                        },
                        findGroupsByID: function (key) {
                            return this._groups.get_za3rmp$(key);
                        },
                        findNetworkInformationByID: function (key) {
                            return this._networkInformation.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                var objFound = this.typeDefinition;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                var objFound_0 = this.dictionary;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                return this.findFragmentDictionaryByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_components) {
                                return this.findComponentsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_hosts) {
                                return this.findHostsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_host) {
                                var objFound_1 = this.host;
                                if (objFound_1 != null && Kotlin.equals((objFound_1 != null ? objFound_1 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_1;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_groups) {
                                return this.findGroupsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_networkInformation) {
                                return this.findNetworkInformationByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionary, _.org.kevoree.util.Constants.org_kevoree_Dictionary);
                                this.internal_visit(visitor, this.dictionary, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary, _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary);
                                {
                                    var tmp$0 = this._fragmentDictionary.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._fragmentDictionary.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_components, _.org.kevoree.util.Constants.org_kevoree_ComponentInstance);
                                {
                                    var tmp$1 = this._components.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._components.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_components);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_components);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_networkInformation, _.org.kevoree.util.Constants.org_kevoree_NetworkInfo);
                                {
                                    var tmp$2 = this._networkInformation.keySet().iterator();
                                    while (tmp$2.hasNext()) {
                                        var KMFLoopEntryKey_1 = tmp$2.next();
                                        this.internal_visit(visitor, this._networkInformation.get_za3rmp$(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_networkInformation);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_networkInformation);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                this.internal_visit(visitor, this.typeDefinition, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_hosts, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                {
                                    var tmp$3 = this._hosts.keySet().iterator();
                                    while (tmp$3.hasNext()) {
                                        var KMFLoopEntryKey_2 = tmp$3.next();
                                        this.internal_visit(visitor, this._hosts.get_za3rmp$(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_hosts);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_hosts);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_host, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                this.internal_visit(visitor, this.host, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_host);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_host);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_groups, _.org.kevoree.util.Constants.org_kevoree_Group);
                                {
                                    var tmp$4 = this._groups.keySet().iterator();
                                    while (tmp$4.hasNext()) {
                                        var KMFLoopEntryKey_3 = tmp$4.next();
                                        this.internal_visit(visitor, this._groups.get_za3rmp$(KMFLoopEntryKey_3), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_groups);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_groups);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.started, _.org.kevoree.util.Constants.Att_started, this);
                            visitor.visit(this.metaData, _.org.kevoree.util.Constants.Att_metaData, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ContainerNode;
                        }
                    }),
                    ContainerRootImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ContainerRoot, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_dv9q2q$ = null;
                        this.$internal_containmentRefName_7fk4aa$ = null;
                        this.$internal_unsetCmd_9fvvn7$ = null;
                        this.$internal_readOnlyElem_5emnqr$ = false;
                        this.$internal_recursive_readOnlyElem_qqvtb4$ = false;
                        this.$internal_inboundReferences_yhoz9b$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_7ajevz$ = false;
                        this.$internal_modelElementListeners_vka3d6$ = null;
                        this.$internal_modelTreeListeners_9ct1za$ = null;
                        this.$path_cache_bkt1u0$ = null;
                        this.$key_cache_ozfj7m$ = null;
                        this.$generated_KMF_ID_vwh4di$ = '' + Math.random() + (new Date()).getTime();
                        this._libraries = new Kotlin.PrimitiveHashMap();
                        this.removeAllLibrariesCurrentlyProcessing = false;
                        this._mBindings = new Kotlin.PrimitiveHashMap();
                        this.removeAllMBindingsCurrentlyProcessing = false;
                        this._repositories = new Kotlin.PrimitiveHashMap();
                        this.removeAllRepositoriesCurrentlyProcessing = false;
                        this._nodeNetworks = new Kotlin.PrimitiveHashMap();
                        this.removeAllNodeNetworksCurrentlyProcessing = false;
                        this._typeDefinitions = new Kotlin.PrimitiveHashMap();
                        this.removeAllTypeDefinitionsCurrentlyProcessing = false;
                        this._nodes = new Kotlin.PrimitiveHashMap();
                        this.removeAllNodesCurrentlyProcessing = false;
                        this._dataTypes = new Kotlin.PrimitiveHashMap();
                        this.removeAllDataTypesCurrentlyProcessing = false;
                        this._deployUnits = new Kotlin.PrimitiveHashMap();
                        this.removeAllDeployUnitsCurrentlyProcessing = false;
                        this._groups = new Kotlin.PrimitiveHashMap();
                        this.removeAllGroupsCurrentlyProcessing = false;
                        this._hubs = new Kotlin.PrimitiveHashMap();
                        this.removeAllHubsCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.ContainerRootImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_dv9q2q$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_dv9q2q$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_7fk4aa$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_7fk4aa$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_9fvvn7$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_9fvvn7$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_5emnqr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_5emnqr$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_qqvtb4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_qqvtb4$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_yhoz9b$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_yhoz9b$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_7ajevz$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_7ajevz$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_vka3d6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_vka3d6$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_9ct1za$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_9ct1za$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_bkt1u0$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_bkt1u0$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_ozfj7m$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_ozfj7m$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0, tmp$2, tmp$4, tmp$6, tmp$8, tmp$10, tmp$12, tmp$14, tmp$16, tmp$18;
                            {
                                var tmp$1 = ((tmp$0 = this.nodes) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            {
                                var tmp$3 = ((tmp$2 = this.typeDefinitions) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el_0 = tmp$3.next();
                                    el_0.delete();
                                }
                            }
                            {
                                var tmp$5 = ((tmp$4 = this.repositories) != null ? tmp$4 : Kotlin.throwNPE()).iterator();
                                while (tmp$5.hasNext()) {
                                    var el_1 = tmp$5.next();
                                    el_1.delete();
                                }
                            }
                            {
                                var tmp$7 = ((tmp$6 = this.dataTypes) != null ? tmp$6 : Kotlin.throwNPE()).iterator();
                                while (tmp$7.hasNext()) {
                                    var el_2 = tmp$7.next();
                                    el_2.delete();
                                }
                            }
                            {
                                var tmp$9 = ((tmp$8 = this.libraries) != null ? tmp$8 : Kotlin.throwNPE()).iterator();
                                while (tmp$9.hasNext()) {
                                    var el_3 = tmp$9.next();
                                    el_3.delete();
                                }
                            }
                            {
                                var tmp$11 = ((tmp$10 = this.hubs) != null ? tmp$10 : Kotlin.throwNPE()).iterator();
                                while (tmp$11.hasNext()) {
                                    var el_4 = tmp$11.next();
                                    el_4.delete();
                                }
                            }
                            {
                                var tmp$13 = ((tmp$12 = this.mBindings) != null ? tmp$12 : Kotlin.throwNPE()).iterator();
                                while (tmp$13.hasNext()) {
                                    var el_5 = tmp$13.next();
                                    el_5.delete();
                                }
                            }
                            {
                                var tmp$15 = ((tmp$14 = this.deployUnits) != null ? tmp$14 : Kotlin.throwNPE()).iterator();
                                while (tmp$15.hasNext()) {
                                    var el_6 = tmp$15.next();
                                    el_6.delete();
                                }
                            }
                            {
                                var tmp$17 = ((tmp$16 = this.nodeNetworks) != null ? tmp$16 : Kotlin.throwNPE()).iterator();
                                while (tmp$17.hasNext()) {
                                    var el_7 = tmp$17.next();
                                    el_7.delete();
                                }
                            }
                            {
                                var tmp$19 = ((tmp$18 = this.groups) != null ? tmp$18 : Kotlin.throwNPE()).iterator();
                                while (tmp$19.hasNext()) {
                                    var el_8 = tmp$19.next();
                                    el_8.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$20;
                                ((tmp$20 = this.internal_unsetCmd) != null ? tmp$20 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_vwh4di$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_vwh4di$;
                                this.$generated_KMF_ID_vwh4di$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        libraries: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._libraries.values());
                            },
                            set: function (librariesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (librariesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_libraries(librariesP, true, true);
                            }
                        },
                        internal_libraries: function (librariesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._libraries.values(), librariesP)) {
                                var kmf_previousVal = this._libraries;
                                this._libraries.clear();
                                {
                                    var tmp$0 = librariesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._libraries.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_libraries);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_libraries, el), _.org.kevoree.util.Constants.Ref_libraries);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_libraries, librariesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddLibraries: function (librariesP) {
                            var _key_ = (librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._libraries.containsKey_za3rmp$(_key_)) {
                                this._libraries.put_wn2jw4$(_key_, librariesP);
                                (librariesP != null ? librariesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_libraries, librariesP), _.org.kevoree.util.Constants.Ref_libraries);
                                (librariesP != null ? librariesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_libraries);
                            }
                        },
                        addLibraries: function (librariesP) {
                            this.internal_addLibraries(librariesP, true, true);
                        },
                        addAllLibraries: function (librariesP) {
                            this.internal_addAllLibraries(librariesP, true, true);
                        },
                        internal_addLibraries: function (librariesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddLibraries(librariesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_libraries, librariesP, null));
                            }
                        },
                        internal_addAllLibraries: function (librariesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = librariesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddLibraries(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = librariesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddLibraries(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_libraries, librariesP, null));
                            }
                        },
                        removeLibraries: function (librariesP) {
                            this.internal_removeLibraries(librariesP, true, true);
                        },
                        removeAllLibraries: function () {
                            this.internal_removeAllLibraries(true, true);
                        },
                        internal_removeLibraries: function (librariesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._libraries.size() !== 0 && this._libraries.containsKey_za3rmp$((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = librariesP.path();
                                this._libraries.remove_za3rmp$((librariesP != null ? librariesP : Kotlin.throwNPE()).internalGetKey());
                                (librariesP != null ? librariesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_libraries);
                                ((librariesP != null ? librariesP : Kotlin.throwNPE()) != null ? librariesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllLibrariesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_libraries, librariesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllLibraries: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllLibrariesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.libraries) != null ? tmp$0 : Kotlin.throwNPE();
                            this._libraries.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_libraries, temp_els, null));
                                this.removeAllLibrariesCurrentlyProcessing = false;
                            }
                        },
                        mBindings: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._mBindings.values());
                            },
                            set: function (mBindingsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (mBindingsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_mBindings(mBindingsP, true, true);
                            }
                        },
                        internal_mBindings: function (mBindingsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._mBindings.values(), mBindingsP)) {
                                var kmf_previousVal = this._mBindings;
                                this._mBindings.clear();
                                {
                                    var tmp$0 = mBindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._mBindings.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_mBindings);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_mBindings, el), _.org.kevoree.util.Constants.Ref_mBindings);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mBindings, mBindingsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddMBindings: function (mBindingsP) {
                            var _key_ = (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._mBindings.containsKey_za3rmp$(_key_)) {
                                this._mBindings.put_wn2jw4$(_key_, mBindingsP);
                                (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_mBindings, mBindingsP), _.org.kevoree.util.Constants.Ref_mBindings);
                                (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_mBindings);
                            }
                        },
                        addMBindings: function (mBindingsP) {
                            this.internal_addMBindings(mBindingsP, true, true);
                        },
                        addAllMBindings: function (mBindingsP) {
                            this.internal_addAllMBindings(mBindingsP, true, true);
                        },
                        internal_addMBindings: function (mBindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddMBindings(mBindingsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mBindings, mBindingsP, null));
                            }
                        },
                        internal_addAllMBindings: function (mBindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = mBindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddMBindings(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = mBindingsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddMBindings(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mBindings, mBindingsP, null));
                            }
                        },
                        removeMBindings: function (mBindingsP) {
                            this.internal_removeMBindings(mBindingsP, true, true);
                        },
                        removeAllMBindings: function () {
                            this.internal_removeAllMBindings(true, true);
                        },
                        internal_removeMBindings: function (mBindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._mBindings.size() !== 0 && this._mBindings.containsKey_za3rmp$((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = mBindingsP.path();
                                this._mBindings.remove_za3rmp$((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).internalGetKey());
                                (mBindingsP != null ? mBindingsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_mBindings);
                                ((mBindingsP != null ? mBindingsP : Kotlin.throwNPE()) != null ? mBindingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllMBindingsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mBindings, mBindingsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllMBindings: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllMBindingsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.mBindings) != null ? tmp$0 : Kotlin.throwNPE();
                            this._mBindings.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mBindings, temp_els, null));
                                this.removeAllMBindingsCurrentlyProcessing = false;
                            }
                        },
                        repositories: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._repositories.values());
                            },
                            set: function (repositoriesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (repositoriesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_repositories(repositoriesP, true, true);
                            }
                        },
                        internal_repositories: function (repositoriesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._repositories.values(), repositoriesP)) {
                                var kmf_previousVal = this._repositories;
                                this._repositories.clear();
                                {
                                    var tmp$0 = repositoriesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._repositories.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_repositories);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_repositories, el), _.org.kevoree.util.Constants.Ref_repositories);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_repositories, repositoriesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddRepositories: function (repositoriesP) {
                            var _key_ = (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._repositories.containsKey_za3rmp$(_key_)) {
                                this._repositories.put_wn2jw4$(_key_, repositoriesP);
                                (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_repositories, repositoriesP), _.org.kevoree.util.Constants.Ref_repositories);
                                (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_repositories);
                            }
                        },
                        addRepositories: function (repositoriesP) {
                            this.internal_addRepositories(repositoriesP, true, true);
                        },
                        addAllRepositories: function (repositoriesP) {
                            this.internal_addAllRepositories(repositoriesP, true, true);
                        },
                        internal_addRepositories: function (repositoriesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddRepositories(repositoriesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_repositories, repositoriesP, null));
                            }
                        },
                        internal_addAllRepositories: function (repositoriesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = repositoriesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddRepositories(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = repositoriesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddRepositories(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_repositories, repositoriesP, null));
                            }
                        },
                        removeRepositories: function (repositoriesP) {
                            this.internal_removeRepositories(repositoriesP, true, true);
                        },
                        removeAllRepositories: function () {
                            this.internal_removeAllRepositories(true, true);
                        },
                        internal_removeRepositories: function (repositoriesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._repositories.size() !== 0 && this._repositories.containsKey_za3rmp$((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = repositoriesP.path();
                                this._repositories.remove_za3rmp$((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).internalGetKey());
                                (repositoriesP != null ? repositoriesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_repositories);
                                ((repositoriesP != null ? repositoriesP : Kotlin.throwNPE()) != null ? repositoriesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllRepositoriesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_repositories, repositoriesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllRepositories: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllRepositoriesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.repositories) != null ? tmp$0 : Kotlin.throwNPE();
                            this._repositories.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_repositories, temp_els, null));
                                this.removeAllRepositoriesCurrentlyProcessing = false;
                            }
                        },
                        nodeNetworks: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._nodeNetworks.values());
                            },
                            set: function (nodeNetworksP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (nodeNetworksP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_nodeNetworks(nodeNetworksP, true, true);
                            }
                        },
                        internal_nodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._nodeNetworks.values(), nodeNetworksP)) {
                                var kmf_previousVal = this._nodeNetworks;
                                this._nodeNetworks.clear();
                                {
                                    var tmp$0 = nodeNetworksP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._nodeNetworks.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_nodeNetworks);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_nodeNetworks, el), _.org.kevoree.util.Constants.Ref_nodeNetworks);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodeNetworks, nodeNetworksP, kmf_previousVal));
                                }
                            }
                        },
                        doAddNodeNetworks: function (nodeNetworksP) {
                            var _key_ = (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._nodeNetworks.containsKey_za3rmp$(_key_)) {
                                this._nodeNetworks.put_wn2jw4$(_key_, nodeNetworksP);
                                (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_nodeNetworks, nodeNetworksP), _.org.kevoree.util.Constants.Ref_nodeNetworks);
                                (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_nodeNetworks);
                            }
                        },
                        addNodeNetworks: function (nodeNetworksP) {
                            this.internal_addNodeNetworks(nodeNetworksP, true, true);
                        },
                        addAllNodeNetworks: function (nodeNetworksP) {
                            this.internal_addAllNodeNetworks(nodeNetworksP, true, true);
                        },
                        internal_addNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddNodeNetworks(nodeNetworksP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodeNetworks, nodeNetworksP, null));
                            }
                        },
                        internal_addAllNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = nodeNetworksP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddNodeNetworks(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = nodeNetworksP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddNodeNetworks(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodeNetworks, nodeNetworksP, null));
                            }
                        },
                        removeNodeNetworks: function (nodeNetworksP) {
                            this.internal_removeNodeNetworks(nodeNetworksP, true, true);
                        },
                        removeAllNodeNetworks: function () {
                            this.internal_removeAllNodeNetworks(true, true);
                        },
                        internal_removeNodeNetworks: function (nodeNetworksP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._nodeNetworks.size() !== 0 && this._nodeNetworks.containsKey_za3rmp$((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = nodeNetworksP.path();
                                this._nodeNetworks.remove_za3rmp$((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).internalGetKey());
                                (nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_nodeNetworks);
                                ((nodeNetworksP != null ? nodeNetworksP : Kotlin.throwNPE()) != null ? nodeNetworksP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllNodeNetworksCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodeNetworks, nodeNetworksP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllNodeNetworks: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllNodeNetworksCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.nodeNetworks) != null ? tmp$0 : Kotlin.throwNPE();
                            this._nodeNetworks.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodeNetworks, temp_els, null));
                                this.removeAllNodeNetworksCurrentlyProcessing = false;
                            }
                        },
                        typeDefinitions: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._typeDefinitions.values());
                            },
                            set: function (typeDefinitionsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (typeDefinitionsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_typeDefinitions(typeDefinitionsP, true, true);
                            }
                        },
                        internal_typeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._typeDefinitions.values(), typeDefinitionsP)) {
                                var kmf_previousVal = this._typeDefinitions;
                                this._typeDefinitions.clear();
                                {
                                    var tmp$0 = typeDefinitionsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._typeDefinitions.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinitions);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_typeDefinitions, el), _.org.kevoree.util.Constants.Ref_typeDefinitions);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_typeDefinitions, typeDefinitionsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddTypeDefinitions: function (typeDefinitionsP) {
                            var _key_ = (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._typeDefinitions.containsKey_za3rmp$(_key_)) {
                                this._typeDefinitions.put_wn2jw4$(_key_, typeDefinitionsP);
                                (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_typeDefinitions, typeDefinitionsP), _.org.kevoree.util.Constants.Ref_typeDefinitions);
                                (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinitions);
                            }
                        },
                        addTypeDefinitions: function (typeDefinitionsP) {
                            this.internal_addTypeDefinitions(typeDefinitionsP, true, true);
                        },
                        addAllTypeDefinitions: function (typeDefinitionsP) {
                            this.internal_addAllTypeDefinitions(typeDefinitionsP, true, true);
                        },
                        internal_addTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddTypeDefinitions(typeDefinitionsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_typeDefinitions, typeDefinitionsP, null));
                            }
                        },
                        internal_addAllTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = typeDefinitionsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddTypeDefinitions(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = typeDefinitionsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddTypeDefinitions(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_typeDefinitions, typeDefinitionsP, null));
                            }
                        },
                        removeTypeDefinitions: function (typeDefinitionsP) {
                            this.internal_removeTypeDefinitions(typeDefinitionsP, true, true);
                        },
                        removeAllTypeDefinitions: function () {
                            this.internal_removeAllTypeDefinitions(true, true);
                        },
                        internal_removeTypeDefinitions: function (typeDefinitionsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._typeDefinitions.size() !== 0 && this._typeDefinitions.containsKey_za3rmp$((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = typeDefinitionsP.path();
                                this._typeDefinitions.remove_za3rmp$((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).internalGetKey());
                                (typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinitions);
                                ((typeDefinitionsP != null ? typeDefinitionsP : Kotlin.throwNPE()) != null ? typeDefinitionsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllTypeDefinitionsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_typeDefinitions, typeDefinitionsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllTypeDefinitions: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllTypeDefinitionsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.typeDefinitions) != null ? tmp$0 : Kotlin.throwNPE();
                            this._typeDefinitions.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_typeDefinitions, temp_els, null));
                                this.removeAllTypeDefinitionsCurrentlyProcessing = false;
                            }
                        },
                        nodes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._nodes.values());
                            },
                            set: function (nodesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (nodesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_nodes(nodesP, true, true);
                            }
                        },
                        internal_nodes: function (nodesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._nodes.values(), nodesP)) {
                                var kmf_previousVal = this._nodes;
                                this._nodes.clear();
                                {
                                    var tmp$0 = nodesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._nodes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_nodes);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_nodes, el), _.org.kevoree.util.Constants.Ref_nodes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodes, nodesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddNodes: function (nodesP) {
                            var _key_ = (nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._nodes.containsKey_za3rmp$(_key_)) {
                                this._nodes.put_wn2jw4$(_key_, nodesP);
                                (nodesP != null ? nodesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_nodes, nodesP), _.org.kevoree.util.Constants.Ref_nodes);
                                (nodesP != null ? nodesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_nodes);
                            }
                        },
                        addNodes: function (nodesP) {
                            this.internal_addNodes(nodesP, true, true);
                        },
                        addAllNodes: function (nodesP) {
                            this.internal_addAllNodes(nodesP, true, true);
                        },
                        internal_addNodes: function (nodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddNodes(nodesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodes, nodesP, null));
                            }
                        },
                        internal_addAllNodes: function (nodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = nodesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddNodes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = nodesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddNodes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodes, nodesP, null));
                            }
                        },
                        removeNodes: function (nodesP) {
                            this.internal_removeNodes(nodesP, true, true);
                        },
                        removeAllNodes: function () {
                            this.internal_removeAllNodes(true, true);
                        },
                        internal_removeNodes: function (nodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._nodes.size() !== 0 && this._nodes.containsKey_za3rmp$((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = nodesP.path();
                                this._nodes.remove_za3rmp$((nodesP != null ? nodesP : Kotlin.throwNPE()).internalGetKey());
                                (nodesP != null ? nodesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_nodes);
                                ((nodesP != null ? nodesP : Kotlin.throwNPE()) != null ? nodesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllNodesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodes, nodesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllNodes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllNodesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.nodes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._nodes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_nodes, temp_els, null));
                                this.removeAllNodesCurrentlyProcessing = false;
                            }
                        },
                        dataTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._dataTypes.values());
                            },
                            set: function (dataTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (dataTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_dataTypes(dataTypesP, true, true);
                            }
                        },
                        internal_dataTypes: function (dataTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._dataTypes.values(), dataTypesP)) {
                                var kmf_previousVal = this._dataTypes;
                                this._dataTypes.clear();
                                {
                                    var tmp$0 = dataTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._dataTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dataTypes);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_dataTypes, el), _.org.kevoree.util.Constants.Ref_dataTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dataTypes, dataTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddDataTypes: function (dataTypesP) {
                            var _key_ = (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._dataTypes.containsKey_za3rmp$(_key_)) {
                                this._dataTypes.put_wn2jw4$(_key_, dataTypesP);
                                (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_dataTypes, dataTypesP), _.org.kevoree.util.Constants.Ref_dataTypes);
                                (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dataTypes);
                            }
                        },
                        addDataTypes: function (dataTypesP) {
                            this.internal_addDataTypes(dataTypesP, true, true);
                        },
                        addAllDataTypes: function (dataTypesP) {
                            this.internal_addAllDataTypes(dataTypesP, true, true);
                        },
                        internal_addDataTypes: function (dataTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddDataTypes(dataTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dataTypes, dataTypesP, null));
                            }
                        },
                        internal_addAllDataTypes: function (dataTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = dataTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddDataTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = dataTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddDataTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dataTypes, dataTypesP, null));
                            }
                        },
                        removeDataTypes: function (dataTypesP) {
                            this.internal_removeDataTypes(dataTypesP, true, true);
                        },
                        removeAllDataTypes: function () {
                            this.internal_removeAllDataTypes(true, true);
                        },
                        internal_removeDataTypes: function (dataTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._dataTypes.size() !== 0 && this._dataTypes.containsKey_za3rmp$((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = dataTypesP.path();
                                this._dataTypes.remove_za3rmp$((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).internalGetKey());
                                (dataTypesP != null ? dataTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dataTypes);
                                ((dataTypesP != null ? dataTypesP : Kotlin.throwNPE()) != null ? dataTypesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllDataTypesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dataTypes, dataTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllDataTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllDataTypesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.dataTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._dataTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dataTypes, temp_els, null));
                                this.removeAllDataTypesCurrentlyProcessing = false;
                            }
                        },
                        deployUnits: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._deployUnits.values());
                            },
                            set: function (deployUnitsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (deployUnitsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_deployUnits(deployUnitsP, true, true);
                            }
                        },
                        internal_deployUnits: function (deployUnitsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._deployUnits.values(), deployUnitsP)) {
                                var kmf_previousVal = this._deployUnits;
                                this._deployUnits.clear();
                                {
                                    var tmp$0 = deployUnitsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._deployUnits.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnits);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_deployUnits, el), _.org.kevoree.util.Constants.Ref_deployUnits);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_deployUnits, deployUnitsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddDeployUnits: function (deployUnitsP) {
                            var _key_ = (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._deployUnits.containsKey_za3rmp$(_key_)) {
                                this._deployUnits.put_wn2jw4$(_key_, deployUnitsP);
                                (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_deployUnits, deployUnitsP), _.org.kevoree.util.Constants.Ref_deployUnits);
                                (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnits);
                            }
                        },
                        addDeployUnits: function (deployUnitsP) {
                            this.internal_addDeployUnits(deployUnitsP, true, true);
                        },
                        addAllDeployUnits: function (deployUnitsP) {
                            this.internal_addAllDeployUnits(deployUnitsP, true, true);
                        },
                        internal_addDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddDeployUnits(deployUnitsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_deployUnits, deployUnitsP, null));
                            }
                        },
                        internal_addAllDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = deployUnitsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddDeployUnits(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = deployUnitsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddDeployUnits(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_deployUnits, deployUnitsP, null));
                            }
                        },
                        removeDeployUnits: function (deployUnitsP) {
                            this.internal_removeDeployUnits(deployUnitsP, true, true);
                        },
                        removeAllDeployUnits: function () {
                            this.internal_removeAllDeployUnits(true, true);
                        },
                        internal_removeDeployUnits: function (deployUnitsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._deployUnits.size() !== 0 && this._deployUnits.containsKey_za3rmp$((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = deployUnitsP.path();
                                this._deployUnits.remove_za3rmp$((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).internalGetKey());
                                (deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnits);
                                ((deployUnitsP != null ? deployUnitsP : Kotlin.throwNPE()) != null ? deployUnitsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllDeployUnitsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_deployUnits, deployUnitsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllDeployUnits: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllDeployUnitsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.deployUnits) != null ? tmp$0 : Kotlin.throwNPE();
                            this._deployUnits.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_deployUnits, temp_els, null));
                                this.removeAllDeployUnitsCurrentlyProcessing = false;
                            }
                        },
                        groups: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._groups.values());
                            },
                            set: function (groupsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (groupsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_groups(groupsP, true, true);
                            }
                        },
                        internal_groups: function (groupsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._groups.values(), groupsP)) {
                                var kmf_previousVal = this._groups;
                                this._groups.clear();
                                {
                                    var tmp$0 = groupsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._groups.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_groups, el), _.org.kevoree.util.Constants.Ref_groups);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_groups, groupsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddGroups: function (groupsP) {
                            var _key_ = (groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._groups.containsKey_za3rmp$(_key_)) {
                                this._groups.put_wn2jw4$(_key_, groupsP);
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_groups, groupsP), _.org.kevoree.util.Constants.Ref_groups);
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                            }
                        },
                        addGroups: function (groupsP) {
                            this.internal_addGroups(groupsP, true, true);
                        },
                        addAllGroups: function (groupsP) {
                            this.internal_addAllGroups(groupsP, true, true);
                        },
                        internal_addGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddGroups(groupsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_groups, groupsP, null));
                            }
                        },
                        internal_addAllGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = groupsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddGroups(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = groupsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddGroups(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_groups, groupsP, null));
                            }
                        },
                        removeGroups: function (groupsP) {
                            this.internal_removeGroups(groupsP, true, true);
                        },
                        removeAllGroups: function () {
                            this.internal_removeAllGroups(true, true);
                        },
                        internal_removeGroups: function (groupsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._groups.size() !== 0 && this._groups.containsKey_za3rmp$((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = groupsP.path();
                                this._groups.remove_za3rmp$((groupsP != null ? groupsP : Kotlin.throwNPE()).internalGetKey());
                                (groupsP != null ? groupsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_groups);
                                ((groupsP != null ? groupsP : Kotlin.throwNPE()) != null ? groupsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllGroupsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_groups, groupsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllGroups: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllGroupsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.groups) != null ? tmp$0 : Kotlin.throwNPE();
                            this._groups.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_groups, temp_els, null));
                                this.removeAllGroupsCurrentlyProcessing = false;
                            }
                        },
                        hubs: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._hubs.values());
                            },
                            set: function (hubsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (hubsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_hubs(hubsP, true, true);
                            }
                        },
                        internal_hubs: function (hubsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._hubs.values(), hubsP)) {
                                var kmf_previousVal = this._hubs;
                                this._hubs.clear();
                                {
                                    var tmp$0 = hubsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._hubs.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_hubs);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_hubs, el), _.org.kevoree.util.Constants.Ref_hubs);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_hubs, hubsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddHubs: function (hubsP) {
                            var _key_ = (hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._hubs.containsKey_za3rmp$(_key_)) {
                                this._hubs.put_wn2jw4$(_key_, hubsP);
                                (hubsP != null ? hubsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_hubs, hubsP), _.org.kevoree.util.Constants.Ref_hubs);
                                (hubsP != null ? hubsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_hubs);
                            }
                        },
                        addHubs: function (hubsP) {
                            this.internal_addHubs(hubsP, true, true);
                        },
                        addAllHubs: function (hubsP) {
                            this.internal_addAllHubs(hubsP, true, true);
                        },
                        internal_addHubs: function (hubsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddHubs(hubsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_hubs, hubsP, null));
                            }
                        },
                        internal_addAllHubs: function (hubsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = hubsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddHubs(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = hubsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddHubs(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_hubs, hubsP, null));
                            }
                        },
                        removeHubs: function (hubsP) {
                            this.internal_removeHubs(hubsP, true, true);
                        },
                        removeAllHubs: function () {
                            this.internal_removeAllHubs(true, true);
                        },
                        internal_removeHubs: function (hubsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._hubs.size() !== 0 && this._hubs.containsKey_za3rmp$((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = hubsP.path();
                                this._hubs.remove_za3rmp$((hubsP != null ? hubsP : Kotlin.throwNPE()).internalGetKey());
                                (hubsP != null ? hubsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_hubs);
                                ((hubsP != null ? hubsP : Kotlin.throwNPE()) != null ? hubsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllHubsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_hubs, hubsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllHubs: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllHubsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.hubs) != null ? tmp$0 : Kotlin.throwNPE();
                            this._hubs.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_hubs, temp_els, null));
                                this.removeAllHubsCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_nodes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllNodes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._nodes.size() !== 0 && this._nodes.containsKey_za3rmp$(value)) {
                                        var obj = this._nodes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._nodes.remove_za3rmp$(value);
                                        this._nodes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinitions) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeTypeDefinitions(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllTypeDefinitions();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._typeDefinitions.size() !== 0 && this._typeDefinitions.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._typeDefinitions.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._typeDefinitions.remove_za3rmp$(value);
                                        this._typeDefinitions.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_repositories) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeRepositories(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllRepositories();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._repositories.size() !== 0 && this._repositories.containsKey_za3rmp$(value)) {
                                        var obj_1 = this._repositories.get_za3rmp$(value);
                                        var objNewKey_1 = (obj_1 != null ? obj_1 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_1 == null) {
                                            throw new Error('Key newed to null ' + obj_1);
                                        }
                                        this._repositories.remove_za3rmp$(value);
                                        this._repositories.put_wn2jw4$(objNewKey_1, obj_1);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dataTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeDataTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllDataTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._dataTypes.size() !== 0 && this._dataTypes.containsKey_za3rmp$(value)) {
                                        var obj_2 = this._dataTypes.get_za3rmp$(value);
                                        var objNewKey_2 = (obj_2 != null ? obj_2 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_2 == null) {
                                            throw new Error('Key newed to null ' + obj_2);
                                        }
                                        this._dataTypes.remove_za3rmp$(value);
                                        this._dataTypes.put_wn2jw4$(objNewKey_2, obj_2);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_libraries) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeLibraries(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllLibraries();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._libraries.size() !== 0 && this._libraries.containsKey_za3rmp$(value)) {
                                        var obj_3 = this._libraries.get_za3rmp$(value);
                                        var objNewKey_3 = (obj_3 != null ? obj_3 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_3 == null) {
                                            throw new Error('Key newed to null ' + obj_3);
                                        }
                                        this._libraries.remove_za3rmp$(value);
                                        this._libraries.put_wn2jw4$(objNewKey_3, obj_3);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_hubs) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeHubs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllHubs();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._hubs.size() !== 0 && this._hubs.containsKey_za3rmp$(value)) {
                                        var obj_4 = this._hubs.get_za3rmp$(value);
                                        var objNewKey_4 = (obj_4 != null ? obj_4 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_4 == null) {
                                            throw new Error('Key newed to null ' + obj_4);
                                        }
                                        this._hubs.remove_za3rmp$(value);
                                        this._hubs.put_wn2jw4$(objNewKey_4, obj_4);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_mBindings) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeMBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllMBindings();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._mBindings.size() !== 0 && this._mBindings.containsKey_za3rmp$(value)) {
                                        var obj_5 = this._mBindings.get_za3rmp$(value);
                                        var objNewKey_5 = (obj_5 != null ? obj_5 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_5 == null) {
                                            throw new Error('Key newed to null ' + obj_5);
                                        }
                                        this._mBindings.remove_za3rmp$(value);
                                        this._mBindings.put_wn2jw4$(objNewKey_5, obj_5);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnits) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeDeployUnits(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllDeployUnits();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._deployUnits.size() !== 0 && this._deployUnits.containsKey_za3rmp$(value)) {
                                        var obj_6 = this._deployUnits.get_za3rmp$(value);
                                        var objNewKey_6 = (obj_6 != null ? obj_6 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_6 == null) {
                                            throw new Error('Key newed to null ' + obj_6);
                                        }
                                        this._deployUnits.remove_za3rmp$(value);
                                        this._deployUnits.put_wn2jw4$(objNewKey_6, obj_6);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_nodeNetworks) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeNodeNetworks(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllNodeNetworks();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._nodeNetworks.size() !== 0 && this._nodeNetworks.containsKey_za3rmp$(value)) {
                                        var obj_7 = this._nodeNetworks.get_za3rmp$(value);
                                        var objNewKey_7 = (obj_7 != null ? obj_7 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_7 == null) {
                                            throw new Error('Key newed to null ' + obj_7);
                                        }
                                        this._nodeNetworks.remove_za3rmp$(value);
                                        this._nodeNetworks.put_wn2jw4$(objNewKey_7, obj_7);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_groups) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeGroups(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllGroups();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._groups.size() !== 0 && this._groups.containsKey_za3rmp$(value)) {
                                        var obj_8 = this._groups.get_za3rmp$(value);
                                        var objNewKey_8 = (obj_8 != null ? obj_8 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_8 == null) {
                                            throw new Error('Key newed to null ' + obj_8);
                                        }
                                        this._groups.remove_za3rmp$(value);
                                        this._groups.put_wn2jw4$(objNewKey_8, obj_8);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findNodesByID: function (key) {
                            return this._nodes.get_za3rmp$(key);
                        },
                        findTypeDefinitionsByID: function (key) {
                            return this._typeDefinitions.get_za3rmp$(key);
                        },
                        findRepositoriesByID: function (key) {
                            return this._repositories.get_za3rmp$(key);
                        },
                        findDataTypesByID: function (key) {
                            return this._dataTypes.get_za3rmp$(key);
                        },
                        findLibrariesByID: function (key) {
                            return this._libraries.get_za3rmp$(key);
                        },
                        findHubsByID: function (key) {
                            return this._hubs.get_za3rmp$(key);
                        },
                        findMBindingsByID: function (key) {
                            return this._mBindings.get_za3rmp$(key);
                        },
                        findDeployUnitsByID: function (key) {
                            return this._deployUnits.get_za3rmp$(key);
                        },
                        findNodeNetworksByID: function (key) {
                            return this._nodeNetworks.get_za3rmp$(key);
                        },
                        findGroupsByID: function (key) {
                            return this._groups.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_nodes) {
                                return this.findNodesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinitions) {
                                return this.findTypeDefinitionsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_repositories) {
                                return this.findRepositoriesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dataTypes) {
                                return this.findDataTypesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_libraries) {
                                return this.findLibrariesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_hubs) {
                                return this.findHubsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_mBindings) {
                                return this.findMBindingsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_deployUnits) {
                                return this.findDeployUnitsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_nodeNetworks) {
                                return this.findNodeNetworksByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_groups) {
                                return this.findGroupsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_nodes, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                {
                                    var tmp$0 = this._nodes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._nodes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_nodes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_nodes);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinitions, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$1 = this._typeDefinitions.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._typeDefinitions.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinitions);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinitions);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_repositories, _.org.kevoree.util.Constants.org_kevoree_Repository);
                                {
                                    var tmp$2 = this._repositories.keySet().iterator();
                                    while (tmp$2.hasNext()) {
                                        var KMFLoopEntryKey_1 = tmp$2.next();
                                        this.internal_visit(visitor, this._repositories.get_za3rmp$(KMFLoopEntryKey_1), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_repositories);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_repositories);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dataTypes, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                {
                                    var tmp$3 = this._dataTypes.keySet().iterator();
                                    while (tmp$3.hasNext()) {
                                        var KMFLoopEntryKey_2 = tmp$3.next();
                                        this.internal_visit(visitor, this._dataTypes.get_za3rmp$(KMFLoopEntryKey_2), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dataTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dataTypes);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_libraries, _.org.kevoree.util.Constants.org_kevoree_TypeLibrary);
                                {
                                    var tmp$4 = this._libraries.keySet().iterator();
                                    while (tmp$4.hasNext()) {
                                        var KMFLoopEntryKey_3 = tmp$4.next();
                                        this.internal_visit(visitor, this._libraries.get_za3rmp$(KMFLoopEntryKey_3), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_libraries);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_libraries);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_hubs, _.org.kevoree.util.Constants.org_kevoree_Channel);
                                {
                                    var tmp$5 = this._hubs.keySet().iterator();
                                    while (tmp$5.hasNext()) {
                                        var KMFLoopEntryKey_4 = tmp$5.next();
                                        this.internal_visit(visitor, this._hubs.get_za3rmp$(KMFLoopEntryKey_4), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_hubs);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_hubs);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_mBindings, _.org.kevoree.util.Constants.org_kevoree_MBinding);
                                {
                                    var tmp$6 = this._mBindings.keySet().iterator();
                                    while (tmp$6.hasNext()) {
                                        var KMFLoopEntryKey_5 = tmp$6.next();
                                        this.internal_visit(visitor, this._mBindings.get_za3rmp$(KMFLoopEntryKey_5), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_mBindings);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_mBindings);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnits, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                {
                                    var tmp$7 = this._deployUnits.keySet().iterator();
                                    while (tmp$7.hasNext()) {
                                        var KMFLoopEntryKey_6 = tmp$7.next();
                                        this.internal_visit(visitor, this._deployUnits.get_za3rmp$(KMFLoopEntryKey_6), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnits);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnits);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_nodeNetworks, _.org.kevoree.util.Constants.org_kevoree_NodeNetwork);
                                {
                                    var tmp$8 = this._nodeNetworks.keySet().iterator();
                                    while (tmp$8.hasNext()) {
                                        var KMFLoopEntryKey_7 = tmp$8.next();
                                        this.internal_visit(visitor, this._nodeNetworks.get_za3rmp$(KMFLoopEntryKey_7), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_nodeNetworks);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_nodeNetworks);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_groups, _.org.kevoree.util.Constants.org_kevoree_Group);
                                {
                                    var tmp$9 = this._groups.keySet().iterator();
                                    while (tmp$9.hasNext()) {
                                        var KMFLoopEntryKey_8 = tmp$9.next();
                                        this.internal_visit(visitor, this._groups.get_za3rmp$(KMFLoopEntryKey_8), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_groups);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_groups);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ContainerRoot;
                        }
                    }),
                    DefaultKevoreeFactory: Kotlin.createClass(function () {
                        return [_.org.kevoree.KevoreeFactory];
                    }, null, /** @lends _.org.kevoree.impl.DefaultKevoreeFactory.prototype */ {
                        getVersion: function () {
                            return '3.5.5-SNAPSHOT';
                        },
                        createComponentInstance: function () {
                            var tempElem = new _.org.kevoree.impl.ComponentInstanceImpl();
                            return tempElem;
                        },
                        createComponentType: function () {
                            var tempElem = new _.org.kevoree.impl.ComponentTypeImpl();
                            return tempElem;
                        },
                        createContainerNode: function () {
                            var tempElem = new _.org.kevoree.impl.ContainerNodeImpl();
                            return tempElem;
                        },
                        createContainerRoot: function () {
                            var tempElem = new _.org.kevoree.impl.ContainerRootImpl();
                            return tempElem;
                        },
                        createPort: function () {
                            var tempElem = new _.org.kevoree.impl.PortImpl();
                            return tempElem;
                        },
                        createNamespace: function () {
                            var tempElem = new _.org.kevoree.impl.NamespaceImpl();
                            return tempElem;
                        },
                        createDictionary: function () {
                            var tempElem = new _.org.kevoree.impl.DictionaryImpl();
                            return tempElem;
                        },
                        createFragmentDictionary: function () {
                            var tempElem = new _.org.kevoree.impl.FragmentDictionaryImpl();
                            return tempElem;
                        },
                        createDictionaryType: function () {
                            var tempElem = new _.org.kevoree.impl.DictionaryTypeImpl();
                            return tempElem;
                        },
                        createDictionaryAttribute: function () {
                            var tempElem = new _.org.kevoree.impl.DictionaryAttributeImpl();
                            return tempElem;
                        },
                        createDictionaryValue: function () {
                            var tempElem = new _.org.kevoree.impl.DictionaryValueImpl();
                            return tempElem;
                        },
                        createPortTypeRef: function () {
                            var tempElem = new _.org.kevoree.impl.PortTypeRefImpl();
                            return tempElem;
                        },
                        createServicePortType: function () {
                            var tempElem = new _.org.kevoree.impl.ServicePortTypeImpl();
                            return tempElem;
                        },
                        createOperation: function () {
                            var tempElem = new _.org.kevoree.impl.OperationImpl();
                            return tempElem;
                        },
                        createParameter: function () {
                            var tempElem = new _.org.kevoree.impl.ParameterImpl();
                            return tempElem;
                        },
                        createTypedElement: function () {
                            var tempElem = new _.org.kevoree.impl.TypedElementImpl();
                            return tempElem;
                        },
                        createMessagePortType: function () {
                            var tempElem = new _.org.kevoree.impl.MessagePortTypeImpl();
                            return tempElem;
                        },
                        createRepository: function () {
                            var tempElem = new _.org.kevoree.impl.RepositoryImpl();
                            return tempElem;
                        },
                        createDeployUnit: function () {
                            var tempElem = new _.org.kevoree.impl.DeployUnitImpl();
                            return tempElem;
                        },
                        createTypeLibrary: function () {
                            var tempElem = new _.org.kevoree.impl.TypeLibraryImpl();
                            return tempElem;
                        },
                        createPortTypeMapping: function () {
                            var tempElem = new _.org.kevoree.impl.PortTypeMappingImpl();
                            return tempElem;
                        },
                        createChannel: function () {
                            var tempElem = new _.org.kevoree.impl.ChannelImpl();
                            return tempElem;
                        },
                        createMBinding: function () {
                            var tempElem = new _.org.kevoree.impl.MBindingImpl();
                            return tempElem;
                        },
                        createNodeNetwork: function () {
                            var tempElem = new _.org.kevoree.impl.NodeNetworkImpl();
                            return tempElem;
                        },
                        createNodeLink: function () {
                            var tempElem = new _.org.kevoree.impl.NodeLinkImpl();
                            return tempElem;
                        },
                        createNetworkInfo: function () {
                            var tempElem = new _.org.kevoree.impl.NetworkInfoImpl();
                            return tempElem;
                        },
                        createNetworkProperty: function () {
                            var tempElem = new _.org.kevoree.impl.NetworkPropertyImpl();
                            return tempElem;
                        },
                        createChannelType: function () {
                            var tempElem = new _.org.kevoree.impl.ChannelTypeImpl();
                            return tempElem;
                        },
                        createInstance: function () {
                            var tempElem = new _.org.kevoree.impl.InstanceImpl();
                            return tempElem;
                        },
                        createGroup: function () {
                            var tempElem = new _.org.kevoree.impl.GroupImpl();
                            return tempElem;
                        },
                        createGroupType: function () {
                            var tempElem = new _.org.kevoree.impl.GroupTypeImpl();
                            return tempElem;
                        },
                        createNodeType: function () {
                            var tempElem = new _.org.kevoree.impl.NodeTypeImpl();
                            return tempElem;
                        },
                        create: function (metaClassName) {
                            if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ComponentInstance) {
                                return this.createComponentInstance();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ComponentInstance) {
                                return this.createComponentInstance();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ComponentType) {
                                return this.createComponentType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ComponentType) {
                                return this.createComponentType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ContainerNode) {
                                return this.createContainerNode();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ContainerNode) {
                                return this.createContainerNode();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ContainerRoot) {
                                return this.createContainerRoot();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ContainerRoot) {
                                return this.createContainerRoot();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Port) {
                                return this.createPort();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Port) {
                                return this.createPort();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Namespace) {
                                return this.createNamespace();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Namespace) {
                                return this.createNamespace();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Dictionary) {
                                return this.createDictionary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Dictionary) {
                                return this.createDictionary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary) {
                                return this.createFragmentDictionary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_FragmentDictionary) {
                                return this.createFragmentDictionary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_DictionaryType) {
                                return this.createDictionaryType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_DictionaryType) {
                                return this.createDictionaryType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_DictionaryAttribute) {
                                return this.createDictionaryAttribute();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_DictionaryAttribute) {
                                return this.createDictionaryAttribute();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_DictionaryValue) {
                                return this.createDictionaryValue();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_DictionaryValue) {
                                return this.createDictionaryValue();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_PortTypeRef) {
                                return this.createPortTypeRef();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_PortTypeRef) {
                                return this.createPortTypeRef();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ServicePortType) {
                                return this.createServicePortType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ServicePortType) {
                                return this.createServicePortType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Operation) {
                                return this.createOperation();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Operation) {
                                return this.createOperation();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Parameter) {
                                return this.createParameter();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Parameter) {
                                return this.createParameter();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_TypedElement) {
                                return this.createTypedElement();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_TypedElement) {
                                return this.createTypedElement();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_MessagePortType) {
                                return this.createMessagePortType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_MessagePortType) {
                                return this.createMessagePortType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Repository) {
                                return this.createRepository();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Repository) {
                                return this.createRepository();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_DeployUnit) {
                                return this.createDeployUnit();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_DeployUnit) {
                                return this.createDeployUnit();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_TypeLibrary) {
                                return this.createTypeLibrary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_TypeLibrary) {
                                return this.createTypeLibrary();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_PortTypeMapping) {
                                return this.createPortTypeMapping();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_PortTypeMapping) {
                                return this.createPortTypeMapping();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Channel) {
                                return this.createChannel();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Channel) {
                                return this.createChannel();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_MBinding) {
                                return this.createMBinding();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_MBinding) {
                                return this.createMBinding();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_NodeNetwork) {
                                return this.createNodeNetwork();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_NodeNetwork) {
                                return this.createNodeNetwork();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_NodeLink) {
                                return this.createNodeLink();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_NodeLink) {
                                return this.createNodeLink();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_NetworkInfo) {
                                return this.createNetworkInfo();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_NetworkInfo) {
                                return this.createNetworkInfo();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_NetworkProperty) {
                                return this.createNetworkProperty();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_NetworkProperty) {
                                return this.createNetworkProperty();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_ChannelType) {
                                return this.createChannelType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_ChannelType) {
                                return this.createChannelType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Instance) {
                                return this.createInstance();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Instance) {
                                return this.createInstance();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_Group) {
                                return this.createGroup();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_Group) {
                                return this.createGroup();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_GroupType) {
                                return this.createGroupType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_GroupType) {
                                return this.createGroupType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.org_kevoree_NodeType) {
                                return this.createNodeType();
                            }
                            else if (metaClassName === _.org.kevoree.util.Constants.CN_NodeType) {
                                return this.createNodeType();
                            }
                            else {
                                return null;
                            }
                        }
                    }),
                    DeployUnitImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.DeployUnit, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_35i8a8$ = null;
                        this.$internal_containmentRefName_23r6e8$ = null;
                        this.$internal_unsetCmd_mr8vnp$ = null;
                        this.$internal_readOnlyElem_3o8n45$ = false;
                        this.$internal_recursive_readOnlyElem_dl0du6$ = false;
                        this.$internal_inboundReferences_45iopf$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_lg6sgf$ = false;
                        this.$internal_modelElementListeners_9n22k8$ = null;
                        this.$internal_modelTreeListeners_6i8p8$ = null;
                        this.$path_cache_airkay$ = null;
                        this.$key_cache_ctbw44$ = null;
                        this.$name_8nxs2v$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$groupName_fr5v8c$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_xzdcl2$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$url_6lejz5$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$hashcode_nqkelz$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$type_8ntgag$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._requiredLibs = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.DeployUnitImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_35i8a8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_35i8a8$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_23r6e8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_23r6e8$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_mr8vnp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_mr8vnp$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_3o8n45$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_3o8n45$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_dl0du6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_dl0du6$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_45iopf$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_45iopf$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_lg6sgf$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_lg6sgf$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_9n22k8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_9n22k8$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_6i8p8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_6i8p8$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_airkay$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_airkay$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_ctbw44$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_ctbw44$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllRequiredLibs();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_8nxs2v$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_8nxs2v$;
                                this.$name_8nxs2v$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        groupName: {
                            get: function () {
                                return this.$groupName_fr5v8c$;
                            },
                            set: function (iP) {
                                this.internal_groupName(iP, true);
                            }
                        },
                        internal_groupName: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.groupName)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$groupName_fr5v8c$;
                                this.$groupName_fr5v8c$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_groupName, this.groupName, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_groupName, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_xzdcl2$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_xzdcl2$;
                                this.$version_xzdcl2$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        url: {
                            get: function () {
                                return this.$url_6lejz5$;
                            },
                            set: function (iP) {
                                this.internal_url(iP, true);
                            }
                        },
                        internal_url: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.url)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$url_6lejz5$;
                                this.$url_6lejz5$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_url, this.url, kmf_previousVal));
                                }
                            }
                        },
                        hashcode: {
                            get: function () {
                                return this.$hashcode_nqkelz$;
                            },
                            set: function (iP) {
                                this.internal_hashcode(iP, true);
                            }
                        },
                        internal_hashcode: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.hashcode)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$hashcode_nqkelz$;
                                this.$hashcode_nqkelz$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_hashcode, this.hashcode, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_hashcode, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        type: {
                            get: function () {
                                return this.$type_8ntgag$;
                            },
                            set: function (iP) {
                                this.internal_type(iP, true);
                            }
                        },
                        internal_type: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.type)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$type_8ntgag$;
                                this.$type_8ntgag$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_type, this.type, kmf_previousVal));
                                }
                            }
                        },
                        requiredLibs: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._requiredLibs.values());
                            },
                            set: function (requiredLibsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (requiredLibsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_requiredLibs(requiredLibsP, true, true);
                            }
                        },
                        internal_requiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._requiredLibs.values(), requiredLibsP)) {
                                var kmf_previousVal = this._requiredLibs;
                                this._requiredLibs.clear();
                                {
                                    var tmp$0 = requiredLibsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._requiredLibs.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_requiredLibs);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_requiredLibs, requiredLibsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddRequiredLibs: function (requiredLibsP) {
                            var _key_ = (requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._requiredLibs.containsKey_za3rmp$(_key_)) {
                                this._requiredLibs.put_wn2jw4$(_key_, requiredLibsP);
                                (requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_requiredLibs);
                            }
                        },
                        addRequiredLibs: function (requiredLibsP) {
                            this.internal_addRequiredLibs(requiredLibsP, true, true);
                        },
                        addAllRequiredLibs: function (requiredLibsP) {
                            this.internal_addAllRequiredLibs(requiredLibsP, true, true);
                        },
                        internal_addRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddRequiredLibs(requiredLibsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_requiredLibs, requiredLibsP, null));
                            }
                        },
                        internal_addAllRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = requiredLibsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddRequiredLibs(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = requiredLibsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddRequiredLibs(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_requiredLibs, requiredLibsP, null));
                            }
                        },
                        removeRequiredLibs: function (requiredLibsP) {
                            this.internal_removeRequiredLibs(requiredLibsP, true, true);
                        },
                        removeAllRequiredLibs: function () {
                            this.internal_removeAllRequiredLibs(true, true);
                        },
                        internal_removeRequiredLibs: function (requiredLibsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._requiredLibs.size() !== 0 && this._requiredLibs.containsKey_za3rmp$((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = requiredLibsP.path();
                                this._requiredLibs.remove_za3rmp$((requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).internalGetKey());
                                (requiredLibsP != null ? requiredLibsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_requiredLibs);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_requiredLibs, requiredLibsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllRequiredLibs: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.requiredLibs) != null ? tmp$0 : Kotlin.throwNPE();
                            this._requiredLibs.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_requiredLibs, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_groupName) {
                                this.internal_groupName(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_url) {
                                this.internal_url(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_hashcode) {
                                this.internal_hashcode(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_type) {
                                this.internal_type(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_requiredLibs) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeRequiredLibs(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllRequiredLibs();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._requiredLibs.size() !== 0 && this._requiredLibs.containsKey_za3rmp$(value)) {
                                        var obj = this._requiredLibs.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._requiredLibs.remove_za3rmp$(value);
                                        this._requiredLibs.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.groupName) + '/' + Kotlin.toString(this.hashcode) + '/' + Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findRequiredLibsByID: function (key) {
                            return this._requiredLibs.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_requiredLibs) {
                                return this.findRequiredLibsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_requiredLibs, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                {
                                    var tmp$0 = this._requiredLibs.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._requiredLibs.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_requiredLibs);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_requiredLibs);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.groupName, _.org.kevoree.util.Constants.Att_groupName, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.hashcode, _.org.kevoree.util.Constants.Att_hashcode, this);
                            visitor.visit(this.type, _.org.kevoree.util.Constants.Att_type, this);
                            visitor.visit(this.url, _.org.kevoree.util.Constants.Att_url, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_DeployUnit;
                        }
                    }),
                    DictionaryAttributeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.DictionaryAttribute, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_lvd97j$ = null;
                        this.$internal_containmentRefName_433nap$ = null;
                        this.$internal_unsetCmd_d4moly$ = null;
                        this.$internal_readOnlyElem_dvh67e$ = false;
                        this.$internal_recursive_readOnlyElem_7db20z$ = false;
                        this.$internal_inboundReferences_nemrp8$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_dt4myq$ = false;
                        this.$internal_modelElementListeners_o2bcqv$ = null;
                        this.$internal_modelTreeListeners_25uplp$ = null;
                        this.$path_cache_ls8h8b$ = null;
                        this.$key_cache_jbpo9x$ = null;
                        this.$name_1llm1k$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$optional_i4lpqb$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$state_likxw4$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$datatype_cs6br5$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$fragmentDependant_mjin7y$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$defaultValue_irkhbn$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._genericTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.DictionaryAttributeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_lvd97j$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_lvd97j$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_433nap$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_433nap$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_d4moly$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_d4moly$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_dvh67e$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_dvh67e$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_7db20z$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_7db20z$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_nemrp8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_nemrp8$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_dt4myq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_dt4myq$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_o2bcqv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_o2bcqv$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_25uplp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_25uplp$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_ls8h8b$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_ls8h8b$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_jbpo9x$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_jbpo9x$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllGenericTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_1llm1k$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_1llm1k$;
                                this.$name_1llm1k$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        optional: {
                            get: function () {
                                return this.$optional_i4lpqb$;
                            },
                            set: function (iP) {
                                this.internal_optional(iP, true);
                            }
                        },
                        internal_optional: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.optional)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$optional_i4lpqb$;
                                this.$optional_i4lpqb$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_optional, this.optional, kmf_previousVal));
                                }
                            }
                        },
                        state: {
                            get: function () {
                                return this.$state_likxw4$;
                            },
                            set: function (iP) {
                                this.internal_state(iP, true);
                            }
                        },
                        internal_state: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.state)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$state_likxw4$;
                                this.$state_likxw4$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_state, this.state, kmf_previousVal));
                                }
                            }
                        },
                        datatype: {
                            get: function () {
                                return this.$datatype_cs6br5$;
                            },
                            set: function (iP) {
                                this.internal_datatype(iP, true);
                            }
                        },
                        internal_datatype: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.datatype)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$datatype_cs6br5$;
                                this.$datatype_cs6br5$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_datatype, this.datatype, kmf_previousVal));
                                }
                            }
                        },
                        fragmentDependant: {
                            get: function () {
                                return this.$fragmentDependant_mjin7y$;
                            },
                            set: function (iP) {
                                this.internal_fragmentDependant(iP, true);
                            }
                        },
                        internal_fragmentDependant: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.fragmentDependant)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$fragmentDependant_mjin7y$;
                                this.$fragmentDependant_mjin7y$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_fragmentDependant, this.fragmentDependant, kmf_previousVal));
                                }
                            }
                        },
                        defaultValue: {
                            get: function () {
                                return this.$defaultValue_irkhbn$;
                            },
                            set: function (iP) {
                                this.internal_defaultValue(iP, true);
                            }
                        },
                        internal_defaultValue: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.defaultValue)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$defaultValue_irkhbn$;
                                this.$defaultValue_irkhbn$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_defaultValue, this.defaultValue, kmf_previousVal));
                                }
                            }
                        },
                        genericTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._genericTypes.values());
                            },
                            set: function (genericTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (genericTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_genericTypes(genericTypesP, true, true);
                            }
                        },
                        internal_genericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._genericTypes.values(), genericTypesP)) {
                                var kmf_previousVal = this._genericTypes;
                                this._genericTypes.clear();
                                {
                                    var tmp$0 = genericTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._genericTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddGenericTypes: function (genericTypesP) {
                            var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._genericTypes.containsKey_za3rmp$(_key_)) {
                                this._genericTypes.put_wn2jw4$(_key_, genericTypesP);
                                (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                            }
                        },
                        addGenericTypes: function (genericTypesP) {
                            this.internal_addGenericTypes(genericTypesP, true, true);
                        },
                        addAllGenericTypes: function (genericTypesP) {
                            this.internal_addAllGenericTypes(genericTypesP, true, true);
                        },
                        internal_addGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddGenericTypes(genericTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, null));
                            }
                        },
                        internal_addAllGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = genericTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddGenericTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = genericTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddGenericTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, null));
                            }
                        },
                        removeGenericTypes: function (genericTypesP) {
                            this.internal_removeGenericTypes(genericTypesP, true, true);
                        },
                        removeAllGenericTypes: function () {
                            this.internal_removeAllGenericTypes(true, true);
                        },
                        internal_removeGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._genericTypes.size() !== 0 && this._genericTypes.containsKey_za3rmp$((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = genericTypesP.path();
                                this._genericTypes.remove_za3rmp$((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                                (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllGenericTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.genericTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._genericTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_optional) {
                                this.internal_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_state) {
                                this.internal_state(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_datatype) {
                                this.internal_datatype(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_fragmentDependant) {
                                this.internal_fragmentDependant(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_defaultValue) {
                                this.internal_defaultValue(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_genericTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllGenericTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._genericTypes.size() !== 0 && this._genericTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._genericTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._genericTypes.remove_za3rmp$(value);
                                        this._genericTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findGenericTypesByID: function (key) {
                            return this._genericTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_genericTypes) {
                                return this.findGenericTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_genericTypes, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                {
                                    var tmp$0 = this._genericTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._genericTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_genericTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_genericTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.fragmentDependant, _.org.kevoree.util.Constants.Att_fragmentDependant, this);
                            visitor.visit(this.optional, _.org.kevoree.util.Constants.Att_optional, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.state, _.org.kevoree.util.Constants.Att_state, this);
                            visitor.visit(this.datatype, _.org.kevoree.util.Constants.Att_datatype, this);
                            visitor.visit(this.defaultValue, _.org.kevoree.util.Constants.Att_defaultValue, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_DictionaryAttribute;
                        }
                    }),
                    DictionaryImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Dictionary, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_k4mdcr$ = null;
                        this.$internal_containmentRefName_g7blud$ = null;
                        this.$internal_unsetCmd_eeb2i8$ = null;
                        this.$internal_readOnlyElem_2akz4g$ = false;
                        this.$internal_recursive_readOnlyElem_4zk8hv$ = false;
                        this.$internal_inboundReferences_bams8y$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_weooqs$ = false;
                        this.$internal_modelElementListeners_jvapyr$ = null;
                        this.$internal_modelTreeListeners_i4kjjd$ = null;
                        this.$path_cache_g2g5fv$ = null;
                        this.$key_cache_fyp1nj$ = null;
                        this.$generated_KMF_ID_gzg1jr$ = '' + Math.random() + (new Date()).getTime();
                        this._values = new Kotlin.PrimitiveHashMap();
                        this.removeAllValuesCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.DictionaryImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_k4mdcr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_k4mdcr$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_g7blud$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_g7blud$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_eeb2i8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_eeb2i8$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_2akz4g$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_2akz4g$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_4zk8hv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_4zk8hv$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_bams8y$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_bams8y$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_weooqs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_weooqs$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_jvapyr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_jvapyr$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_i4kjjd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_i4kjjd$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_g2g5fv$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_g2g5fv$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_fyp1nj$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_fyp1nj$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_gzg1jr$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_gzg1jr$;
                                this.$generated_KMF_ID_gzg1jr$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        values: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._values.values());
                            },
                            set: function (valuesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (valuesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_values(valuesP, true, true);
                            }
                        },
                        internal_values: function (valuesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._values.values(), valuesP)) {
                                var kmf_previousVal = this._values;
                                this._values.clear();
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._values.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, el), _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddValues: function (valuesP) {
                            var _key_ = (valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._values.containsKey_za3rmp$(_key_)) {
                                this._values.put_wn2jw4$(_key_, valuesP);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, valuesP), _.org.kevoree.util.Constants.Ref_values);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                            }
                        },
                        addValues: function (valuesP) {
                            this.internal_addValues(valuesP, true, true);
                        },
                        addAllValues: function (valuesP) {
                            this.internal_addAllValues(valuesP, true, true);
                        },
                        internal_addValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddValues(valuesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        internal_addAllValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddValues(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = valuesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddValues(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        removeValues: function (valuesP) {
                            this.internal_removeValues(valuesP, true, true);
                        },
                        removeAllValues: function () {
                            this.internal_removeAllValues(true, true);
                        },
                        internal_removeValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._values.size() !== 0 && this._values.containsKey_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = valuesP.path();
                                this._values.remove_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey());
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                ((valuesP != null ? valuesP : Kotlin.throwNPE()) != null ? valuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllValuesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllValues: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllValuesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE();
                            this._values.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, temp_els, null));
                                this.removeAllValuesCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_values) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllValues();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._values.size() !== 0 && this._values.containsKey_za3rmp$(value)) {
                                        var obj = this._values.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._values.remove_za3rmp$(value);
                                        this._values.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findValuesByID: function (key) {
                            return this._values.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_values) {
                                return this.findValuesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_values, _.org.kevoree.util.Constants.org_kevoree_DictionaryValue);
                                {
                                    var tmp$0 = this._values.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._values.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_values);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Dictionary;
                        }
                    }),
                    DictionaryTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.DictionaryType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_abqpl7$ = null;
                        this.$internal_containmentRefName_th108r$ = null;
                        this.$internal_unsetCmd_evew46$ = null;
                        this.$internal_readOnlyElem_7s0tm$ = false;
                        this.$internal_recursive_readOnlyElem_8w37s9$ = false;
                        this.$internal_inboundReferences_6a8xgo$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_tanora$ = false;
                        this.$internal_modelElementListeners_njfjeb$ = null;
                        this.$internal_modelTreeListeners_ve9xxr$ = null;
                        this.$path_cache_o0mo3z$ = null;
                        this.$key_cache_x7wu1$ = null;
                        this.$generated_KMF_ID_v48n7z$ = '' + Math.random() + (new Date()).getTime();
                        this._attributes = new Kotlin.PrimitiveHashMap();
                        this.removeAllAttributesCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.DictionaryTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_abqpl7$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_abqpl7$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_th108r$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_th108r$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_evew46$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_evew46$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_7s0tm$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_7s0tm$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_8w37s9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_8w37s9$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_6a8xgo$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_6a8xgo$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_tanora$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_tanora$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_njfjeb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_njfjeb$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_ve9xxr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_ve9xxr$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_o0mo3z$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_o0mo3z$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_x7wu1$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_x7wu1$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.attributes) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_v48n7z$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_v48n7z$;
                                this.$generated_KMF_ID_v48n7z$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        attributes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._attributes.values());
                            },
                            set: function (attributesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (attributesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_attributes(attributesP, true, true);
                            }
                        },
                        internal_attributes: function (attributesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._attributes.values(), attributesP)) {
                                var kmf_previousVal = this._attributes;
                                this._attributes.clear();
                                {
                                    var tmp$0 = attributesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._attributes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_attributes);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_attributes, el), _.org.kevoree.util.Constants.Ref_attributes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_attributes, attributesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddAttributes: function (attributesP) {
                            var _key_ = (attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._attributes.containsKey_za3rmp$(_key_)) {
                                this._attributes.put_wn2jw4$(_key_, attributesP);
                                (attributesP != null ? attributesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_attributes, attributesP), _.org.kevoree.util.Constants.Ref_attributes);
                                (attributesP != null ? attributesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_attributes);
                            }
                        },
                        addAttributes: function (attributesP) {
                            this.internal_addAttributes(attributesP, true, true);
                        },
                        addAllAttributes: function (attributesP) {
                            this.internal_addAllAttributes(attributesP, true, true);
                        },
                        internal_addAttributes: function (attributesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddAttributes(attributesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_attributes, attributesP, null));
                            }
                        },
                        internal_addAllAttributes: function (attributesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = attributesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddAttributes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = attributesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddAttributes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_attributes, attributesP, null));
                            }
                        },
                        removeAttributes: function (attributesP) {
                            this.internal_removeAttributes(attributesP, true, true);
                        },
                        removeAllAttributes: function () {
                            this.internal_removeAllAttributes(true, true);
                        },
                        internal_removeAttributes: function (attributesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._attributes.size() !== 0 && this._attributes.containsKey_za3rmp$((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = attributesP.path();
                                this._attributes.remove_za3rmp$((attributesP != null ? attributesP : Kotlin.throwNPE()).internalGetKey());
                                (attributesP != null ? attributesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_attributes);
                                ((attributesP != null ? attributesP : Kotlin.throwNPE()) != null ? attributesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllAttributesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_attributes, attributesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllAttributes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllAttributesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.attributes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._attributes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_attributes, temp_els, null));
                                this.removeAllAttributesCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_attributes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeAttributes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllAttributes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._attributes.size() !== 0 && this._attributes.containsKey_za3rmp$(value)) {
                                        var obj = this._attributes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._attributes.remove_za3rmp$(value);
                                        this._attributes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findAttributesByID: function (key) {
                            return this._attributes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_attributes) {
                                return this.findAttributesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_attributes, _.org.kevoree.util.Constants.org_kevoree_DictionaryAttribute);
                                {
                                    var tmp$0 = this._attributes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._attributes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_attributes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_attributes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_DictionaryType;
                        }
                    }),
                    DictionaryValueImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.DictionaryValue, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_dw4l8q$ = null;
                        this.$internal_containmentRefName_xlgz5m$ = null;
                        this.$internal_unsetCmd_a2l845$ = null;
                        this.$internal_readOnlyElem_hhbbf9$ = false;
                        this.$internal_recursive_readOnlyElem_mngkig$ = false;
                        this.$internal_inboundReferences_uic9bt$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_uef07r$ = false;
                        this.$internal_modelElementListeners_589wry$ = null;
                        this.$internal_modelTreeListeners_zie54i$ = null;
                        this.$path_cache_qwrwvk$ = null;
                        this.$key_cache_q180qi$ = null;
                        this.$name_8d8wwd$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$value_ou68i1$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                    }, /** @lends _.org.kevoree.impl.DictionaryValueImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_dw4l8q$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_dw4l8q$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_xlgz5m$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_xlgz5m$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_a2l845$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_a2l845$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_hhbbf9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_hhbbf9$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_mngkig$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_mngkig$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_uic9bt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_uic9bt$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_uef07r$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_uef07r$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_589wry$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_589wry$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_zie54i$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_zie54i$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_qwrwvk$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_qwrwvk$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_q180qi$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_q180qi$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_8d8wwd$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_8d8wwd$;
                                this.$name_8d8wwd$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        value: {
                            get: function () {
                                return this.$value_ou68i1$;
                            },
                            set: function (iP) {
                                this.internal_value(iP, true);
                            }
                        },
                        internal_value: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.value)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$value_ou68i1$;
                                this.$value_ou68i1$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_value, this.value, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_value) {
                                this.internal_value(value, fireEvents);
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.value, _.org.kevoree.util.Constants.Att_value, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_DictionaryValue;
                        }
                    }),
                    FragmentDictionaryImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.FragmentDictionary, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_yo6lx$ = null;
                        this.$internal_containmentRefName_ze982j$ = null;
                        this.$internal_unsetCmd_vf3nr4$ = null;
                        this.$internal_readOnlyElem_mt2abk$ = false;
                        this.$internal_recursive_readOnlyElem_cyra1f$ = false;
                        this.$internal_inboundReferences_hjj2mq$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_igi7ro$ = false;
                        this.$internal_modelElementListeners_1snu5f$ = null;
                        this.$internal_modelTreeListeners_xh0adj$ = null;
                        this.$path_cache_nygoij$ = null;
                        this.$key_cache_tys64v$ = null;
                        this.$generated_KMF_ID_jtp83r$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$name_f26ebm$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._values = new Kotlin.PrimitiveHashMap();
                        this.removeAllValuesCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.FragmentDictionaryImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_yo6lx$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_yo6lx$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_ze982j$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_ze982j$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_vf3nr4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_vf3nr4$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_mt2abk$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_mt2abk$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_cyra1f$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_cyra1f$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_hjj2mq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_hjj2mq$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_igi7ro$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_igi7ro$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_1snu5f$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_1snu5f$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_xh0adj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_xh0adj$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_nygoij$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_nygoij$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_tys64v$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_tys64v$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_jtp83r$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_jtp83r$;
                                this.$generated_KMF_ID_jtp83r$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_f26ebm$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_f26ebm$;
                                this.$name_f26ebm$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        values: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._values.values());
                            },
                            set: function (valuesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (valuesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_values(valuesP, true, true);
                            }
                        },
                        internal_values: function (valuesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._values.values(), valuesP)) {
                                var kmf_previousVal = this._values;
                                this._values.clear();
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._values.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, el), _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddValues: function (valuesP) {
                            var _key_ = (valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._values.containsKey_za3rmp$(_key_)) {
                                this._values.put_wn2jw4$(_key_, valuesP);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, valuesP), _.org.kevoree.util.Constants.Ref_values);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                            }
                        },
                        addValues: function (valuesP) {
                            this.internal_addValues(valuesP, true, true);
                        },
                        addAllValues: function (valuesP) {
                            this.internal_addAllValues(valuesP, true, true);
                        },
                        internal_addValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddValues(valuesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        internal_addAllValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddValues(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = valuesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddValues(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        removeValues: function (valuesP) {
                            this.internal_removeValues(valuesP, true, true);
                        },
                        removeAllValues: function () {
                            this.internal_removeAllValues(true, true);
                        },
                        internal_removeValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._values.size() !== 0 && this._values.containsKey_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = valuesP.path();
                                this._values.remove_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey());
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                ((valuesP != null ? valuesP : Kotlin.throwNPE()) != null ? valuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllValuesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllValues: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllValuesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE();
                            this._values.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, temp_els, null));
                                this.removeAllValuesCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_values) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllValues();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._values.size() !== 0 && this._values.containsKey_za3rmp$(value)) {
                                        var obj = this._values.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._values.remove_za3rmp$(value);
                                        this._values.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findValuesByID: function (key) {
                            return this._values.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_values) {
                                return this.findValuesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_values, _.org.kevoree.util.Constants.org_kevoree_DictionaryValue);
                                {
                                    var tmp$0 = this._values.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._values.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_values);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary;
                        }
                    }),
                    GroupImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Group, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_6cdzuu$ = null;
                        this.$internal_containmentRefName_vebtpy$ = null;
                        this.$internal_unsetCmd_veg8dr$ = null;
                        this.$internal_readOnlyElem_8pw15d$ = false;
                        this.$internal_recursive_readOnlyElem_wbvzx8$ = false;
                        this.$internal_inboundReferences_wq9wfx$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_wmbq8r$ = false;
                        this.$internal_modelElementListeners_2mjqeq$ = null;
                        this.$internal_modelTreeListeners_xbkrey$ = null;
                        this.$path_cache_juq6q4$ = null;
                        this.$key_cache_yezpfi$ = null;
                        this.$name_6q21d$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$metaData_8aax2r$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$started_cjcnfn$ = true;
                        this._subNodes = new Kotlin.PrimitiveHashMap();
                        this._fragmentDictionary = new Kotlin.PrimitiveHashMap();
                        this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                        this.$typeDefinition_48mgnl$ = null;
                        this.$dictionary_801d16$ = null;
                    }, /** @lends _.org.kevoree.impl.GroupImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_6cdzuu$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_6cdzuu$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_vebtpy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_vebtpy$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_veg8dr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_veg8dr$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_8pw15d$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_8pw15d$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_wbvzx8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_wbvzx8$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_wq9wfx$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_wq9wfx$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_wmbq8r$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_wmbq8r$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_2mjqeq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_2mjqeq$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_xbkrey$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_xbkrey$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_juq6q4$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_juq6q4$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_yezpfi$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_yezpfi$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.typeDefinition != null) {
                                var tmp$0;
                                (((tmp$0 = this.typeDefinition) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                this.typeDefinition = null;
                            }
                            if (this.dictionary != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionary) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                this.dictionary = null;
                            }
                            var tmp$2;
                            {
                                var tmp$3 = ((tmp$2 = this.fragmentDictionary) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            this.removeAllSubNodes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$4;
                                ((tmp$4 = this.internal_unsetCmd) != null ? tmp$4 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_6q21d$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_6q21d$;
                                this.$name_6q21d$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        metaData: {
                            get: function () {
                                return this.$metaData_8aax2r$;
                            },
                            set: function (iP) {
                                this.internal_metaData(iP, true);
                            }
                        },
                        internal_metaData: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.metaData)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$metaData_8aax2r$;
                                this.$metaData_8aax2r$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_metaData, this.metaData, kmf_previousVal));
                                }
                            }
                        },
                        started: {
                            get: function () {
                                return this.$started_cjcnfn$;
                            },
                            set: function (iP) {
                                this.internal_started(iP, true);
                            }
                        },
                        internal_started: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.started)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$started_cjcnfn$;
                                this.$started_cjcnfn$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_started, this.started, kmf_previousVal));
                                }
                            }
                        },
                        subNodes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._subNodes.values());
                            },
                            set: function (subNodesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (subNodesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_subNodes(subNodesP, true, true);
                            }
                        },
                        internal_subNodes: function (subNodesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._subNodes.values(), subNodesP)) {
                                var kmf_previousVal = this._subNodes;
                                this.internal_removeAllSubNodes(true, false);
                                {
                                    var tmp$0 = subNodesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._subNodes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_subNodes);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_groups, this, false, fireEvents);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subNodes, subNodesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSubNodes: function (subNodesP) {
                            var _key_ = (subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._subNodes.containsKey_za3rmp$(_key_)) {
                                this._subNodes.put_wn2jw4$(_key_, subNodesP);
                                (subNodesP != null ? subNodesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_subNodes);
                            }
                        },
                        addSubNodes: function (subNodesP) {
                            this.internal_addSubNodes(subNodesP, true, true);
                        },
                        addAllSubNodes: function (subNodesP) {
                            this.internal_addAllSubNodes(subNodesP, true, true);
                        },
                        internal_addSubNodes: function (subNodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSubNodes(subNodesP);
                            if (setOpposite) {
                                (subNodesP != null ? subNodesP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_groups, this, false, fireEvents);
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subNodes, subNodesP, null));
                            }
                        },
                        internal_addAllSubNodes: function (subNodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = subNodesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSubNodes(el);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_groups, this, false, fireEvents);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = subNodesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSubNodes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subNodes, subNodesP, null));
                            }
                        },
                        removeSubNodes: function (subNodesP) {
                            this.internal_removeSubNodes(subNodesP, true, true);
                        },
                        removeAllSubNodes: function () {
                            this.internal_removeAllSubNodes(true, true);
                        },
                        internal_removeSubNodes: function (subNodesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._subNodes.size() !== 0 && this._subNodes.containsKey_za3rmp$((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = subNodesP.path();
                                this._subNodes.remove_za3rmp$((subNodesP != null ? subNodesP : Kotlin.throwNPE()).internalGetKey());
                                (subNodesP != null ? subNodesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_subNodes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subNodes, subNodesP, previousPathToBeRemoved));
                                }
                                if (setOpposite) {
                                    (subNodesP != null ? subNodesP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_groups, this, false, fireEvents);
                                }
                            }
                        },
                        internal_removeAllSubNodes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.subNodes) != null ? tmp$0 : Kotlin.throwNPE();
                            if (setOpposite) {
                                {
                                    var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        (el != null ? el : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_subNodes);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_groups, this, false, fireEvents);
                                    }
                                }
                            }
                            this._subNodes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subNodes, temp_els, null));
                            }
                        },
                        fragmentDictionary: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._fragmentDictionary.values());
                            },
                            set: function (fragmentDictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (fragmentDictionaryP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_fragmentDictionary(fragmentDictionaryP, true, true);
                            }
                        },
                        internal_fragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._fragmentDictionary.values(), fragmentDictionaryP)) {
                                var kmf_previousVal = this._fragmentDictionary;
                                this._fragmentDictionary.clear();
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._fragmentDictionary.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, el), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFragmentDictionary: function (fragmentDictionaryP) {
                            var _key_ = (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._fragmentDictionary.containsKey_za3rmp$(_key_)) {
                                this._fragmentDictionary.put_wn2jw4$(_key_, fragmentDictionaryP);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                        },
                        addFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        addAllFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addAllFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        internal_addFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFragmentDictionary(fragmentDictionaryP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        internal_addAllFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFragmentDictionary(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = fragmentDictionaryP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFragmentDictionary(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        removeFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_removeFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        removeAllFragmentDictionary: function () {
                            this.internal_removeAllFragmentDictionary(true, true);
                        },
                        internal_removeFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = fragmentDictionaryP.path();
                                this._fragmentDictionary.remove_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey());
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                ((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()) != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllFragmentDictionaryCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFragmentDictionary: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllFragmentDictionaryCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.fragmentDictionary) != null ? tmp$0 : Kotlin.throwNPE();
                            this._fragmentDictionary.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, temp_els, null));
                                this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                            }
                        },
                        typeDefinition: {
                            get: function () {
                                return this.$typeDefinition_48mgnl$;
                            },
                            set: function (typeDefinitionP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_typeDefinition(typeDefinitionP, true, true);
                            }
                        },
                        internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$typeDefinition_48mgnl$, typeDefinitionP)) {
                                var kmf_previousVal = this.$typeDefinition_48mgnl$;
                                if (typeDefinitionP != null) {
                                    ((typeDefinitionP != null ? typeDefinitionP : Kotlin.throwNPE()) != null ? typeDefinitionP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$typeDefinition_48mgnl$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                this.$typeDefinition_48mgnl$ = typeDefinitionP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_typeDefinition, typeDefinitionP, kmf_previousVal));
                                }
                            }
                        },
                        dictionary: {
                            get: function () {
                                return this.$dictionary_801d16$;
                            },
                            set: function (dictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionary(dictionaryP, true, true);
                            }
                        },
                        internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionary_801d16$, dictionaryP)) {
                                if (this.$dictionary_801d16$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionary_801d16$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryP != null) {
                                    (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                var kmf_previousVal = this.$dictionary_801d16$;
                                if (dictionaryP != null) {
                                    ((dictionaryP != null ? dictionaryP : Kotlin.throwNPE()) != null ? dictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionary_801d16$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                this.$dictionary_801d16$ = dictionaryP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionary, dictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_metaData) {
                                this.internal_metaData(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_started) {
                                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_typeDefinition(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionary(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFragmentDictionary();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$(value)) {
                                        var obj = this._fragmentDictionary.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._fragmentDictionary.remove_za3rmp$(value);
                                        this._fragmentDictionary.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_subNodes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSubNodes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.internal_removeAllSubNodes(setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._subNodes.size() !== 0 && this._subNodes.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._subNodes.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._subNodes.remove_za3rmp$(value);
                                        this._subNodes.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findFragmentDictionaryByID: function (key) {
                            return this._fragmentDictionary.get_za3rmp$(key);
                        },
                        findSubNodesByID: function (key) {
                            return this._subNodes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                var objFound = this.typeDefinition;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                var objFound_0 = this.dictionary;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                return this.findFragmentDictionaryByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_subNodes) {
                                return this.findSubNodesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionary, _.org.kevoree.util.Constants.org_kevoree_Dictionary);
                                this.internal_visit(visitor, this.dictionary, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary, _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary);
                                {
                                    var tmp$0 = this._fragmentDictionary.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._fragmentDictionary.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                this.internal_visit(visitor, this.typeDefinition, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_subNodes, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                {
                                    var tmp$1 = this._subNodes.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._subNodes.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_subNodes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_subNodes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.started, _.org.kevoree.util.Constants.Att_started, this);
                            visitor.visit(this.metaData, _.org.kevoree.util.Constants.Att_metaData, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Group;
                        }
                    }),
                    GroupTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.GroupType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_abyt0s$ = null;
                        this.$internal_containmentRefName_7uf86c$ = null;
                        this.$internal_unsetCmd_pvvwdz$ = null;
                        this.$internal_readOnlyElem_5sbm5z$ = false;
                        this.$internal_recursive_readOnlyElem_ukepe2$ = false;
                        this.$internal_inboundReferences_nizx0p$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_be3cej$ = false;
                        this.$internal_modelElementListeners_98kc98$ = null;
                        this.$internal_modelTreeListeners_5x6ahc$ = null;
                        this.$path_cache_ep7swe$ = null;
                        this.$key_cache_lou2so$ = null;
                        this.$name_7marjf$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_21ul1q$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_eefaxc$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_7micp2$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_gzbdck$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$dictionaryType_2y33ei$ = null;
                        this.$deployUnit_1vqy97$ = null;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.GroupTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_abyt0s$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_abyt0s$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_7uf86c$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_7uf86c$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_pvvwdz$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_pvvwdz$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_5sbm5z$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_5sbm5z$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_ukepe2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_ukepe2$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_nizx0p$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_nizx0p$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_be3cej$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_be3cej$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_98kc98$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_98kc98$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_5x6ahc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_5x6ahc$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_ep7swe$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_ep7swe$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_lou2so$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_lou2so$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_7marjf$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_7marjf$;
                                this.$name_7marjf$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_21ul1q$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_21ul1q$;
                                this.$version_21ul1q$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_eefaxc$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_eefaxc$;
                                this.$factoryBean_eefaxc$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_7micp2$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_7micp2$;
                                this.$bean_7micp2$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_gzbdck$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_gzbdck$;
                                this.$abstract_gzbdck$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_2y33ei$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_2y33ei$, dictionaryTypeP)) {
                                if (this.$dictionaryType_2y33ei$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_2y33ei$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_2y33ei$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_2y33ei$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_2y33ei$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_1vqy97$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_1vqy97$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_1vqy97$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_1vqy97$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_1vqy97$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$0 = this._superTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_GroupType;
                        }
                    }),
                    InstanceImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Instance, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_atfnfe$ = null;
                        this.$internal_containmentRefName_y35zoq$ = null;
                        this.$internal_unsetCmd_vhr633$ = null;
                        this.$internal_readOnlyElem_4kdsgf$ = false;
                        this.$internal_recursive_readOnlyElem_219qv8$ = false;
                        this.$internal_inboundReferences_wwppr1$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_s155ff$ = false;
                        this.$internal_modelElementListeners_q1vpta$ = null;
                        this.$internal_modelTreeListeners_w5x1zq$ = null;
                        this.$path_cache_4llyek$ = null;
                        this.$key_cache_9lzfj6$ = null;
                        this.$name_89emlt$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$metaData_968jsd$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$started_l9ool9$ = true;
                        this._fragmentDictionary = new Kotlin.PrimitiveHashMap();
                        this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                        this.$typeDefinition_18at2p$ = null;
                        this.$dictionary_792vae$ = null;
                    }, /** @lends _.org.kevoree.impl.InstanceImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_atfnfe$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_atfnfe$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_y35zoq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_y35zoq$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_vhr633$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_vhr633$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_4kdsgf$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_4kdsgf$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_219qv8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_219qv8$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_wwppr1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_wwppr1$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_s155ff$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_s155ff$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_q1vpta$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_q1vpta$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_w5x1zq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_w5x1zq$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_4llyek$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_4llyek$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_9lzfj6$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_9lzfj6$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.typeDefinition != null) {
                                var tmp$0;
                                (((tmp$0 = this.typeDefinition) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                this.typeDefinition = null;
                            }
                            if (this.dictionary != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionary) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                this.dictionary = null;
                            }
                            var tmp$2;
                            {
                                var tmp$3 = ((tmp$2 = this.fragmentDictionary) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$4;
                                ((tmp$4 = this.internal_unsetCmd) != null ? tmp$4 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_89emlt$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_89emlt$;
                                this.$name_89emlt$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        metaData: {
                            get: function () {
                                return this.$metaData_968jsd$;
                            },
                            set: function (iP) {
                                this.internal_metaData(iP, true);
                            }
                        },
                        internal_metaData: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.metaData)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$metaData_968jsd$;
                                this.$metaData_968jsd$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_metaData, this.metaData, kmf_previousVal));
                                }
                            }
                        },
                        started: {
                            get: function () {
                                return this.$started_l9ool9$;
                            },
                            set: function (iP) {
                                this.internal_started(iP, true);
                            }
                        },
                        internal_started: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.started)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$started_l9ool9$;
                                this.$started_l9ool9$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_started, this.started, kmf_previousVal));
                                }
                            }
                        },
                        fragmentDictionary: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._fragmentDictionary.values());
                            },
                            set: function (fragmentDictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (fragmentDictionaryP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_fragmentDictionary(fragmentDictionaryP, true, true);
                            }
                        },
                        internal_fragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._fragmentDictionary.values(), fragmentDictionaryP)) {
                                var kmf_previousVal = this._fragmentDictionary;
                                this._fragmentDictionary.clear();
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._fragmentDictionary.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, el), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFragmentDictionary: function (fragmentDictionaryP) {
                            var _key_ = (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._fragmentDictionary.containsKey_za3rmp$(_key_)) {
                                this._fragmentDictionary.put_wn2jw4$(_key_, fragmentDictionaryP);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP), _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                        },
                        addFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        addAllFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_addAllFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        internal_addFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFragmentDictionary(fragmentDictionaryP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        internal_addAllFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = fragmentDictionaryP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFragmentDictionary(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = fragmentDictionaryP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFragmentDictionary(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, null));
                            }
                        },
                        removeFragmentDictionary: function (fragmentDictionaryP) {
                            this.internal_removeFragmentDictionary(fragmentDictionaryP, true, true);
                        },
                        removeAllFragmentDictionary: function () {
                            this.internal_removeAllFragmentDictionary(true, true);
                        },
                        internal_removeFragmentDictionary: function (fragmentDictionaryP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = fragmentDictionaryP.path();
                                this._fragmentDictionary.remove_za3rmp$((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).internalGetKey());
                                (fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                ((fragmentDictionaryP != null ? fragmentDictionaryP : Kotlin.throwNPE()) != null ? fragmentDictionaryP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllFragmentDictionaryCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, fragmentDictionaryP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFragmentDictionary: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllFragmentDictionaryCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.fragmentDictionary) != null ? tmp$0 : Kotlin.throwNPE();
                            this._fragmentDictionary.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_fragmentDictionary, temp_els, null));
                                this.removeAllFragmentDictionaryCurrentlyProcessing = false;
                            }
                        },
                        typeDefinition: {
                            get: function () {
                                return this.$typeDefinition_18at2p$;
                            },
                            set: function (typeDefinitionP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_typeDefinition(typeDefinitionP, true, true);
                            }
                        },
                        internal_typeDefinition: function (typeDefinitionP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$typeDefinition_18at2p$, typeDefinitionP)) {
                                var kmf_previousVal = this.$typeDefinition_18at2p$;
                                if (typeDefinitionP != null) {
                                    ((typeDefinitionP != null ? typeDefinitionP : Kotlin.throwNPE()) != null ? typeDefinitionP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$typeDefinition_18at2p$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                }
                                this.$typeDefinition_18at2p$ = typeDefinitionP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_typeDefinition, typeDefinitionP, kmf_previousVal));
                                }
                            }
                        },
                        dictionary: {
                            get: function () {
                                return this.$dictionary_792vae$;
                            },
                            set: function (dictionaryP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionary(dictionaryP, true, true);
                            }
                        },
                        internal_dictionary: function (dictionaryP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionary_792vae$, dictionaryP)) {
                                if (this.$dictionary_792vae$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionary_792vae$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryP != null) {
                                    (dictionaryP != null ? dictionaryP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                var kmf_previousVal = this.$dictionary_792vae$;
                                if (dictionaryP != null) {
                                    ((dictionaryP != null ? dictionaryP : Kotlin.throwNPE()) != null ? dictionaryP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionary_792vae$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionary);
                                }
                                this.$dictionary_792vae$ = dictionaryP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionary, dictionaryP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_metaData) {
                                this.internal_metaData(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_started) {
                                this.internal_started(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_typeDefinition(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_typeDefinition(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionary(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionary(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFragmentDictionary(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFragmentDictionary();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._fragmentDictionary.size() !== 0 && this._fragmentDictionary.containsKey_za3rmp$(value)) {
                                        var obj = this._fragmentDictionary.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._fragmentDictionary.remove_za3rmp$(value);
                                        this._fragmentDictionary.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findFragmentDictionaryByID: function (key) {
                            return this._fragmentDictionary.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_typeDefinition) {
                                var objFound = this.typeDefinition;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionary) {
                                var objFound_0 = this.dictionary;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_fragmentDictionary) {
                                return this.findFragmentDictionaryByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionary, _.org.kevoree.util.Constants.org_kevoree_Dictionary);
                                this.internal_visit(visitor, this.dictionary, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionary);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary, _.org.kevoree.util.Constants.org_kevoree_FragmentDictionary);
                                {
                                    var tmp$0 = this._fragmentDictionary.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._fragmentDictionary.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_fragmentDictionary);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_fragmentDictionary);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                this.internal_visit(visitor, this.typeDefinition, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_typeDefinition);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_typeDefinition);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.started, _.org.kevoree.util.Constants.Att_started, this);
                            visitor.visit(this.metaData, _.org.kevoree.util.Constants.Att_metaData, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Instance;
                        }
                    }),
                    MBindingImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.MBinding, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_z1m2g3$ = null;
                        this.$internal_containmentRefName_eftcj$ = null;
                        this.$internal_unsetCmd_w1bnki$ = null;
                        this.$internal_readOnlyElem_u2nvzi$ = false;
                        this.$internal_recursive_readOnlyElem_wmnhfj$ = false;
                        this.$internal_inboundReferences_48ffeo$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_9zuf2a$ = false;
                        this.$internal_modelElementListeners_ovnd8r$ = null;
                        this.$internal_modelTreeListeners_2bor1j$ = null;
                        this.$path_cache_1c2e9j$ = null;
                        this.$key_cache_3y1q8x$ = null;
                        this.$generated_KMF_ID_4131jt$ = '' + Math.random() + (new Date()).getTime();
                        this.$port_xzicf2$ = null;
                        this.$hub_5og40c$ = null;
                    }, /** @lends _.org.kevoree.impl.MBindingImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_z1m2g3$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_z1m2g3$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_eftcj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_eftcj$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_w1bnki$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_w1bnki$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_u2nvzi$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_u2nvzi$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_wmnhfj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_wmnhfj$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_48ffeo$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_48ffeo$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_9zuf2a$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_9zuf2a$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_ovnd8r$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_ovnd8r$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_2bor1j$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_2bor1j$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_1c2e9j$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_1c2e9j$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_3y1q8x$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_3y1q8x$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.port != null) {
                                var tmp$0;
                                (((tmp$0 = this.port) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_port);
                                this.port = null;
                            }
                            if (this.hub != null) {
                                var tmp$1;
                                (((tmp$1 = this.hub) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_hub);
                                this.hub = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_4131jt$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_4131jt$;
                                this.$generated_KMF_ID_4131jt$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        port: {
                            get: function () {
                                return this.$port_xzicf2$;
                            },
                            set: function (portP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_port(portP, true, true);
                            }
                        },
                        internal_port: function (portP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$port_xzicf2$, portP)) {
                                if (setOpposite) {
                                    if (this.$port_xzicf2$ != null) {
                                        var tmp$0;
                                        ((tmp$0 = this.$port_xzicf2$) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_bindings, this, false, fireEvents);
                                    }
                                    if (portP != null) {
                                        portP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_bindings, this, false, fireEvents);
                                    }
                                }
                                var kmf_previousVal = this.$port_xzicf2$;
                                if (portP != null) {
                                    ((portP != null ? portP : Kotlin.throwNPE()) != null ? portP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_port);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$port_xzicf2$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_port);
                                }
                                this.$port_xzicf2$ = portP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_port, portP, kmf_previousVal));
                                }
                            }
                        },
                        hub: {
                            get: function () {
                                return this.$hub_5og40c$;
                            },
                            set: function (hubP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_hub(hubP, true, true);
                            }
                        },
                        internal_hub: function (hubP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$hub_5og40c$, hubP)) {
                                if (setOpposite) {
                                    if (this.$hub_5og40c$ != null) {
                                        var tmp$0;
                                        ((tmp$0 = this.$hub_5og40c$) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_bindings, this, false, fireEvents);
                                    }
                                    if (hubP != null) {
                                        hubP.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.util.Constants.Ref_bindings, this, false, fireEvents);
                                    }
                                }
                                var kmf_previousVal = this.$hub_5og40c$;
                                if (hubP != null) {
                                    ((hubP != null ? hubP : Kotlin.throwNPE()) != null ? hubP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_hub);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$hub_5og40c$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_hub);
                                }
                                this.$hub_5og40c$ = hubP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_hub, hubP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_port) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_port(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_port(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_port(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_hub) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_hub(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_hub(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_hub(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_port) {
                                var objFound = this.port;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_hub) {
                                var objFound_0 = this.hub;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_port, _.org.kevoree.util.Constants.org_kevoree_Port);
                                this.internal_visit(visitor, this.port, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_port);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_port);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_hub, _.org.kevoree.util.Constants.org_kevoree_Channel);
                                this.internal_visit(visitor, this.hub, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_hub);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_hub);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_MBinding;
                        }
                    }),
                    MessagePortTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.MessagePortType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_hbz6o3$ = null;
                        this.$internal_containmentRefName_3jq7sj$ = null;
                        this.$internal_unsetCmd_l6u4j6$ = null;
                        this.$internal_readOnlyElem_ev9acy$ = false;
                        this.$internal_recursive_readOnlyElem_kihxen$ = false;
                        this.$internal_inboundReferences_kva28w$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_icn5gi$ = false;
                        this.$internal_modelElementListeners_z33frp$ = null;
                        this.$internal_modelTreeListeners_5gz5hj$ = null;
                        this.$path_cache_2nrm5l$ = null;
                        this.$key_cache_ta1ta9$ = null;
                        this.$name_hyjd84$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_p0mtmf$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_fnz66f$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_hyqydr$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_fc4ja5$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$synchrone_5ytlts$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$dictionaryType_f4566n$ = null;
                        this.$deployUnit_fh8gss$ = null;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                        this._filters = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.MessagePortTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_hbz6o3$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_hbz6o3$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_3jq7sj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_3jq7sj$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_l6u4j6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_l6u4j6$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_ev9acy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_ev9acy$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_kihxen$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_kihxen$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_kva28w$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_kva28w$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_icn5gi$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_icn5gi$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_z33frp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_z33frp$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_5gz5hj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_5gz5hj$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_2nrm5l$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_2nrm5l$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_ta1ta9$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_ta1ta9$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            this.removeAllFilters();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_hyjd84$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_hyjd84$;
                                this.$name_hyjd84$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_p0mtmf$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_p0mtmf$;
                                this.$version_p0mtmf$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_fnz66f$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_fnz66f$;
                                this.$factoryBean_fnz66f$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_hyqydr$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_hyqydr$;
                                this.$bean_hyqydr$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_fc4ja5$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_fc4ja5$;
                                this.$abstract_fc4ja5$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        synchrone: {
                            get: function () {
                                return this.$synchrone_5ytlts$;
                            },
                            set: function (iP) {
                                this.internal_synchrone(iP, true);
                            }
                        },
                        internal_synchrone: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.synchrone)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$synchrone_5ytlts$;
                                this.$synchrone_5ytlts$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_synchrone, this.synchrone, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_f4566n$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_f4566n$, dictionaryTypeP)) {
                                if (this.$dictionaryType_f4566n$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_f4566n$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_f4566n$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_f4566n$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_f4566n$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_fh8gss$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_fh8gss$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_fh8gss$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_fh8gss$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_fh8gss$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        filters: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._filters.values());
                            },
                            set: function (filtersP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (filtersP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_filters(filtersP, true, true);
                            }
                        },
                        internal_filters: function (filtersP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._filters.values(), filtersP)) {
                                var kmf_previousVal = this._filters;
                                this._filters.clear();
                                {
                                    var tmp$0 = filtersP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._filters.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_filters);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_filters, filtersP, kmf_previousVal));
                                }
                            }
                        },
                        doAddFilters: function (filtersP) {
                            var _key_ = (filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._filters.containsKey_za3rmp$(_key_)) {
                                this._filters.put_wn2jw4$(_key_, filtersP);
                                (filtersP != null ? filtersP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_filters);
                            }
                        },
                        addFilters: function (filtersP) {
                            this.internal_addFilters(filtersP, true, true);
                        },
                        addAllFilters: function (filtersP) {
                            this.internal_addAllFilters(filtersP, true, true);
                        },
                        internal_addFilters: function (filtersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddFilters(filtersP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_filters, filtersP, null));
                            }
                        },
                        internal_addAllFilters: function (filtersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = filtersP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddFilters(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = filtersP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddFilters(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_filters, filtersP, null));
                            }
                        },
                        removeFilters: function (filtersP) {
                            this.internal_removeFilters(filtersP, true, true);
                        },
                        removeAllFilters: function () {
                            this.internal_removeAllFilters(true, true);
                        },
                        internal_removeFilters: function (filtersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._filters.size() !== 0 && this._filters.containsKey_za3rmp$((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = filtersP.path();
                                this._filters.remove_za3rmp$((filtersP != null ? filtersP : Kotlin.throwNPE()).internalGetKey());
                                (filtersP != null ? filtersP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_filters);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_filters, filtersP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllFilters: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.filters) != null ? tmp$0 : Kotlin.throwNPE();
                            this._filters.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_filters, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_synchrone) {
                                this.internal_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_filters) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeFilters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllFilters();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._filters.size() !== 0 && this._filters.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._filters.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._filters.remove_za3rmp$(value);
                                        this._filters.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findFiltersByID: function (key) {
                            return this._filters.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_filters) {
                                return this.findFiltersByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$0 = this._superTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_filters, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                {
                                    var tmp$1 = this._filters.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._filters.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_filters);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_filters);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.synchrone, _.org.kevoree.util.Constants.Att_synchrone, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_MessagePortType;
                        }
                    }),
                    NamespaceImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Namespace, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_skx9jq$ = null;
                        this.$internal_containmentRefName_k4r4ka$ = null;
                        this.$internal_unsetCmd_xkxarv$ = null;
                        this.$internal_readOnlyElem_ryk423$ = false;
                        this.$internal_recursive_readOnlyElem_od3bc$ = false;
                        this.$internal_inboundReferences_9gbeqh$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_q7bgnd$ = false;
                        this.$internal_modelElementListeners_w3gky$ = null;
                        this.$internal_modelTreeListeners_m2029a$ = null;
                        this.$path_cache_s6xjdc$ = null;
                        this.$key_cache_7nu0nu$ = null;
                        this.$name_13dwh9$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._elements = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.NamespaceImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_skx9jq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_skx9jq$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_k4r4ka$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_k4r4ka$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_xkxarv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_xkxarv$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_ryk423$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_ryk423$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_od3bc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_od3bc$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_9gbeqh$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_9gbeqh$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_q7bgnd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_q7bgnd$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_w3gky$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_w3gky$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_m2029a$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_m2029a$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_s6xjdc$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_s6xjdc$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_7nu0nu$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_7nu0nu$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllElements();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_13dwh9$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_13dwh9$;
                                this.$name_13dwh9$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        elements: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._elements.values());
                            },
                            set: function (elementsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (elementsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_elements(elementsP, true, true);
                            }
                        },
                        internal_elements: function (elementsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._elements.values(), elementsP)) {
                                var kmf_previousVal = this._elements;
                                this._elements.clear();
                                {
                                    var tmp$0 = elementsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._elements.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_elements);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_elements, elementsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddElements: function (elementsP) {
                            var _key_ = (elementsP != null ? elementsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._elements.containsKey_za3rmp$(_key_)) {
                                this._elements.put_wn2jw4$(_key_, elementsP);
                                (elementsP != null ? elementsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_elements);
                            }
                        },
                        addElements: function (elementsP) {
                            this.internal_addElements(elementsP, true, true);
                        },
                        addAllElements: function (elementsP) {
                            this.internal_addAllElements(elementsP, true, true);
                        },
                        internal_addElements: function (elementsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddElements(elementsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_elements, elementsP, null));
                            }
                        },
                        internal_addAllElements: function (elementsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = elementsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddElements(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = elementsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddElements(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_elements, elementsP, null));
                            }
                        },
                        removeElements: function (elementsP) {
                            this.internal_removeElements(elementsP, true, true);
                        },
                        removeAllElements: function () {
                            this.internal_removeAllElements(true, true);
                        },
                        internal_removeElements: function (elementsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._elements.size() !== 0 && this._elements.containsKey_za3rmp$((elementsP != null ? elementsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = elementsP.path();
                                this._elements.remove_za3rmp$((elementsP != null ? elementsP : Kotlin.throwNPE()).internalGetKey());
                                (elementsP != null ? elementsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_elements);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_elements, elementsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllElements: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.elements) != null ? tmp$0 : Kotlin.throwNPE();
                            this._elements.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_elements, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_elements) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addElements(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllElements(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeElements(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllElements();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._elements.size() !== 0 && this._elements.containsKey_za3rmp$(value)) {
                                        var obj = this._elements.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._elements.remove_za3rmp$(value);
                                        this._elements.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findElementsByID: function (key) {
                            return this._elements.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_elements) {
                                return this.findElementsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_elements, _.org.kevoree.util.Constants.org_kevoree_Instance);
                                {
                                    var tmp$0 = this._elements.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._elements.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_elements);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_elements);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Namespace;
                        }
                    }),
                    NetworkInfoImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.NetworkInfo, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_keo2h5$ = null;
                        this.$internal_containmentRefName_wec9a1$ = null;
                        this.$internal_unsetCmd_px0nvw$ = null;
                        this.$internal_readOnlyElem_rpdj9w$ = false;
                        this.$internal_recursive_readOnlyElem_vcdys9$ = false;
                        this.$internal_inboundReferences_oir15y$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_99g4k8$ = false;
                        this.$internal_modelElementListeners_tf4qpd$ = null;
                        this.$internal_modelTreeListeners_ybl6z1$ = null;
                        this.$path_cache_kbu46n$ = null;
                        this.$key_cache_mz3tob$ = null;
                        this.$name_keyy5q$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._values = new Kotlin.PrimitiveHashMap();
                        this.removeAllValuesCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.NetworkInfoImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_keo2h5$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_keo2h5$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_wec9a1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_wec9a1$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_px0nvw$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_px0nvw$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_rpdj9w$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_rpdj9w$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_vcdys9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_vcdys9$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_oir15y$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_oir15y$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_99g4k8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_99g4k8$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_tf4qpd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_tf4qpd$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_ybl6z1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_ybl6z1$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_kbu46n$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_kbu46n$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_mz3tob$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_mz3tob$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_keyy5q$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_keyy5q$;
                                this.$name_keyy5q$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        values: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._values.values());
                            },
                            set: function (valuesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (valuesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_values(valuesP, true, true);
                            }
                        },
                        internal_values: function (valuesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._values.values(), valuesP)) {
                                var kmf_previousVal = this._values;
                                this._values.clear();
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._values.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, el), _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddValues: function (valuesP) {
                            var _key_ = (valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._values.containsKey_za3rmp$(_key_)) {
                                this._values.put_wn2jw4$(_key_, valuesP);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_values, valuesP), _.org.kevoree.util.Constants.Ref_values);
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                            }
                        },
                        addValues: function (valuesP) {
                            this.internal_addValues(valuesP, true, true);
                        },
                        addAllValues: function (valuesP) {
                            this.internal_addAllValues(valuesP, true, true);
                        },
                        internal_addValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddValues(valuesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        internal_addAllValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = valuesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddValues(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = valuesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddValues(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, null));
                            }
                        },
                        removeValues: function (valuesP) {
                            this.internal_removeValues(valuesP, true, true);
                        },
                        removeAllValues: function () {
                            this.internal_removeAllValues(true, true);
                        },
                        internal_removeValues: function (valuesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._values.size() !== 0 && this._values.containsKey_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = valuesP.path();
                                this._values.remove_za3rmp$((valuesP != null ? valuesP : Kotlin.throwNPE()).internalGetKey());
                                (valuesP != null ? valuesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_values);
                                ((valuesP != null ? valuesP : Kotlin.throwNPE()) != null ? valuesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllValuesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, valuesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllValues: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllValuesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.values) != null ? tmp$0 : Kotlin.throwNPE();
                            this._values.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_values, temp_els, null));
                                this.removeAllValuesCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_values) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeValues(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllValues();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._values.size() !== 0 && this._values.containsKey_za3rmp$(value)) {
                                        var obj = this._values.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._values.remove_za3rmp$(value);
                                        this._values.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findValuesByID: function (key) {
                            return this._values.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_values) {
                                return this.findValuesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_values, _.org.kevoree.util.Constants.org_kevoree_NetworkProperty);
                                {
                                    var tmp$0 = this._values.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._values.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_values);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_values);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_NetworkInfo;
                        }
                    }),
                    NetworkPropertyImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.NetworkProperty, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_hetr2$ = null;
                        this.$internal_containmentRefName_de3hw2$ = null;
                        this.$internal_unsetCmd_2in25p$ = null;
                        this.$internal_readOnlyElem_hy5afn$ = false;
                        this.$internal_recursive_readOnlyElem_flftz4$ = false;
                        this.$internal_inboundReferences_koxd5t$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_a3fgxr$ = false;
                        this.$internal_modelElementListeners_1ezqy2$ = null;
                        this.$internal_modelTreeListeners_fbcfl2$ = null;
                        this.$path_cache_wr18ew$ = null;
                        this.$key_cache_gohnc2$ = null;
                        this.$name_noxws5$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$value_o1oc0f$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                    }, /** @lends _.org.kevoree.impl.NetworkPropertyImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_hetr2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_hetr2$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_de3hw2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_de3hw2$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_2in25p$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_2in25p$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_hy5afn$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_hy5afn$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_flftz4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_flftz4$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_koxd5t$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_koxd5t$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_a3fgxr$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_a3fgxr$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_1ezqy2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_1ezqy2$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_fbcfl2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_fbcfl2$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_wr18ew$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_wr18ew$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_gohnc2$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_gohnc2$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_noxws5$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_noxws5$;
                                this.$name_noxws5$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        value: {
                            get: function () {
                                return this.$value_o1oc0f$;
                            },
                            set: function (iP) {
                                this.internal_value(iP, true);
                            }
                        },
                        internal_value: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.value)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$value_o1oc0f$;
                                this.$value_o1oc0f$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_value, this.value, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_value) {
                                this.internal_value(value, fireEvents);
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.value, _.org.kevoree.util.Constants.Att_value, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_NetworkProperty;
                        }
                    }),
                    NodeLinkImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.NodeLink, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_infpr3$ = null;
                        this.$internal_containmentRefName_a7astt$ = null;
                        this.$internal_unsetCmd_17glyi$ = null;
                        this.$internal_readOnlyElem_qj0uty$ = false;
                        this.$internal_recursive_readOnlyElem_uggb3x$ = false;
                        this.$internal_inboundReferences_arkrno$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_squuwy$ = false;
                        this.$internal_modelElementListeners_kovhx5$ = null;
                        this.$internal_modelTreeListeners_8a1v4t$ = null;
                        this.$path_cache_g85ybf$ = null;
                        this.$key_cache_169m1x$ = null;
                        this.$networkType_4qvxmz$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$estimatedRate_dik64h$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$lastCheck_9iwotn$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$zoneID_e4j064$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$generated_KMF_ID_2t7b31$ = '' + Math.random() + (new Date()).getTime();
                        this._networkProperties = new Kotlin.PrimitiveHashMap();
                        this.removeAllNetworkPropertiesCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.NodeLinkImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_infpr3$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_infpr3$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_a7astt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_a7astt$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_17glyi$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_17glyi$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_qj0uty$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_qj0uty$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_uggb3x$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_uggb3x$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_arkrno$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_arkrno$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_squuwy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_squuwy$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_kovhx5$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_kovhx5$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_8a1v4t$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_8a1v4t$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_g85ybf$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_g85ybf$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_169m1x$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_169m1x$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.networkProperties) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        networkType: {
                            get: function () {
                                return this.$networkType_4qvxmz$;
                            },
                            set: function (iP) {
                                this.internal_networkType(iP, true);
                            }
                        },
                        internal_networkType: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.networkType)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$networkType_4qvxmz$;
                                this.$networkType_4qvxmz$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_networkType, this.networkType, kmf_previousVal));
                                }
                            }
                        },
                        estimatedRate: {
                            get: function () {
                                return this.$estimatedRate_dik64h$;
                            },
                            set: function (iP) {
                                this.internal_estimatedRate(iP, true);
                            }
                        },
                        internal_estimatedRate: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.estimatedRate) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$estimatedRate_dik64h$;
                                this.$estimatedRate_dik64h$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_estimatedRate, this.estimatedRate, kmf_previousVal));
                                }
                            }
                        },
                        lastCheck: {
                            get: function () {
                                return this.$lastCheck_9iwotn$;
                            },
                            set: function (iP) {
                                this.internal_lastCheck(iP, true);
                            }
                        },
                        internal_lastCheck: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.lastCheck)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$lastCheck_9iwotn$;
                                this.$lastCheck_9iwotn$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_lastCheck, this.lastCheck, kmf_previousVal));
                                }
                            }
                        },
                        zoneID: {
                            get: function () {
                                return this.$zoneID_e4j064$;
                            },
                            set: function (iP) {
                                this.internal_zoneID(iP, true);
                            }
                        },
                        internal_zoneID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.zoneID)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$zoneID_e4j064$;
                                this.$zoneID_e4j064$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_zoneID, this.zoneID, kmf_previousVal));
                                }
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_2t7b31$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_2t7b31$;
                                this.$generated_KMF_ID_2t7b31$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        networkProperties: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._networkProperties.values());
                            },
                            set: function (networkPropertiesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (networkPropertiesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_networkProperties(networkPropertiesP, true, true);
                            }
                        },
                        internal_networkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._networkProperties.values(), networkPropertiesP)) {
                                var kmf_previousVal = this._networkProperties;
                                this._networkProperties.clear();
                                {
                                    var tmp$0 = networkPropertiesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._networkProperties.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_networkProperties);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_networkProperties, el), _.org.kevoree.util.Constants.Ref_networkProperties);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkProperties, networkPropertiesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddNetworkProperties: function (networkPropertiesP) {
                            var _key_ = (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._networkProperties.containsKey_za3rmp$(_key_)) {
                                this._networkProperties.put_wn2jw4$(_key_, networkPropertiesP);
                                (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_networkProperties, networkPropertiesP), _.org.kevoree.util.Constants.Ref_networkProperties);
                                (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_networkProperties);
                            }
                        },
                        addNetworkProperties: function (networkPropertiesP) {
                            this.internal_addNetworkProperties(networkPropertiesP, true, true);
                        },
                        addAllNetworkProperties: function (networkPropertiesP) {
                            this.internal_addAllNetworkProperties(networkPropertiesP, true, true);
                        },
                        internal_addNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddNetworkProperties(networkPropertiesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkProperties, networkPropertiesP, null));
                            }
                        },
                        internal_addAllNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = networkPropertiesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddNetworkProperties(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = networkPropertiesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddNetworkProperties(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkProperties, networkPropertiesP, null));
                            }
                        },
                        removeNetworkProperties: function (networkPropertiesP) {
                            this.internal_removeNetworkProperties(networkPropertiesP, true, true);
                        },
                        removeAllNetworkProperties: function () {
                            this.internal_removeAllNetworkProperties(true, true);
                        },
                        internal_removeNetworkProperties: function (networkPropertiesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._networkProperties.size() !== 0 && this._networkProperties.containsKey_za3rmp$((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = networkPropertiesP.path();
                                this._networkProperties.remove_za3rmp$((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).internalGetKey());
                                (networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_networkProperties);
                                ((networkPropertiesP != null ? networkPropertiesP : Kotlin.throwNPE()) != null ? networkPropertiesP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllNetworkPropertiesCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkProperties, networkPropertiesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllNetworkProperties: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllNetworkPropertiesCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.networkProperties) != null ? tmp$0 : Kotlin.throwNPE();
                            this._networkProperties.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_networkProperties, temp_els, null));
                                this.removeAllNetworkPropertiesCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_networkType) {
                                this.internal_networkType(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_estimatedRate) {
                                this.internal_estimatedRate(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_lastCheck) {
                                this.internal_lastCheck(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_zoneID) {
                                this.internal_zoneID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_networkProperties) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeNetworkProperties(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllNetworkProperties();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._networkProperties.size() !== 0 && this._networkProperties.containsKey_za3rmp$(value)) {
                                        var obj = this._networkProperties.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._networkProperties.remove_za3rmp$(value);
                                        this._networkProperties.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findNetworkPropertiesByID: function (key) {
                            return this._networkProperties.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_networkProperties) {
                                return this.findNetworkPropertiesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_networkProperties, _.org.kevoree.util.Constants.org_kevoree_NetworkProperty);
                                {
                                    var tmp$0 = this._networkProperties.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._networkProperties.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_networkProperties);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_networkProperties);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.estimatedRate, _.org.kevoree.util.Constants.Att_estimatedRate, this);
                            visitor.visit(this.networkType, _.org.kevoree.util.Constants.Att_networkType, this);
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                            visitor.visit(this.lastCheck, _.org.kevoree.util.Constants.Att_lastCheck, this);
                            visitor.visit(this.zoneID, _.org.kevoree.util.Constants.Att_zoneID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_NodeLink;
                        }
                    }),
                    NodeNetworkImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.NodeNetwork, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_764wc9$ = null;
                        this.$internal_containmentRefName_3w2ii1$ = null;
                        this.$internal_unsetCmd_ktwvcs$ = null;
                        this.$internal_readOnlyElem_lgskck$ = false;
                        this.$internal_recursive_readOnlyElem_1uhqnd$ = false;
                        this.$internal_inboundReferences_kuvqae$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_bh6yoo$ = false;
                        this.$internal_modelElementListeners_jncza7$ = null;
                        this.$internal_modelTreeListeners_5tbg71$ = null;
                        this.$path_cache_qlpnhd$ = null;
                        this.$key_cache_js64vp$ = null;
                        this.$generated_KMF_ID_4e3ipv$ = '' + Math.random() + (new Date()).getTime();
                        this.$initBy_7i17gi$ = null;
                        this._link = new Kotlin.PrimitiveHashMap();
                        this.removeAllLinkCurrentlyProcessing = false;
                        this.$target_2hj6rc$ = null;
                    }, /** @lends _.org.kevoree.impl.NodeNetworkImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_764wc9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_764wc9$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_3w2ii1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_3w2ii1$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_ktwvcs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_ktwvcs$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_lgskck$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_lgskck$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_1uhqnd$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_1uhqnd$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_kuvqae$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_kuvqae$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_bh6yoo$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_bh6yoo$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_jncza7$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_jncza7$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_5tbg71$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_5tbg71$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_qlpnhd$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_qlpnhd$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_js64vp$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_js64vp$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.link) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            if (this.initBy != null) {
                                var tmp$2;
                                (((tmp$2 = this.initBy) != null ? tmp$2 : Kotlin.throwNPE()) != null ? tmp$2 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_initBy);
                                this.initBy = null;
                            }
                            if (this.target != null) {
                                var tmp$3;
                                (((tmp$3 = this.target) != null ? tmp$3 : Kotlin.throwNPE()) != null ? tmp$3 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_target);
                                this.target = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$4;
                                ((tmp$4 = this.internal_unsetCmd) != null ? tmp$4 : Kotlin.throwNPE()).run();
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_4e3ipv$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_4e3ipv$;
                                this.$generated_KMF_ID_4e3ipv$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        initBy: {
                            get: function () {
                                return this.$initBy_7i17gi$;
                            },
                            set: function (initByP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_initBy(initByP, true, true);
                            }
                        },
                        internal_initBy: function (initByP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$initBy_7i17gi$, initByP)) {
                                var kmf_previousVal = this.$initBy_7i17gi$;
                                if (initByP != null) {
                                    ((initByP != null ? initByP : Kotlin.throwNPE()) != null ? initByP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_initBy);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$initBy_7i17gi$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_initBy);
                                }
                                this.$initBy_7i17gi$ = initByP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_initBy, initByP, kmf_previousVal));
                                }
                            }
                        },
                        link: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._link.values());
                            },
                            set: function (linkP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (linkP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_link(linkP, true, true);
                            }
                        },
                        internal_link: function (linkP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._link.values(), linkP)) {
                                var kmf_previousVal = this._link;
                                this._link.clear();
                                {
                                    var tmp$0 = linkP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._link.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_link);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_link, el), _.org.kevoree.util.Constants.Ref_link);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_link, linkP, kmf_previousVal));
                                }
                            }
                        },
                        doAddLink: function (linkP) {
                            var _key_ = (linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._link.containsKey_za3rmp$(_key_)) {
                                this._link.put_wn2jw4$(_key_, linkP);
                                (linkP != null ? linkP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_link, linkP), _.org.kevoree.util.Constants.Ref_link);
                                (linkP != null ? linkP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_link);
                            }
                        },
                        addLink: function (linkP) {
                            this.internal_addLink(linkP, true, true);
                        },
                        addAllLink: function (linkP) {
                            this.internal_addAllLink(linkP, true, true);
                        },
                        internal_addLink: function (linkP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddLink(linkP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_link, linkP, null));
                            }
                        },
                        internal_addAllLink: function (linkP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = linkP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddLink(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = linkP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddLink(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_link, linkP, null));
                            }
                        },
                        removeLink: function (linkP) {
                            this.internal_removeLink(linkP, true, true);
                        },
                        removeAllLink: function () {
                            this.internal_removeAllLink(true, true);
                        },
                        internal_removeLink: function (linkP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._link.size() !== 0 && this._link.containsKey_za3rmp$((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = linkP.path();
                                this._link.remove_za3rmp$((linkP != null ? linkP : Kotlin.throwNPE()).internalGetKey());
                                (linkP != null ? linkP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_link);
                                ((linkP != null ? linkP : Kotlin.throwNPE()) != null ? linkP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllLinkCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_link, linkP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllLink: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllLinkCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.link) != null ? tmp$0 : Kotlin.throwNPE();
                            this._link.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_link, temp_els, null));
                                this.removeAllLinkCurrentlyProcessing = false;
                            }
                        },
                        target: {
                            get: function () {
                                return this.$target_2hj6rc$;
                            },
                            set: function (targetP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_target(targetP, true, true);
                            }
                        },
                        internal_target: function (targetP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$target_2hj6rc$, targetP)) {
                                var kmf_previousVal = this.$target_2hj6rc$;
                                if (targetP != null) {
                                    ((targetP != null ? targetP : Kotlin.throwNPE()) != null ? targetP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_target);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$target_2hj6rc$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_target);
                                }
                                this.$target_2hj6rc$ = targetP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_target, targetP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_link) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeLink(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllLink();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._link.size() !== 0 && this._link.containsKey_za3rmp$(value)) {
                                        var obj = this._link.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._link.remove_za3rmp$(value);
                                        this._link.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_initBy) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_initBy(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_initBy(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_initBy(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_target) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_target(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_target(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_target(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findLinkByID: function (key) {
                            return this._link.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_link) {
                                return this.findLinkByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_initBy) {
                                var objFound = this.initBy;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_target) {
                                var objFound_0 = this.target;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_link, _.org.kevoree.util.Constants.org_kevoree_NodeLink);
                                {
                                    var tmp$0 = this._link.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._link.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_link);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_link);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_initBy, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                this.internal_visit(visitor, this.initBy, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_initBy);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_initBy);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_target, _.org.kevoree.util.Constants.org_kevoree_ContainerNode);
                                this.internal_visit(visitor, this.target, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_target);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_target);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_NodeNetwork;
                        }
                    }),
                    NodeTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.NodeType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_gxuzfj$ = null;
                        this.$internal_containmentRefName_j0daa7$ = null;
                        this.$internal_unsetCmd_x7k7oq$ = null;
                        this.$internal_readOnlyElem_yh9u3u$ = false;
                        this.$internal_recursive_readOnlyElem_b2xs77$ = false;
                        this.$internal_inboundReferences_n5xt8k$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_hhai0u$ = false;
                        this.$internal_modelElementListeners_ze1rjt$ = null;
                        this.$internal_modelTreeListeners_kxm7z7$ = null;
                        this.$path_cache_c8tlx7$ = null;
                        this.$key_cache_a5jobf$ = null;
                        this.$name_qycue0$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_fgcjqd$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_jhj999$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_qykfjn$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_8lfy9r$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$dictionaryType_mhkxfx$ = null;
                        this.$deployUnit_kn8q0$ = null;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.NodeTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_gxuzfj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_gxuzfj$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_j0daa7$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_j0daa7$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_x7k7oq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_x7k7oq$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_yh9u3u$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_yh9u3u$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_b2xs77$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_b2xs77$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_n5xt8k$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_n5xt8k$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_hhai0u$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_hhai0u$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_ze1rjt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_ze1rjt$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_kxm7z7$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_kxm7z7$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_c8tlx7$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_c8tlx7$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_a5jobf$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_a5jobf$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$2;
                                ((tmp$2 = this.internal_unsetCmd) != null ? tmp$2 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_qycue0$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_qycue0$;
                                this.$name_qycue0$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_fgcjqd$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_fgcjqd$;
                                this.$version_fgcjqd$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_jhj999$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_jhj999$;
                                this.$factoryBean_jhj999$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_qykfjn$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_qykfjn$;
                                this.$bean_qykfjn$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_8lfy9r$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_8lfy9r$;
                                this.$abstract_8lfy9r$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_mhkxfx$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_mhkxfx$, dictionaryTypeP)) {
                                if (this.$dictionaryType_mhkxfx$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_mhkxfx$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_mhkxfx$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_mhkxfx$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_mhkxfx$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_kn8q0$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_kn8q0$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_kn8q0$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_kn8q0$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_kn8q0$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$0 = this._superTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_NodeType;
                        }
                    }),
                    OperationImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Operation, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_pqk4f2$ = null;
                        this.$internal_containmentRefName_27os7i$ = null;
                        this.$internal_unsetCmd_5vpuxj$ = null;
                        this.$internal_readOnlyElem_z56mjb$ = false;
                        this.$internal_recursive_readOnlyElem_gorlz8$ = false;
                        this.$internal_inboundReferences_201nfp$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_czmfib$ = false;
                        this.$internal_modelElementListeners_cwp63q$ = null;
                        this.$internal_modelTreeListeners_44xpwi$ = null;
                        this.$path_cache_arte78$ = null;
                        this.$key_cache_ym6fq2$ = null;
                        this.$name_p49yk9$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._parameters = new Kotlin.PrimitiveHashMap();
                        this.removeAllParametersCurrentlyProcessing = false;
                        this.$returnType_dn3q2u$ = null;
                    }, /** @lends _.org.kevoree.impl.OperationImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_pqk4f2$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_pqk4f2$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_27os7i$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_27os7i$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_5vpuxj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_5vpuxj$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_z56mjb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_z56mjb$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_gorlz8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_gorlz8$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_201nfp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_201nfp$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_czmfib$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_czmfib$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_cwp63q$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_cwp63q$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_44xpwi$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_44xpwi$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_arte78$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_arte78$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_ym6fq2$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_ym6fq2$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            var tmp$0;
                            {
                                var tmp$1 = ((tmp$0 = this.parameters) != null ? tmp$0 : Kotlin.throwNPE()).iterator();
                                while (tmp$1.hasNext()) {
                                    var el = tmp$1.next();
                                    el.delete();
                                }
                            }
                            if (this.returnType != null) {
                                var tmp$2;
                                (((tmp$2 = this.returnType) != null ? tmp$2 : Kotlin.throwNPE()) != null ? tmp$2 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_returnType);
                                this.returnType = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$3;
                                ((tmp$3 = this.internal_unsetCmd) != null ? tmp$3 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_p49yk9$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_p49yk9$;
                                this.$name_p49yk9$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        parameters: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._parameters.values());
                            },
                            set: function (parametersP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (parametersP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_parameters(parametersP, true, true);
                            }
                        },
                        internal_parameters: function (parametersP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._parameters.values(), parametersP)) {
                                var kmf_previousVal = this._parameters;
                                this._parameters.clear();
                                {
                                    var tmp$0 = parametersP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._parameters.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_parameters);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_parameters, el), _.org.kevoree.util.Constants.Ref_parameters);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_parameters, parametersP, kmf_previousVal));
                                }
                            }
                        },
                        doAddParameters: function (parametersP) {
                            var _key_ = (parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._parameters.containsKey_za3rmp$(_key_)) {
                                this._parameters.put_wn2jw4$(_key_, parametersP);
                                (parametersP != null ? parametersP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_parameters, parametersP), _.org.kevoree.util.Constants.Ref_parameters);
                                (parametersP != null ? parametersP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_parameters);
                            }
                        },
                        addParameters: function (parametersP) {
                            this.internal_addParameters(parametersP, true, true);
                        },
                        addAllParameters: function (parametersP) {
                            this.internal_addAllParameters(parametersP, true, true);
                        },
                        internal_addParameters: function (parametersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddParameters(parametersP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_parameters, parametersP, null));
                            }
                        },
                        internal_addAllParameters: function (parametersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = parametersP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddParameters(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = parametersP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddParameters(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_parameters, parametersP, null));
                            }
                        },
                        removeParameters: function (parametersP) {
                            this.internal_removeParameters(parametersP, true, true);
                        },
                        removeAllParameters: function () {
                            this.internal_removeAllParameters(true, true);
                        },
                        internal_removeParameters: function (parametersP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._parameters.size() !== 0 && this._parameters.containsKey_za3rmp$((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = parametersP.path();
                                this._parameters.remove_za3rmp$((parametersP != null ? parametersP : Kotlin.throwNPE()).internalGetKey());
                                (parametersP != null ? parametersP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_parameters);
                                ((parametersP != null ? parametersP : Kotlin.throwNPE()) != null ? parametersP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllParametersCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_parameters, parametersP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllParameters: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllParametersCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.parameters) != null ? tmp$0 : Kotlin.throwNPE();
                            this._parameters.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_parameters, temp_els, null));
                                this.removeAllParametersCurrentlyProcessing = false;
                            }
                        },
                        returnType: {
                            get: function () {
                                return this.$returnType_dn3q2u$;
                            },
                            set: function (returnTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_returnType(returnTypeP, true, true);
                            }
                        },
                        internal_returnType: function (returnTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$returnType_dn3q2u$, returnTypeP)) {
                                var kmf_previousVal = this.$returnType_dn3q2u$;
                                if (returnTypeP != null) {
                                    ((returnTypeP != null ? returnTypeP : Kotlin.throwNPE()) != null ? returnTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_returnType);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$returnType_dn3q2u$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_returnType);
                                }
                                this.$returnType_dn3q2u$ = returnTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_returnType, returnTypeP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_parameters) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeParameters(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllParameters();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._parameters.size() !== 0 && this._parameters.containsKey_za3rmp$(value)) {
                                        var obj = this._parameters.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._parameters.remove_za3rmp$(value);
                                        this._parameters.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_returnType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_returnType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_returnType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_returnType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findParametersByID: function (key) {
                            return this._parameters.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_parameters) {
                                return this.findParametersByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_returnType) {
                                var objFound = this.returnType;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_parameters, _.org.kevoree.util.Constants.org_kevoree_Parameter);
                                {
                                    var tmp$0 = this._parameters.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._parameters.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_parameters);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_parameters);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_returnType, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                this.internal_visit(visitor, this.returnType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_returnType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_returnType);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Operation;
                        }
                    }),
                    ParameterImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Parameter, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_vv9dd0$ = null;
                        this.$internal_containmentRefName_ivuvlg$ = null;
                        this.$internal_unsetCmd_dv8oyv$ = null;
                        this.$internal_readOnlyElem_9ick9z$ = false;
                        this.$internal_recursive_readOnlyElem_e2jwhy$ = false;
                        this.$internal_inboundReferences_ura3rt$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_e1nyyt$ = false;
                        this.$internal_modelElementListeners_5y73xg$ = null;
                        this.$internal_modelTreeListeners_gylxwg$ = null;
                        this.$path_cache_t5jwrm$ = null;
                        this.$key_cache_pjuc2w$ = null;
                        this.$name_8gjzyd$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$order_ludsj0$ = _.org.kevoree.util.Constants.INT_DEFAULTVAL;
                        this.$type_8gobqs$ = null;
                    }, /** @lends _.org.kevoree.impl.ParameterImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_vv9dd0$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_vv9dd0$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_ivuvlg$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_ivuvlg$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_dv8oyv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_dv8oyv$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_9ick9z$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_9ick9z$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_e2jwhy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_e2jwhy$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_ura3rt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_ura3rt$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_e1nyyt$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_e1nyyt$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_5y73xg$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_5y73xg$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_gylxwg$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_gylxwg$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_t5jwrm$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_t5jwrm$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_pjuc2w$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_pjuc2w$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.type != null) {
                                var tmp$0;
                                (((tmp$0 = this.type) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_type);
                                this.type = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$1;
                                ((tmp$1 = this.internal_unsetCmd) != null ? tmp$1 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_8gjzyd$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_8gjzyd$;
                                this.$name_8gjzyd$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        order: {
                            get: function () {
                                return this.$order_ludsj0$;
                            },
                            set: function (iP) {
                                this.internal_order(iP, true);
                            }
                        },
                        internal_order: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (iP !== this.order) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$order_ludsj0$;
                                this.$order_ludsj0$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_order, this.order, kmf_previousVal));
                                }
                            }
                        },
                        type: {
                            get: function () {
                                return this.$type_8gobqs$;
                            },
                            set: function (typeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_type(typeP, true, true);
                            }
                        },
                        internal_type: function (typeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$type_8gobqs$, typeP)) {
                                var kmf_previousVal = this.$type_8gobqs$;
                                if (typeP != null) {
                                    ((typeP != null ? typeP : Kotlin.throwNPE()) != null ? typeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_type);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$type_8gobqs$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_type);
                                }
                                this.$type_8gobqs$ = typeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_type, typeP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_order) {
                                this.internal_order(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_type) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_type(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_type(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_type(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_type) {
                                var objFound = this.type;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_type, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                this.internal_visit(visitor, this.type, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_type);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_type);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.order, _.org.kevoree.util.Constants.Att_order, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Parameter;
                        }
                    }),
                    PortImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Port, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_bvc152$ = null;
                        this.$internal_containmentRefName_137kiy$ = null;
                        this.$internal_unsetCmd_sgp4aj$ = null;
                        this.$internal_readOnlyElem_lu72yj$ = false;
                        this.$internal_recursive_readOnlyElem_ggi4h4$ = false;
                        this.$internal_inboundReferences_ml4lft$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_em7dbb$ = false;
                        this.$internal_modelElementListeners_gvwku6$ = null;
                        this.$internal_modelTreeListeners_30gi7y$ = null;
                        this.$path_cache_59dnk0$ = null;
                        this.$key_cache_czftoq$ = null;
                        this.$name_hp1bz1$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._bindings = new Kotlin.PrimitiveHashMap();
                        this.$portTypeRef_or8u3k$ = null;
                    }, /** @lends _.org.kevoree.impl.PortImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_bvc152$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_bvc152$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_137kiy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_137kiy$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_sgp4aj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_sgp4aj$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_lu72yj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_lu72yj$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_ggi4h4$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_ggi4h4$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_ml4lft$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_ml4lft$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_em7dbb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_em7dbb$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_gvwku6$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_gvwku6$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_30gi7y$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_30gi7y$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_59dnk0$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_59dnk0$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_czftoq$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_czftoq$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllBindings();
                            if (this.portTypeRef != null) {
                                var tmp$0;
                                (((tmp$0 = this.portTypeRef) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_portTypeRef);
                                this.portTypeRef = null;
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$1;
                                ((tmp$1 = this.internal_unsetCmd) != null ? tmp$1 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_hp1bz1$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_hp1bz1$;
                                this.$name_hp1bz1$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        bindings: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._bindings.values());
                            },
                            set: function (bindingsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (bindingsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_bindings(bindingsP, true, true);
                            }
                        },
                        internal_bindings: function (bindingsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._bindings.values(), bindingsP)) {
                                var kmf_previousVal = this._bindings;
                                this.internal_removeAllBindings(true, false);
                                {
                                    var tmp$0 = bindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._bindings.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_port, this, false, fireEvents);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddBindings: function (bindingsP) {
                            var _key_ = (bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._bindings.containsKey_za3rmp$(_key_)) {
                                this._bindings.put_wn2jw4$(_key_, bindingsP);
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                            }
                        },
                        addBindings: function (bindingsP) {
                            this.internal_addBindings(bindingsP, true, true);
                        },
                        addAllBindings: function (bindingsP) {
                            this.internal_addAllBindings(bindingsP, true, true);
                        },
                        internal_addBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddBindings(bindingsP);
                            if (setOpposite) {
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_port, this, false, fireEvents);
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, null));
                            }
                        },
                        internal_addAllBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = bindingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddBindings(el);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_port, this, false, fireEvents);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = bindingsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddBindings(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, null));
                            }
                        },
                        removeBindings: function (bindingsP) {
                            this.internal_removeBindings(bindingsP, true, true);
                        },
                        removeAllBindings: function () {
                            this.internal_removeAllBindings(true, true);
                        },
                        internal_removeBindings: function (bindingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._bindings.size() !== 0 && this._bindings.containsKey_za3rmp$((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = bindingsP.path();
                                this._bindings.remove_za3rmp$((bindingsP != null ? bindingsP : Kotlin.throwNPE()).internalGetKey());
                                (bindingsP != null ? bindingsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, bindingsP, previousPathToBeRemoved));
                                }
                                if (setOpposite) {
                                    (bindingsP != null ? bindingsP : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_port, null, false, fireEvents);
                                }
                            }
                        },
                        internal_removeAllBindings: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.bindings) != null ? tmp$0 : Kotlin.throwNPE();
                            if (setOpposite) {
                                {
                                    var tmp$1 = (temp_els != null ? temp_els : Kotlin.throwNPE()).iterator();
                                    while (tmp$1.hasNext()) {
                                        var el = tmp$1.next();
                                        (el != null ? el : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_bindings);
                                        (el != null ? el : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.util.Constants.Ref_port, null, false, fireEvents);
                                    }
                                }
                            }
                            this._bindings.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_bindings, temp_els, null));
                            }
                        },
                        portTypeRef: {
                            get: function () {
                                return this.$portTypeRef_or8u3k$;
                            },
                            set: function (portTypeRefP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_portTypeRef(portTypeRefP, true, true);
                            }
                        },
                        internal_portTypeRef: function (portTypeRefP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$portTypeRef_or8u3k$, portTypeRefP)) {
                                var kmf_previousVal = this.$portTypeRef_or8u3k$;
                                if (portTypeRefP != null) {
                                    ((portTypeRefP != null ? portTypeRefP : Kotlin.throwNPE()) != null ? portTypeRefP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_portTypeRef);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$portTypeRef_or8u3k$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_portTypeRef);
                                }
                                this.$portTypeRef_or8u3k$ = portTypeRefP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_portTypeRef, portTypeRefP, kmf_previousVal));
                                }
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_bindings) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeBindings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.internal_removeAllBindings(setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._bindings.size() !== 0 && this._bindings.containsKey_za3rmp$(value)) {
                                        var obj = this._bindings.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._bindings.remove_za3rmp$(value);
                                        this._bindings.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_portTypeRef) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_portTypeRef(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_portTypeRef(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_portTypeRef(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findBindingsByID: function (key) {
                            return this._bindings.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_bindings) {
                                return this.findBindingsByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_portTypeRef) {
                                var objFound = this.portTypeRef;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_bindings, _.org.kevoree.util.Constants.org_kevoree_MBinding);
                                {
                                    var tmp$0 = this._bindings.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._bindings.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_bindings);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_bindings);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_portTypeRef, _.org.kevoree.util.Constants.org_kevoree_PortTypeRef);
                                this.internal_visit(visitor, this.portTypeRef, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_portTypeRef);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_portTypeRef);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Port;
                        }
                    }),
                    PortTypeMappingImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.PortTypeMapping, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_hxvi0e$ = null;
                        this.$internal_containmentRefName_8oqxdq$ = null;
                        this.$internal_unsetCmd_ftwvtv$ = null;
                        this.$internal_readOnlyElem_v4nxer$ = false;
                        this.$internal_recursive_readOnlyElem_mrxc4w$ = false;
                        this.$internal_inboundReferences_atc4a9$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_7wzzjl$ = false;
                        this.$internal_modelElementListeners_bmvbyy$ = null;
                        this.$internal_modelTreeListeners_6rhzoq$ = null;
                        this.$path_cache_5fvza0$ = null;
                        this.$key_cache_vnrmsy$ = null;
                        this.$beanMethodName_ostbqs$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$serviceMethodName_uert8v$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$paramTypes_6h3gkk$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$generated_KMF_ID_yedsty$ = '' + Math.random() + (new Date()).getTime();
                    }, /** @lends _.org.kevoree.impl.PortTypeMappingImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_hxvi0e$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_hxvi0e$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_8oqxdq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_8oqxdq$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_ftwvtv$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_ftwvtv$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_v4nxer$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_v4nxer$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_mrxc4w$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_mrxc4w$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_atc4a9$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_atc4a9$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_7wzzjl$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_7wzzjl$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_bmvbyy$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_bmvbyy$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_6rhzoq$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_6rhzoq$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_5fvza0$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_5fvza0$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_vnrmsy$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_vnrmsy$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        beanMethodName: {
                            get: function () {
                                return this.$beanMethodName_ostbqs$;
                            },
                            set: function (iP) {
                                this.internal_beanMethodName(iP, true);
                            }
                        },
                        internal_beanMethodName: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.beanMethodName)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$beanMethodName_ostbqs$;
                                this.$beanMethodName_ostbqs$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_beanMethodName, this.beanMethodName, kmf_previousVal));
                                }
                            }
                        },
                        serviceMethodName: {
                            get: function () {
                                return this.$serviceMethodName_uert8v$;
                            },
                            set: function (iP) {
                                this.internal_serviceMethodName(iP, true);
                            }
                        },
                        internal_serviceMethodName: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.serviceMethodName)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$serviceMethodName_uert8v$;
                                this.$serviceMethodName_uert8v$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_serviceMethodName, this.serviceMethodName, kmf_previousVal));
                                }
                            }
                        },
                        paramTypes: {
                            get: function () {
                                return this.$paramTypes_6h3gkk$;
                            },
                            set: function (iP) {
                                this.internal_paramTypes(iP, true);
                            }
                        },
                        internal_paramTypes: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.paramTypes)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$paramTypes_6h3gkk$;
                                this.$paramTypes_6h3gkk$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_paramTypes, this.paramTypes, kmf_previousVal));
                                }
                            }
                        },
                        generated_KMF_ID: {
                            get: function () {
                                return this.$generated_KMF_ID_yedsty$;
                            },
                            set: function (iP) {
                                this.internal_generated_KMF_ID(iP, true);
                            }
                        },
                        internal_generated_KMF_ID: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.generated_KMF_ID)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$generated_KMF_ID_yedsty$;
                                this.$generated_KMF_ID_yedsty$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.generated_KMF_ID, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_beanMethodName) {
                                this.internal_beanMethodName(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_serviceMethodName) {
                                this.internal_serviceMethodName(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_paramTypes) {
                                this.internal_paramTypes(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_generated_KMF_ID) {
                                this.internal_generated_KMF_ID(value, fireEvents);
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = this.generated_KMF_ID;
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.generated_KMF_ID, _.org.kevoree.util.Constants.Att_generated_KMF_ID, this);
                            visitor.visit(this.paramTypes, _.org.kevoree.util.Constants.Att_paramTypes, this);
                            visitor.visit(this.serviceMethodName, _.org.kevoree.util.Constants.Att_serviceMethodName, this);
                            visitor.visit(this.beanMethodName, _.org.kevoree.util.Constants.Att_beanMethodName, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_PortTypeMapping;
                        }
                    }),
                    PortTypeRefImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.PortTypeRef, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_pm392r$ = null;
                        this.$internal_containmentRefName_atv9kz$ = null;
                        this.$internal_unsetCmd_cj7bs$ = null;
                        this.$internal_readOnlyElem_hbvq08$ = false;
                        this.$internal_recursive_readOnlyElem_p412fp$ = false;
                        this.$internal_inboundReferences_m7ab6e$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_m15cx8$ = false;
                        this.$internal_modelElementListeners_prt097$ = null;
                        this.$internal_modelTreeListeners_8wmbvz$ = null;
                        this.$path_cache_3zokj7$ = null;
                        this.$key_cache_l34n9l$ = null;
                        this.$name_g95rrq$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$optional_jfj7it$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$noDependency_4fourt$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$ref_e9sxd4$ = null;
                        this._mappings = new Kotlin.PrimitiveHashMap();
                        this.removeAllMappingsCurrentlyProcessing = false;
                    }, /** @lends _.org.kevoree.impl.PortTypeRefImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_pm392r$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_pm392r$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_atv9kz$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_atv9kz$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_cj7bs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_cj7bs$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_hbvq08$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_hbvq08$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_p412fp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_p412fp$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_m7ab6e$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_m7ab6e$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_m15cx8$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_m15cx8$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_prt097$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_prt097$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_8wmbvz$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_8wmbvz$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_3zokj7$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_3zokj7$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_l34n9l$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_l34n9l$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.ref != null) {
                                var tmp$0;
                                (((tmp$0 = this.ref) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_ref);
                                this.ref = null;
                            }
                            var tmp$1;
                            {
                                var tmp$2 = ((tmp$1 = this.mappings) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                                while (tmp$2.hasNext()) {
                                    var el = tmp$2.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$3;
                                ((tmp$3 = this.internal_unsetCmd) != null ? tmp$3 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_g95rrq$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_g95rrq$;
                                this.$name_g95rrq$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        optional: {
                            get: function () {
                                return this.$optional_jfj7it$;
                            },
                            set: function (iP) {
                                this.internal_optional(iP, true);
                            }
                        },
                        internal_optional: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.optional)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$optional_jfj7it$;
                                this.$optional_jfj7it$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_optional, this.optional, kmf_previousVal));
                                }
                            }
                        },
                        noDependency: {
                            get: function () {
                                return this.$noDependency_4fourt$;
                            },
                            set: function (iP) {
                                this.internal_noDependency(iP, true);
                            }
                        },
                        internal_noDependency: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.noDependency)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$noDependency_4fourt$;
                                this.$noDependency_4fourt$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_noDependency, this.noDependency, kmf_previousVal));
                                }
                            }
                        },
                        ref: {
                            get: function () {
                                return this.$ref_e9sxd4$;
                            },
                            set: function (refP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_ref(refP, true, true);
                            }
                        },
                        internal_ref: function (refP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$ref_e9sxd4$, refP)) {
                                var kmf_previousVal = this.$ref_e9sxd4$;
                                if (refP != null) {
                                    ((refP != null ? refP : Kotlin.throwNPE()) != null ? refP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_ref);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$ref_e9sxd4$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_ref);
                                }
                                this.$ref_e9sxd4$ = refP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_ref, refP, kmf_previousVal));
                                }
                            }
                        },
                        mappings: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._mappings.values());
                            },
                            set: function (mappingsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (mappingsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_mappings(mappingsP, true, true);
                            }
                        },
                        internal_mappings: function (mappingsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._mappings.values(), mappingsP)) {
                                var kmf_previousVal = this._mappings;
                                this._mappings.clear();
                                {
                                    var tmp$0 = mappingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._mappings.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_mappings);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_mappings, el), _.org.kevoree.util.Constants.Ref_mappings);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mappings, mappingsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddMappings: function (mappingsP) {
                            var _key_ = (mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._mappings.containsKey_za3rmp$(_key_)) {
                                this._mappings.put_wn2jw4$(_key_, mappingsP);
                                (mappingsP != null ? mappingsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_mappings, mappingsP), _.org.kevoree.util.Constants.Ref_mappings);
                                (mappingsP != null ? mappingsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_mappings);
                            }
                        },
                        addMappings: function (mappingsP) {
                            this.internal_addMappings(mappingsP, true, true);
                        },
                        addAllMappings: function (mappingsP) {
                            this.internal_addAllMappings(mappingsP, true, true);
                        },
                        internal_addMappings: function (mappingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddMappings(mappingsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mappings, mappingsP, null));
                            }
                        },
                        internal_addAllMappings: function (mappingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = mappingsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddMappings(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = mappingsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddMappings(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mappings, mappingsP, null));
                            }
                        },
                        removeMappings: function (mappingsP) {
                            this.internal_removeMappings(mappingsP, true, true);
                        },
                        removeAllMappings: function () {
                            this.internal_removeAllMappings(true, true);
                        },
                        internal_removeMappings: function (mappingsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._mappings.size() !== 0 && this._mappings.containsKey_za3rmp$((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = mappingsP.path();
                                this._mappings.remove_za3rmp$((mappingsP != null ? mappingsP : Kotlin.throwNPE()).internalGetKey());
                                (mappingsP != null ? mappingsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_mappings);
                                ((mappingsP != null ? mappingsP : Kotlin.throwNPE()) != null ? mappingsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllMappingsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mappings, mappingsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllMappings: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllMappingsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.mappings) != null ? tmp$0 : Kotlin.throwNPE();
                            this._mappings.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_mappings, temp_els, null));
                                this.removeAllMappingsCurrentlyProcessing = false;
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_optional) {
                                this.internal_optional(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_noDependency) {
                                this.internal_noDependency(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_ref) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_ref(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_ref(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_ref(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_mappings) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeMappings(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllMappings();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._mappings.size() !== 0 && this._mappings.containsKey_za3rmp$(value)) {
                                        var obj = this._mappings.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._mappings.remove_za3rmp$(value);
                                        this._mappings.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findMappingsByID: function (key) {
                            return this._mappings.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_ref) {
                                var objFound = this.ref;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_mappings) {
                                return this.findMappingsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_mappings, _.org.kevoree.util.Constants.org_kevoree_PortTypeMapping);
                                {
                                    var tmp$0 = this._mappings.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._mappings.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_mappings);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_mappings);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_ref, _.org.kevoree.util.Constants.org_kevoree_PortType);
                                this.internal_visit(visitor, this.ref, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_ref);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_ref);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.noDependency, _.org.kevoree.util.Constants.Att_noDependency, this);
                            visitor.visit(this.optional, _.org.kevoree.util.Constants.Att_optional, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_PortTypeRef;
                        }
                    }),
                    RepositoryImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.Repository, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_a6cpb$ = null;
                        this.$internal_containmentRefName_bv5tnj$ = null;
                        this.$internal_unsetCmd_y7t9hg$ = null;
                        this.$internal_readOnlyElem_x4tpbw$ = false;
                        this.$internal_recursive_readOnlyElem_7f0bld$ = false;
                        this.$internal_inboundReferences_t1jnhu$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_c47wxc$ = false;
                        this.$internal_modelElementListeners_80yh95$ = null;
                        this.$internal_modelTreeListeners_9xwvyj$ = null;
                        this.$path_cache_kp14yf$ = null;
                        this.$key_cache_mu7ust$ = null;
                        this.$url_yffns0$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                    }, /** @lends _.org.kevoree.impl.RepositoryImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_a6cpb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_a6cpb$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_bv5tnj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_bv5tnj$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_y7t9hg$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_y7t9hg$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_x4tpbw$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_x4tpbw$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_7f0bld$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_7f0bld$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_t1jnhu$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_t1jnhu$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_c47wxc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_c47wxc$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_80yh95$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_80yh95$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_9xwvyj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_9xwvyj$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_kp14yf$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_kp14yf$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_mu7ust$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_mu7ust$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        url: {
                            get: function () {
                                return this.$url_yffns0$;
                            },
                            set: function (iP) {
                                this.internal_url(iP, true);
                            }
                        },
                        internal_url: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.url)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$url_yffns0$;
                                this.$url_yffns0$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_url, this.url, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_url, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_url) {
                                this.internal_url(value, fireEvents);
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.url);
                            }
                            return this.key_cache;
                        },
                        findByID: function (relationName, idP) {
                            {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.url, _.org.kevoree.util.Constants.Att_url, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_Repository;
                        }
                    }),
                    ServicePortTypeImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.ServicePortType, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_t4v1n$ = null;
                        this.$internal_containmentRefName_upkekb$ = null;
                        this.$internal_unsetCmd_8nhco0$ = null;
                        this.$internal_readOnlyElem_o9efxc$ = false;
                        this.$internal_recursive_readOnlyElem_n0v3f1$ = false;
                        this.$internal_inboundReferences_sfntse$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_t3ukok$ = false;
                        this.$internal_modelElementListeners_l9972b$ = null;
                        this.$internal_modelTreeListeners_ssbgvb$ = null;
                        this.$path_cache_fvb3ph$ = null;
                        this.$key_cache_qe1lf3$ = null;
                        this.$name_lcvr6m$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$version_osjjtx$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$factoryBean_luf049$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$bean_lco60z$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$abstract_maxytn$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$synchrone_8uttoy$ = _.org.kevoree.util.Constants.BOOLEAN_DEFAULTVAL;
                        this.$interface_8uxxve$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this.$dictionaryType_lwo0sj$ = null;
                        this.$deployUnit_31u92a$ = null;
                        this._operations = new Kotlin.PrimitiveHashMap();
                        this.removeAllOperationsCurrentlyProcessing = false;
                        this._superTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.ServicePortTypeImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_t4v1n$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_t4v1n$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_upkekb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_upkekb$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_8nhco0$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_8nhco0$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_o9efxc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_o9efxc$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_n0v3f1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_n0v3f1$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_sfntse$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_sfntse$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_t3ukok$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_t3ukok$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_l9972b$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_l9972b$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_ssbgvb$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_ssbgvb$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_fvb3ph$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_fvb3ph$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_qe1lf3$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_qe1lf3$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            if (this.deployUnit != null) {
                                var tmp$0;
                                (((tmp$0 = this.deployUnit) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                this.deployUnit = null;
                            }
                            if (this.dictionaryType != null) {
                                var tmp$1;
                                (((tmp$1 = this.dictionaryType) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                this.dictionaryType = null;
                            }
                            this.removeAllSuperTypes();
                            var tmp$2;
                            {
                                var tmp$3 = ((tmp$2 = this.operations) != null ? tmp$2 : Kotlin.throwNPE()).iterator();
                                while (tmp$3.hasNext()) {
                                    var el = tmp$3.next();
                                    el.delete();
                                }
                            }
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$4;
                                ((tmp$4 = this.internal_unsetCmd) != null ? tmp$4 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_lcvr6m$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_lcvr6m$;
                                this.$name_lcvr6m$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        version: {
                            get: function () {
                                return this.$version_osjjtx$;
                            },
                            set: function (iP) {
                                this.internal_version(iP, true);
                            }
                        },
                        internal_version: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.version)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$version_osjjtx$;
                                this.$version_osjjtx$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.version, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_version, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        factoryBean: {
                            get: function () {
                                return this.$factoryBean_luf049$;
                            },
                            set: function (iP) {
                                this.internal_factoryBean(iP, true);
                            }
                        },
                        internal_factoryBean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.factoryBean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$factoryBean_luf049$;
                                this.$factoryBean_luf049$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_factoryBean, this.factoryBean, kmf_previousVal));
                                }
                            }
                        },
                        bean: {
                            get: function () {
                                return this.$bean_lco60z$;
                            },
                            set: function (iP) {
                                this.internal_bean(iP, true);
                            }
                        },
                        internal_bean: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.bean)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$bean_lco60z$;
                                this.$bean_lco60z$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_bean, this.bean, kmf_previousVal));
                                }
                            }
                        },
                        abstract: {
                            get: function () {
                                return this.$abstract_maxytn$;
                            },
                            set: function (iP) {
                                this.internal_abstract(iP, true);
                            }
                        },
                        internal_abstract: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.abstract)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$abstract_maxytn$;
                                this.$abstract_maxytn$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_abstract, this.abstract, kmf_previousVal));
                                }
                            }
                        },
                        synchrone: {
                            get: function () {
                                return this.$synchrone_8uttoy$;
                            },
                            set: function (iP) {
                                this.internal_synchrone(iP, true);
                            }
                        },
                        internal_synchrone: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.synchrone)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$synchrone_8uttoy$;
                                this.$synchrone_8uttoy$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_synchrone, this.synchrone, kmf_previousVal));
                                }
                            }
                        },
                        interface: {
                            get: function () {
                                return this.$interface_8uxxve$;
                            },
                            set: function (iP) {
                                this.internal_interface(iP, true);
                            }
                        },
                        internal_interface: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.interface)) {
                                var oldPath = this.path();
                                var kmf_previousVal = this.$interface_8uxxve$;
                                this.$interface_8uxxve$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_interface, this.interface, kmf_previousVal));
                                }
                            }
                        },
                        dictionaryType: {
                            get: function () {
                                return this.$dictionaryType_lwo0sj$;
                            },
                            set: function (dictionaryTypeP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_dictionaryType(dictionaryTypeP, true, true);
                            }
                        },
                        internal_dictionaryType: function (dictionaryTypeP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$dictionaryType_lwo0sj$, dictionaryTypeP)) {
                                if (this.$dictionaryType_lwo0sj$ != null) {
                                    var tmp$0;
                                    (((tmp$0 = this.$dictionaryType_lwo0sj$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                                }
                                if (dictionaryTypeP != null) {
                                    (dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()).setEContainer(this, null, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                var kmf_previousVal = this.$dictionaryType_lwo0sj$;
                                if (dictionaryTypeP != null) {
                                    ((dictionaryTypeP != null ? dictionaryTypeP : Kotlin.throwNPE()) != null ? dictionaryTypeP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                else {
                                    var tmp$1;
                                    (((tmp$1 = this.$dictionaryType_lwo0sj$) != null ? tmp$1 : Kotlin.throwNPE()) != null ? tmp$1 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                }
                                this.$dictionaryType_lwo0sj$ = dictionaryTypeP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_dictionaryType, dictionaryTypeP, kmf_previousVal));
                                }
                            }
                        },
                        deployUnit: {
                            get: function () {
                                return this.$deployUnit_31u92a$;
                            },
                            set: function (deployUnitP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                this.internal_deployUnit(deployUnitP, true, true);
                            }
                        },
                        internal_deployUnit: function (deployUnitP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this.$deployUnit_31u92a$, deployUnitP)) {
                                var kmf_previousVal = this.$deployUnit_31u92a$;
                                if (deployUnitP != null) {
                                    ((deployUnitP != null ? deployUnitP : Kotlin.throwNPE()) != null ? deployUnitP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                else {
                                    var tmp$0;
                                    (((tmp$0 = this.$deployUnit_31u92a$) != null ? tmp$0 : Kotlin.throwNPE()) != null ? tmp$0 : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_deployUnit);
                                }
                                this.$deployUnit_31u92a$ = deployUnitP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_deployUnit, deployUnitP, kmf_previousVal));
                                }
                            }
                        },
                        operations: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._operations.values());
                            },
                            set: function (operationsP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (operationsP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_operations(operationsP, true, true);
                            }
                        },
                        internal_operations: function (operationsP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._operations.values(), operationsP)) {
                                var kmf_previousVal = this._operations;
                                this._operations.clear();
                                {
                                    var tmp$0 = operationsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._operations.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_operations);
                                        (el != null ? el : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_operations, el), _.org.kevoree.util.Constants.Ref_operations);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_operations, operationsP, kmf_previousVal));
                                }
                            }
                        },
                        doAddOperations: function (operationsP) {
                            var _key_ = (operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._operations.containsKey_za3rmp$(_key_)) {
                                this._operations.put_wn2jw4$(_key_, operationsP);
                                (operationsP != null ? operationsP : Kotlin.throwNPE()).setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.util.Constants.Ref_operations, operationsP), _.org.kevoree.util.Constants.Ref_operations);
                                (operationsP != null ? operationsP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_operations);
                            }
                        },
                        addOperations: function (operationsP) {
                            this.internal_addOperations(operationsP, true, true);
                        },
                        addAllOperations: function (operationsP) {
                            this.internal_addAllOperations(operationsP, true, true);
                        },
                        internal_addOperations: function (operationsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddOperations(operationsP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_operations, operationsP, null));
                            }
                        },
                        internal_addAllOperations: function (operationsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = operationsP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddOperations(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = operationsP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddOperations(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_operations, operationsP, null));
                            }
                        },
                        removeOperations: function (operationsP) {
                            this.internal_removeOperations(operationsP, true, true);
                        },
                        removeAllOperations: function () {
                            this.internal_removeAllOperations(true, true);
                        },
                        internal_removeOperations: function (operationsP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._operations.size() !== 0 && this._operations.containsKey_za3rmp$((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = operationsP.path();
                                this._operations.remove_za3rmp$((operationsP != null ? operationsP : Kotlin.throwNPE()).internalGetKey());
                                (operationsP != null ? operationsP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_operations);
                                ((operationsP != null ? operationsP : Kotlin.throwNPE()) != null ? operationsP : Kotlin.throwNPE()).setEContainer(null, null, null);
                                if (!this.removeAllOperationsCurrentlyProcessing && fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_operations, operationsP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllOperations: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (fireEvents) {
                                this.removeAllOperationsCurrentlyProcessing = true;
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.operations) != null ? tmp$0 : Kotlin.throwNPE();
                            this._operations.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.CONTAINMENT, _.org.kevoree.util.Constants.Ref_operations, temp_els, null));
                                this.removeAllOperationsCurrentlyProcessing = false;
                            }
                        },
                        superTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._superTypes.values());
                            },
                            set: function (superTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (superTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_superTypes(superTypesP, true, true);
                            }
                        },
                        internal_superTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._superTypes.values(), superTypesP)) {
                                var kmf_previousVal = this._superTypes;
                                this._superTypes.clear();
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._superTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSuperTypes: function (superTypesP) {
                            var _key_ = (superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._superTypes.containsKey_za3rmp$(_key_)) {
                                this._superTypes.put_wn2jw4$(_key_, superTypesP);
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                            }
                        },
                        addSuperTypes: function (superTypesP) {
                            this.internal_addSuperTypes(superTypesP, true, true);
                        },
                        addAllSuperTypes: function (superTypesP) {
                            this.internal_addAllSuperTypes(superTypesP, true, true);
                        },
                        internal_addSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSuperTypes(superTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        internal_addAllSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = superTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSuperTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = superTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSuperTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, null));
                            }
                        },
                        removeSuperTypes: function (superTypesP) {
                            this.internal_removeSuperTypes(superTypesP, true, true);
                        },
                        removeAllSuperTypes: function () {
                            this.internal_removeAllSuperTypes(true, true);
                        },
                        internal_removeSuperTypes: function (superTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = superTypesP.path();
                                this._superTypes.remove_za3rmp$((superTypesP != null ? superTypesP : Kotlin.throwNPE()).internalGetKey());
                                (superTypesP != null ? superTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_superTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, superTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSuperTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.superTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._superTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_superTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_version) {
                                this.internal_version(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_factoryBean) {
                                this.internal_factoryBean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_bean) {
                                this.internal_bean(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_abstract) {
                                this.internal_abstract(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_synchrone) {
                                this.internal_synchrone(Kotlin.equals('true', value) || Kotlin.equals(true, value), fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Att_interface) {
                                this.internal_interface(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_deployUnit(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_deployUnit(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_dictionaryType(null, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_dictionaryType(value, setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSuperTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSuperTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._superTypes.size() !== 0 && this._superTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._superTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._superTypes.remove_za3rmp$(value);
                                        this._superTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_operations) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeOperations(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllOperations();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._operations.size() !== 0 && this._operations.containsKey_za3rmp$(value)) {
                                        var obj_0 = this._operations.get_za3rmp$(value);
                                        var objNewKey_0 = (obj_0 != null ? obj_0 : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey_0 == null) {
                                            throw new Error('Key newed to null ' + obj_0);
                                        }
                                        this._operations.remove_za3rmp$(value);
                                        this._operations.put_wn2jw4$(objNewKey_0, obj_0);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name) + '/' + Kotlin.toString(this.version);
                            }
                            return this.key_cache;
                        },
                        findSuperTypesByID: function (key) {
                            return this._superTypes.get_za3rmp$(key);
                        },
                        findOperationsByID: function (key) {
                            return this._operations.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_deployUnit) {
                                var objFound = this.deployUnit;
                                if (objFound != null && Kotlin.equals((objFound != null ? objFound : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_dictionaryType) {
                                var objFound_0 = this.dictionaryType;
                                if (objFound_0 != null && Kotlin.equals((objFound_0 != null ? objFound_0 : Kotlin.throwNPE()).internalGetKey(), idP)) {
                                    return objFound_0;
                                }
                                else {
                                    return null;
                                }
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_superTypes) {
                                return this.findSuperTypesByID(idP);
                            }
                            else if (relationName === _.org.kevoree.util.Constants.Ref_operations) {
                                return this.findOperationsByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (containedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType, _.org.kevoree.util.Constants.org_kevoree_DictionaryType);
                                this.internal_visit(visitor, this.dictionaryType, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_dictionaryType);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_operations, _.org.kevoree.util.Constants.org_kevoree_Operation);
                                {
                                    var tmp$0 = this._operations.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._operations.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_operations);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_operations);
                            }
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit, _.org.kevoree.util.Constants.org_kevoree_DeployUnit);
                                this.internal_visit(visitor, this.deployUnit, recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_deployUnit);
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_superTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$1 = this._superTypes.keySet().iterator();
                                    while (tmp$1.hasNext()) {
                                        var KMFLoopEntryKey_0 = tmp$1.next();
                                        this.internal_visit(visitor, this._superTypes.get_za3rmp$(KMFLoopEntryKey_0), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_superTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_superTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.abstract, _.org.kevoree.util.Constants.Att_abstract, this);
                            visitor.visit(this.synchrone, _.org.kevoree.util.Constants.Att_synchrone, this);
                            visitor.visit(this.bean, _.org.kevoree.util.Constants.Att_bean, this);
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                            visitor.visit(this.factoryBean, _.org.kevoree.util.Constants.Att_factoryBean, this);
                            visitor.visit(this.interface, _.org.kevoree.util.Constants.Att_interface, this);
                            visitor.visit(this.version, _.org.kevoree.util.Constants.Att_version, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_ServicePortType;
                        }
                    }),
                    TypedElementImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.TypedElement, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_2p9ea1$ = null;
                        this.$internal_containmentRefName_ogoop$ = null;
                        this.$internal_unsetCmd_8v0lpo$ = null;
                        this.$internal_readOnlyElem_b5dagc$ = false;
                        this.$internal_recursive_readOnlyElem_al615l$ = false;
                        this.$internal_inboundReferences_8tq63e$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_h0n10o$ = false;
                        this.$internal_modelElementListeners_utnavj$ = null;
                        this.$internal_modelTreeListeners_2lpmdp$ = null;
                        this.$path_cache_498g4v$ = null;
                        this.$key_cache_7bw939$ = null;
                        this.$name_2bmn4i$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._genericTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.TypedElementImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_2p9ea1$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_2p9ea1$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_ogoop$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_ogoop$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_8v0lpo$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_8v0lpo$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_b5dagc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_b5dagc$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_al615l$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_al615l$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_8tq63e$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_8tq63e$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_h0n10o$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_h0n10o$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_utnavj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_utnavj$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_2lpmdp$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_2lpmdp$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_498g4v$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_498g4v$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_7bw939$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_7bw939$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllGenericTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_2bmn4i$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_2bmn4i$;
                                this.$name_2bmn4i$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        genericTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._genericTypes.values());
                            },
                            set: function (genericTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (genericTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_genericTypes(genericTypesP, true, true);
                            }
                        },
                        internal_genericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._genericTypes.values(), genericTypesP)) {
                                var kmf_previousVal = this._genericTypes;
                                this._genericTypes.clear();
                                {
                                    var tmp$0 = genericTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._genericTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddGenericTypes: function (genericTypesP) {
                            var _key_ = (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._genericTypes.containsKey_za3rmp$(_key_)) {
                                this._genericTypes.put_wn2jw4$(_key_, genericTypesP);
                                (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                            }
                        },
                        addGenericTypes: function (genericTypesP) {
                            this.internal_addGenericTypes(genericTypesP, true, true);
                        },
                        addAllGenericTypes: function (genericTypesP) {
                            this.internal_addAllGenericTypes(genericTypesP, true, true);
                        },
                        internal_addGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddGenericTypes(genericTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, null));
                            }
                        },
                        internal_addAllGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = genericTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddGenericTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = genericTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddGenericTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, null));
                            }
                        },
                        removeGenericTypes: function (genericTypesP) {
                            this.internal_removeGenericTypes(genericTypesP, true, true);
                        },
                        removeAllGenericTypes: function () {
                            this.internal_removeAllGenericTypes(true, true);
                        },
                        internal_removeGenericTypes: function (genericTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._genericTypes.size() !== 0 && this._genericTypes.containsKey_za3rmp$((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = genericTypesP.path();
                                this._genericTypes.remove_za3rmp$((genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).internalGetKey());
                                (genericTypesP != null ? genericTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_genericTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, genericTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllGenericTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.genericTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._genericTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_genericTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_genericTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeGenericTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllGenericTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._genericTypes.size() !== 0 && this._genericTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._genericTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._genericTypes.remove_za3rmp$(value);
                                        this._genericTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findGenericTypesByID: function (key) {
                            return this._genericTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_genericTypes) {
                                return this.findGenericTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_genericTypes, _.org.kevoree.util.Constants.org_kevoree_TypedElement);
                                {
                                    var tmp$0 = this._genericTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._genericTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_genericTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_genericTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_TypedElement;
                        }
                    }),
                    TypeLibraryImpl: Kotlin.createClass(function () {
                        return [_.org.kevoree.TypeLibrary, _.org.kevoree.container.KMFContainerImpl];
                    }, function () {
                        this.$internal_eContainer_500iuc$ = null;
                        this.$internal_containmentRefName_hfn5qs$ = null;
                        this.$internal_unsetCmd_i4ajzj$ = null;
                        this.$internal_readOnlyElem_41q5n5$ = false;
                        this.$internal_recursive_readOnlyElem_6ehata$ = false;
                        this.$internal_inboundReferences_ykjorj$ = new Kotlin.ComplexHashMap();
                        this.$internal_deleteInProgress_wk6rnh$ = false;
                        this.$internal_modelElementListeners_qbogks$ = null;
                        this.$internal_modelTreeListeners_jcw3fs$ = null;
                        this.$path_cache_57wfe2$ = null;
                        this.$key_cache_9l9jmo$ = null;
                        this.$name_a5l9tf$ = _.org.kevoree.util.Constants.STRING_DEFAULTVAL;
                        this._subTypes = new Kotlin.PrimitiveHashMap();
                    }, /** @lends _.org.kevoree.impl.TypeLibraryImpl.prototype */ {
                        internal_eContainer: {
                            get: function () {
                                return this.$internal_eContainer_500iuc$;
                            },
                            set: function (tmp$0) {
                                this.$internal_eContainer_500iuc$ = tmp$0;
                            }
                        },
                        internal_containmentRefName: {
                            get: function () {
                                return this.$internal_containmentRefName_hfn5qs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_containmentRefName_hfn5qs$ = tmp$0;
                            }
                        },
                        internal_unsetCmd: {
                            get: function () {
                                return this.$internal_unsetCmd_i4ajzj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_unsetCmd_i4ajzj$ = tmp$0;
                            }
                        },
                        internal_readOnlyElem: {
                            get: function () {
                                return this.$internal_readOnlyElem_41q5n5$;
                            },
                            set: function (tmp$0) {
                                this.$internal_readOnlyElem_41q5n5$ = tmp$0;
                            }
                        },
                        internal_recursive_readOnlyElem: {
                            get: function () {
                                return this.$internal_recursive_readOnlyElem_6ehata$;
                            },
                            set: function (tmp$0) {
                                this.$internal_recursive_readOnlyElem_6ehata$ = tmp$0;
                            }
                        },
                        internal_inboundReferences: {
                            get: function () {
                                return this.$internal_inboundReferences_ykjorj$;
                            },
                            set: function (tmp$0) {
                                this.$internal_inboundReferences_ykjorj$ = tmp$0;
                            }
                        },
                        internal_deleteInProgress: {
                            get: function () {
                                return this.$internal_deleteInProgress_wk6rnh$;
                            },
                            set: function (tmp$0) {
                                this.$internal_deleteInProgress_wk6rnh$ = tmp$0;
                            }
                        },
                        internal_modelElementListeners: {
                            get: function () {
                                return this.$internal_modelElementListeners_qbogks$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelElementListeners_qbogks$ = tmp$0;
                            }
                        },
                        internal_modelTreeListeners: {
                            get: function () {
                                return this.$internal_modelTreeListeners_jcw3fs$;
                            },
                            set: function (tmp$0) {
                                this.$internal_modelTreeListeners_jcw3fs$ = tmp$0;
                            }
                        },
                        path_cache: {
                            get: function () {
                                return this.$path_cache_57wfe2$;
                            },
                            set: function (tmp$0) {
                                this.$path_cache_57wfe2$ = tmp$0;
                            }
                        },
                        key_cache: {
                            get: function () {
                                return this.$key_cache_9l9jmo$;
                            },
                            set: function (tmp$0) {
                                this.$key_cache_9l9jmo$ = tmp$0;
                            }
                        },
                        delete: function () {
                            this.internal_deleteInProgress = true;
                            this.removeAllSubTypes();
                            this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, this);
                            this.internal_inboundReferences.clear();
                            if (this.internal_unsetCmd != null) {
                                var tmp$0;
                                ((tmp$0 = this.internal_unsetCmd) != null ? tmp$0 : Kotlin.throwNPE()).run();
                            }
                        },
                        name: {
                            get: function () {
                                return this.$name_a5l9tf$;
                            },
                            set: function (iP) {
                                this.internal_name(iP, true);
                            }
                        },
                        internal_name: function (iP, fireEvents) {
                            if (fireEvents === void 0)
                                fireEvents = true;
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (!Kotlin.equals(iP, this.name)) {
                                var oldPath = this.path();
                                var oldId = this.internalGetKey();
                                this.path_cache = null;
                                this.key_cache = null;
                                var previousParent = this.eContainer();
                                var previousRefNameInParent = this.getRefInParent();
                                var kmf_previousVal = this.$name_a5l9tf$;
                                this.$name_a5l9tf$ = iP;
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.name, kmf_previousVal));
                                }
                                if (previousParent != null) {
                                    previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, previousRefNameInParent != null ? previousRefNameInParent : Kotlin.throwNPE(), oldId, false, false);
                                }
                                this.advertiseInboundRefs(_.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, oldId);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(oldPath, _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE, _.org.kevoree.util.Constants.Att_name, this.path(), null));
                                }
                                this.visit(_.org.kevoree.container.cleanCacheVisitor, true, true, false);
                            }
                        },
                        subTypes: {
                            get: function () {
                                return _.kotlin.toList_h3panj$(this._subTypes.values());
                            },
                            set: function (subTypesP) {
                                if (this.isReadOnly()) {
                                    throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                                }
                                if (subTypesP == null) {
                                    throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION);
                                }
                                this.internal_subTypes(subTypesP, true, true);
                            }
                        },
                        internal_subTypes: function (subTypesP, setOpposite, fireEvents) {
                            if (!Kotlin.equals(this._subTypes.values(), subTypesP)) {
                                var kmf_previousVal = this._subTypes;
                                this._subTypes.clear();
                                {
                                    var tmp$0 = subTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        var elKey = (el != null ? el : Kotlin.throwNPE()).internalGetKey();
                                        if (elKey == null) {
                                            throw new Error(_.org.kevoree.util.Constants.ELEMENT_HAS_NO_KEY_IN_COLLECTION);
                                        }
                                        this._subTypes.put_wn2jw4$(elKey != null ? elKey : Kotlin.throwNPE(), el);
                                        (el != null ? el : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_subTypes);
                                    }
                                }
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.SET, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subTypes, subTypesP, kmf_previousVal));
                                }
                            }
                        },
                        doAddSubTypes: function (subTypesP) {
                            var _key_ = (subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey();
                            if (_key_ == null || Kotlin.equals(_key_, '')) {
                                throw new Error(_.org.kevoree.util.Constants.EMPTY_KEY);
                            }
                            if (!this._subTypes.containsKey_za3rmp$(_key_)) {
                                this._subTypes.put_wn2jw4$(_key_, subTypesP);
                                (subTypesP != null ? subTypesP : Kotlin.throwNPE()).addInboundReference(this, _.org.kevoree.util.Constants.Ref_subTypes);
                            }
                        },
                        addSubTypes: function (subTypesP) {
                            this.internal_addSubTypes(subTypesP, true, true);
                        },
                        addAllSubTypes: function (subTypesP) {
                            this.internal_addAllSubTypes(subTypesP, true, true);
                        },
                        internal_addSubTypes: function (subTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            this.doAddSubTypes(subTypesP);
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subTypes, subTypesP, null));
                            }
                        },
                        internal_addAllSubTypes: function (subTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (setOpposite) {
                                {
                                    var tmp$0 = subTypesP.iterator();
                                    while (tmp$0.hasNext()) {
                                        var el = tmp$0.next();
                                        this.doAddSubTypes(el);
                                    }
                                }
                            }
                            else {
                                {
                                    var tmp$1 = subTypesP.iterator();
                                    while (tmp$1.hasNext()) {
                                        var el_0 = tmp$1.next();
                                        this.doAddSubTypes(el_0);
                                    }
                                }
                            }
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subTypes, subTypesP, null));
                            }
                        },
                        removeSubTypes: function (subTypesP) {
                            this.internal_removeSubTypes(subTypesP, true, true);
                        },
                        removeAllSubTypes: function () {
                            this.internal_removeAllSubTypes(true, true);
                        },
                        internal_removeSubTypes: function (subTypesP, setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            if (this._subTypes.size() !== 0 && this._subTypes.containsKey_za3rmp$((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey())) {
                                var previousPathToBeRemoved = subTypesP.path();
                                this._subTypes.remove_za3rmp$((subTypesP != null ? subTypesP : Kotlin.throwNPE()).internalGetKey());
                                (subTypesP != null ? subTypesP : Kotlin.throwNPE()).removeInboundReference(this, _.org.kevoree.util.Constants.Ref_subTypes);
                                if (fireEvents) {
                                    this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subTypes, subTypesP, previousPathToBeRemoved));
                                }
                            }
                        },
                        internal_removeAllSubTypes: function (setOpposite, fireEvents) {
                            if (this.isReadOnly()) {
                                throw new Error(_.org.kevoree.util.Constants.READ_ONLY_EXCEPTION);
                            }
                            var tmp$0;
                            var temp_els = (tmp$0 = this.subTypes) != null ? tmp$0 : Kotlin.throwNPE();
                            this._subTypes.clear();
                            if (fireEvents) {
                                this.fireModelEvent(new _.org.kevoree.modeling.api.events.ModelEvent(this.path(), _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, _.org.kevoree.modeling.api.util.ElementAttributeType.object.REFERENCE, _.org.kevoree.util.Constants.Ref_subTypes, temp_els, null));
                            }
                        },
                        reflexiveMutator: function (mutationType, refName, value, setOpposite, fireEvents) {
                            if (refName === _.org.kevoree.util.Constants.Att_name) {
                                this.internal_name(value, fireEvents);
                            }
                            else if (refName === _.org.kevoree.util.Constants.Ref_subTypes) {
                                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                    this.internal_addSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                    this.internal_addAllSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                    this.internal_removeSubTypes(value != null ? value : Kotlin.throwNPE(), setOpposite, fireEvents);
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                    this.removeAllSubTypes();
                                }
                                else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    if (this._subTypes.size() !== 0 && this._subTypes.containsKey_za3rmp$(value)) {
                                        var obj = this._subTypes.get_za3rmp$(value);
                                        var objNewKey = (obj != null ? obj : Kotlin.throwNPE()).internalGetKey();
                                        if (objNewKey == null) {
                                            throw new Error('Key newed to null ' + obj);
                                        }
                                        this._subTypes.remove_za3rmp$(value);
                                        this._subTypes.put_wn2jw4$(objNewKey, obj);
                                    }
                                }
                                else {
                                    throw new Error(_.org.kevoree.util.Constants.UNKNOWN_MUTATION_TYPE_EXCEPTION + mutationType);
                                }
                            }
                            else {
                                throw new Error('Can not reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
                            }
                        },
                        internalGetKey: function () {
                            if (this.key_cache != null) {
                                return this.key_cache;
                            }
                            else {
                                this.key_cache = Kotlin.toString(this.name);
                            }
                            return this.key_cache;
                        },
                        findSubTypesByID: function (key) {
                            return this._subTypes.get_za3rmp$(key);
                        },
                        findByID: function (relationName, idP) {
                            if (relationName === _.org.kevoree.util.Constants.Ref_subTypes) {
                                return this.findSubTypesByID(idP);
                            }
                            else {
                                return null;
                            }
                        },
                        visit: function (visitor, recursive, containedReference, nonContainedReference) {
                            visitor.beginVisitElem(this);
                            if (nonContainedReference) {
                                visitor.beginVisitRef(_.org.kevoree.util.Constants.Ref_subTypes, _.org.kevoree.util.Constants.org_kevoree_TypeDefinition);
                                {
                                    var tmp$0 = this._subTypes.keySet().iterator();
                                    while (tmp$0.hasNext()) {
                                        var KMFLoopEntryKey = tmp$0.next();
                                        this.internal_visit(visitor, this._subTypes.get_za3rmp$(KMFLoopEntryKey), recursive, containedReference, nonContainedReference, _.org.kevoree.util.Constants.Ref_subTypes);
                                    }
                                }
                                visitor.endVisitRef(_.org.kevoree.util.Constants.Ref_subTypes);
                            }
                            visitor.endVisitElem(this);
                        },
                        visitAttributes: function (visitor) {
                            visitor.visit(this.name, _.org.kevoree.util.Constants.Att_name, this);
                        },
                        metaClassName: function () {
                            return _.org.kevoree.util.Constants.org_kevoree_TypeLibrary;
                        }
                    })
                }),
                loader: Kotlin.definePackage(null, /** @lends _.org.kevoree.loader */ {
                    JSONModelLoader: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.json.JSONModelLoader];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.$factory_4lw89a$ = new _.org.kevoree.factory.MainFactory();
                    }, /** @lends _.org.kevoree.loader.JSONModelLoader.prototype */ {
                        factory: {
                            get: function () {
                                return this.$factory_4lw89a$;
                            },
                            set: function (tmp$0) {
                                this.$factory_4lw89a$ = tmp$0;
                            }
                        }
                    }),
                    XMIModelLoader: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.xmi.XMIModelLoader];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.$factory_e1cfgm$ = new _.org.kevoree.factory.MainFactory();
                    }, /** @lends _.org.kevoree.loader.XMIModelLoader.prototype */ {
                        factory: {
                            get: function () {
                                return this.$factory_e1cfgm$;
                            },
                            set: function (tmp$0) {
                                this.$factory_e1cfgm$ = tmp$0;
                            }
                        }
                    })
                }),
                log: Kotlin.definePackage(function () {
                    this.Log = Kotlin.createObject(null, function () {
                        this.LEVEL_NONE = 6;
                        this.LEVEL_ERROR = 5;
                        this.LEVEL_WARN = 4;
                        this.LEVEL_INFO = 3;
                        this.LEVEL_DEBUG = 2;
                        this.LEVEL_TRACE = 1;
                        this.$level_qhmnt5$ = this.LEVEL_INFO;
                        this._ERROR_oj0992$ = this.level <= this.LEVEL_ERROR;
                        this._WARN_qp2148$ = this.level <= this.LEVEL_WARN;
                        this._INFO_qpapkw$ = this.level <= this.LEVEL_INFO;
                        this._DEBUG_oi7u3l$ = this.level <= this.LEVEL_DEBUG;
                        this._TRACE_or8t8z$ = this.level <= this.LEVEL_TRACE;
                        this.logger = new _.org.kevoree.log.Logger();
                        this.beginParam = '{';
                        this.endParam = '}';
                    }, {
                        level: {
                            get: function () {
                                return this.$level_qhmnt5$;
                            },
                            set: function (newLevel) {
                                this.$level_qhmnt5$ = newLevel;
                                this._ERROR_oj0992$ = newLevel <= this.LEVEL_ERROR;
                                this._WARN_qp2148$ = newLevel <= this.LEVEL_WARN;
                                this._INFO_qpapkw$ = newLevel <= this.LEVEL_INFO;
                                this._DEBUG_oi7u3l$ = newLevel <= this.LEVEL_DEBUG;
                                this._TRACE_or8t8z$ = newLevel <= this.LEVEL_TRACE;
                            }
                        },
                        NONE: function () {
                            this.level = this.LEVEL_NONE;
                        },
                        ERROR: function () {
                            this.level = this.LEVEL_ERROR;
                        },
                        WARN: function () {
                            this.level = this.LEVEL_WARN;
                        },
                        INFO: function () {
                            this.level = this.LEVEL_INFO;
                        },
                        DEBUG: function () {
                            this.level = this.LEVEL_DEBUG;
                        },
                        TRACE: function () {
                            this.level = this.LEVEL_TRACE;
                        },
                        processMessage: function (message, p1, p2, p3, p4, p5) {
                            if (p1 == null) {
                                return message;
                            }
                            var buffer = new Kotlin.StringBuilder();
                            var previousCharfound = false;
                            var param = 0;
                            var i = 0;
                            while (i < message.length) {
                                var currentChar = message.charAt(i);
                                if (previousCharfound) {
                                    if (currentChar === this.endParam) {
                                        param++;
                                        if (param === 1) {
                                            buffer = new Kotlin.StringBuilder();
                                            buffer.append(message.substring(0, i - 1));
                                            buffer.append((p1 != null ? p1 : Kotlin.throwNPE()).toString());
                                        }
                                        else if (param === 2) {
                                            buffer.append((p2 != null ? p2 : Kotlin.throwNPE()).toString());
                                        }
                                        else if (param === 3) {
                                            buffer.append((p3 != null ? p3 : Kotlin.throwNPE()).toString());
                                        }
                                        else if (param === 4) {
                                            buffer.append((p4 != null ? p4 : Kotlin.throwNPE()).toString());
                                        }
                                        else if (param === 5) {
                                            buffer.append((p5 != null ? p5 : Kotlin.throwNPE()).toString());
                                        }
                                        else {
                                        }
                                        previousCharfound = false;
                                    }
                                    else {
                                        if (buffer != null) {
                                            message.charAt(i - 1);
                                            buffer.append(currentChar);
                                        }
                                        previousCharfound = false;
                                    }
                                }
                                else {
                                    if (currentChar === this.beginParam) {
                                        previousCharfound = true;
                                    }
                                    else {
                                        if (buffer != null) {
                                            buffer.append(currentChar);
                                        }
                                    }
                                }
                                i = i + 1;
                            }
                            if (buffer != null) {
                                return buffer.toString();
                            }
                            else {
                                return message;
                            }
                        },
                        error_1: function (message, ex, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._ERROR_oj0992$) {
                                this.internal_error(this.processMessage(message, p1, p2, p3, p4, p5), ex);
                            }
                        },
                        error: function (message, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._ERROR_oj0992$) {
                                this.internal_error(this.processMessage(message, p1, p2, p3, p4, p5), null);
                            }
                        },
                        internal_error: function (message, ex) {
                            this.logger.log(this.LEVEL_ERROR, message, ex);
                        },
                        warn_1: function (message, ex, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._WARN_qp2148$) {
                                this.internal_warn(this.processMessage(message, p1, p2, p3, p4, p5), ex);
                            }
                        },
                        warn: function (message, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._WARN_qp2148$) {
                                this.internal_warn(this.processMessage(message, p1, p2, p3, p4, p5), null);
                            }
                        },
                        internal_warn: function (message, ex) {
                            this.logger.log(this.LEVEL_WARN, message, ex);
                        },
                        info_1: function (message, ex, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._INFO_qpapkw$) {
                                this.internal_info(this.processMessage(message, p1, p2, p3, p4, p5), ex);
                            }
                        },
                        info: function (message, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._INFO_qpapkw$) {
                                this.internal_info(this.processMessage(message, p1, p2, p3, p4, p5), null);
                            }
                        },
                        internal_info: function (message, ex) {
                            this.logger.log(this.LEVEL_INFO, message, ex);
                        },
                        debug_1: function (message, ex, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._DEBUG_oi7u3l$) {
                                this.internal_debug(this.processMessage(message, p1, p2, p3, p4, p5), ex);
                            }
                        },
                        debug: function (message, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._DEBUG_oi7u3l$) {
                                this.internal_debug(this.processMessage(message, p1, p2, p3, p4, p5), null);
                            }
                        },
                        internal_debug: function (message, ex) {
                            this.logger.log(this.LEVEL_DEBUG, message, ex);
                        },
                        trace_1: function (message, ex, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._TRACE_or8t8z$) {
                                this.internal_trace(this.processMessage(message, p1, p2, p3, p4, p5), ex);
                            }
                        },
                        trace: function (message, p1, p2, p3, p4, p5) {
                            if (p1 === void 0)
                                p1 = null;
                            if (p2 === void 0)
                                p2 = null;
                            if (p3 === void 0)
                                p3 = null;
                            if (p4 === void 0)
                                p4 = null;
                            if (p5 === void 0)
                                p5 = null;
                            if (this._TRACE_or8t8z$) {
                                this.internal_trace(this.processMessage(message, p1, p2, p3, p4, p5), null);
                            }
                        },
                        internal_trace: function (message, ex) {
                            this.logger.log(this.LEVEL_TRACE, message, ex);
                        }
                    });
                }, /** @lends _.org.kevoree.log */ {
                    Logger: Kotlin.createClass(null, function () {
                        this.firstLogTime = (new Date()).getTime();
                        this.error_msg = ' ERROR: ';
                        this.warn_msg = ' WARN: ';
                        this.info_msg = ' INFO: ';
                        this.debug_msg = ' DEBUG: ';
                        this.trace_msg = ' TRACE: ';
                        this.category = null;
                    }, /** @lends _.org.kevoree.log.Logger.prototype */ {
                        setCategory: function (category) {
                            this.category = category;
                        },
                        log: function (level, message, ex) {
                            var builder = new Kotlin.StringBuilder();
                            var time = (new Date()).getTime() - this.firstLogTime;
                            var minutes = time / (1000 * 60) | 0;
                            var seconds = (time / 1000 | 0) % 60;
                            if (minutes <= 9)
                                builder.append('0');
                            builder.append(minutes.toString());
                            builder.append(':');
                            if (seconds <= 9)
                                builder.append('0');
                            builder.append(seconds.toString());
                            if (level === _.org.kevoree.log.Log.LEVEL_ERROR) {
                                builder.append(this.error_msg);
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_WARN) {
                                builder.append(this.warn_msg);
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_INFO) {
                                builder.append(this.info_msg);
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_DEBUG) {
                                builder.append(this.debug_msg);
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_TRACE) {
                                builder.append(this.trace_msg);
                            }
                            else {
                            }
                            if (this.category != null) {
                                builder.append('[');
                                var tmp$0;
                                builder.append(((tmp$0 = this.category) != null ? tmp$0 : Kotlin.throwNPE()).toString());
                                builder.append('] ');
                            }
                            builder.append(message);
                            if (ex != null) {
                                builder.append(Kotlin.toString(ex.getMessage()));
                            }
                            if (level === _.org.kevoree.log.Log.LEVEL_ERROR) {
                                console.error(builder.toString());
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_WARN) {
                                console.warn(builder.toString());
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_INFO) {
                                console.info(builder.toString());
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_DEBUG) {
                                console.log(builder.toString());
                            }
                            else if (level === _.org.kevoree.log.Log.LEVEL_TRACE) {
                                console.log(builder.toString());
                            }
                            else {
                            }
                        }
                    })
                }),
                modeling: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling */ {
                    api: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling.api */ {
                        compare: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling.api.compare */ {
                            ModelCompare: Kotlin.createTrait(null, /** @lends _.org.kevoree.modeling.api.compare.ModelCompare.prototype */ {
                                diff: function (origin, target) {
                                    return this.createSequence().populate(this.internal_diff(origin, target, false, false));
                                },
                                merge: function (origin, target) {
                                    return this.createSequence().populate(this.internal_diff(origin, target, false, true));
                                },
                                inter: function (origin, target) {
                                    return this.createSequence().populate(this.internal_diff(origin, target, true, false));
                                },
                                internal_diff: function (origin, target, inter, merge) {
                                    var traces = new Kotlin.ArrayList();
                                    var tracesRef = new Kotlin.ArrayList();
                                    var objectsMap = new Kotlin.PrimitiveHashMap();
                                    traces.addAll_xeylzf$(origin.createTraces(target, inter, merge, false, true));
                                    tracesRef.addAll_xeylzf$(origin.createTraces(target, inter, merge, true, false));
                                    var visitor = _.org.kevoree.modeling.api.compare.ModelCompare.internal_diff$f(objectsMap);
                                    origin.visit(visitor, true, true, false);
                                    var visitor2 = _.org.kevoree.modeling.api.compare.ModelCompare.internal_diff$f_0(objectsMap, inter, traces, merge, tracesRef);
                                    target.visit(visitor2, true, true, false);
                                    traces.addAll_xeylzf$(tracesRef);
                                    if (!inter) {
                                        if (!merge) {
                                            {
                                                var tmp$0 = objectsMap.values().iterator();
                                                while (tmp$0.hasNext()) {
                                                    var diffChild = tmp$0.next();
                                                    var tmp$3, tmp$5, tmp$6;
                                                    if (diffChild.eContainer() != null) {
                                                        var tmp$1, tmp$2;
                                                        tmp$3 = (tmp$2 = ((tmp$1 = diffChild.eContainer()) != null ? tmp$1 : Kotlin.throwNPE()).path()) != null ? tmp$2 : Kotlin.throwNPE();
                                                    }
                                                    else {
                                                        tmp$3 = 'null';
                                                    }
                                                    var src = tmp$3;
                                                    if (diffChild.getRefInParent() != null) {
                                                        var tmp$4;
                                                        tmp$5 = (tmp$4 = diffChild.getRefInParent()) != null ? tmp$4 : Kotlin.throwNPE();
                                                    }
                                                    else {
                                                        tmp$5 = 'null';
                                                    }
                                                    var refNameInParent = tmp$5;
                                                    traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace(src, refNameInParent, (tmp$6 = (diffChild != null ? diffChild : Kotlin.throwNPE()).path()) != null ? tmp$6 : Kotlin.throwNPE()));
                                                }
                                            }
                                        }
                                    }
                                    return traces;
                                }
                            }, /** @lends _.org.kevoree.modeling.api.compare.ModelCompare */ {
                                internal_diff$f: function (objectsMap) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                    }, function $fun() {
                                        $fun.baseInitializer.call(this);
                                    }, {
                                        visit: function (elem, refNameInParent, parent) {
                                            var childPath = elem.path();
                                            if (childPath != null) {
                                                objectsMap.put_wn2jw4$(childPath, elem);
                                            }
                                            else {
                                                throw new Error('Null child path ' + elem);
                                            }
                                        }
                                    });
                                },
                                internal_diff$f_0: function (objectsMap, inter, traces, merge, tracesRef) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                    }, function $fun() {
                                        $fun.baseInitializer.call(this);
                                    }, {
                                        visit: function (elem, refNameInParent, parent) {
                                            var childPath = elem.path();
                                            if (childPath != null) {
                                                if (objectsMap.containsKey_za3rmp$(childPath)) {
                                                    if (inter) {
                                                        var tmp$0;
                                                        traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$0 = parent.path()) != null ? tmp$0 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                                                    }
                                                    var tmp$1, tmp$2;
                                                    traces.addAll_xeylzf$(((tmp$1 = objectsMap.get_za3rmp$(childPath)) != null ? tmp$1 : Kotlin.throwNPE()).createTraces(elem, inter, merge, false, true));
                                                    tracesRef.addAll_xeylzf$(((tmp$2 = objectsMap.get_za3rmp$(childPath)) != null ? tmp$2 : Kotlin.throwNPE()).createTraces(elem, inter, merge, true, false));
                                                    objectsMap.remove_za3rmp$(childPath);
                                                }
                                                else {
                                                    if (!inter) {
                                                        var tmp$3;
                                                        traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$3 = parent.path()) != null ? tmp$3 : Kotlin.throwNPE(), refNameInParent, elem.path(), elem.metaClassName()));
                                                        traces.addAll_xeylzf$(elem.createTraces(elem, true, merge, false, true));
                                                        tracesRef.addAll_xeylzf$(elem.createTraces(elem, true, merge, true, false));
                                                    }
                                                }
                                            }
                                            else {
                                                throw new Error('Null child path ' + elem);
                                            }
                                        }
                                    });
                                }
                            })
                        }),
                        events: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling.api.events */ {
                            ModelElementListener: Kotlin.createTrait(null),
                            ModelEvent: Kotlin.createClass(null, function (sourcePath, etype, elementAttributeType, elementAttributeName, value, previous_value) {
                                this.sourcePath = sourcePath;
                                this.etype = etype;
                                this.elementAttributeType = elementAttributeType;
                                this.elementAttributeName = elementAttributeName;
                                this.value = value;
                                this.previous_value = previous_value;
                            }, /** @lends _.org.kevoree.modeling.api.events.ModelEvent.prototype */ {
                                toString: function () {
                                    return 'ModelEvent[src:' + Kotlin.toString(this.sourcePath) + ', type:' + this.etype + ', elementAttributeType:' + this.elementAttributeType + ', elementAttributeName:' + this.elementAttributeName + ', value:' + Kotlin.toString(this.value) + ', previousValue:' + Kotlin.toString(this.previous_value) + ']';
                                }
                            })
                        }),
                        json: Kotlin.definePackage(function () {
                            this.JSONString = Kotlin.createObject(null, function () {
                                this.escapeChar_iwx5i$ = '\\';
                            }, {
                                encodeBuffer: function (buffer, chain) {
                                    if (chain == null) {
                                        return;
                                    }
                                    var i = 0;
                                    while (i < chain.length) {
                                        var ch = chain.charAt(i);
                                        if (ch === '"') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('"');
                                        }
                                        else if (ch === this.escapeChar_iwx5i$) {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append(this.escapeChar_iwx5i$);
                                        }
                                        else if (ch === '\n') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('n');
                                        }
                                        else if (ch === '\r') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('r');
                                        }
                                        else if (ch === '\t') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('t');
                                        }
                                        else if (ch === '\u2028') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('u');
                                            buffer.append('2');
                                            buffer.append('0');
                                            buffer.append('2');
                                            buffer.append('8');
                                        }
                                        else if (ch === '\u2029') {
                                            buffer.append(this.escapeChar_iwx5i$);
                                            buffer.append('u');
                                            buffer.append('2');
                                            buffer.append('0');
                                            buffer.append('2');
                                            buffer.append('9');
                                        }
                                        else {
                                            buffer.append(ch);
                                        }
                                        i = i + 1;
                                    }
                                },
                                encode: function (ostream, chain) {
                                    if (chain == null) {
                                        return;
                                    }
                                    var i = 0;
                                    while (i < chain.length) {
                                        var ch = chain.charAt(i);
                                        if (ch === '"') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('"');
                                        }
                                        else if (ch === this.escapeChar_iwx5i$) {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                        }
                                        else if (ch === '\n') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('n');
                                        }
                                        else if (ch === '\r') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('r');
                                        }
                                        else if (ch === '\t') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('t');
                                        }
                                        else if (ch === '\u2028') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('u');
                                            ostream.print_1('2');
                                            ostream.print_1('0');
                                            ostream.print_1('2');
                                            ostream.print_1('8');
                                        }
                                        else if (ch === '\u2029') {
                                            ostream.print_1(this.escapeChar_iwx5i$);
                                            ostream.print_1('u');
                                            ostream.print_1('2');
                                            ostream.print_1('0');
                                            ostream.print_1('2');
                                            ostream.print_1('9');
                                        }
                                        else {
                                            ostream.print_1(ch);
                                        }
                                        i = i + 1;
                                    }
                                },
                                unescape: function (src) {
                                    if (src == null) {
                                        return null;
                                    }
                                    if (src.length === 0) {
                                        return src;
                                    }
                                    var builder = null;
                                    var i = 0;
                                    while (i < src.length) {
                                        var current = src.charAt(i);
                                        if (current === this.escapeChar_iwx5i$) {
                                            if (builder == null) {
                                                builder = new Kotlin.StringBuilder();
                                                builder != null ? builder.append(src.substring(0, i)) : null;
                                            }
                                            i++;
                                            var current2 = src.charAt(i);
                                            if (current2 === '"') {
                                                builder != null ? builder.append('"') : null;
                                            }
                                            else if (current2 === '\\') {
                                                builder != null ? builder.append(current2) : null;
                                            }
                                            else if (current2 === '/') {
                                                builder != null ? builder.append(current2) : null;
                                            }
                                            else if (current2 === 'b') {
                                                builder != null ? builder.append('\b') : null;
                                            }
                                            else if (current2 === 'f') {
                                                builder != null ? builder.append((12).toChar()) : null;
                                            }
                                            else if (current2 === 'n') {
                                                builder != null ? builder.append('\n') : null;
                                            }
                                            else if (current2 === 'r') {
                                                builder != null ? builder.append('\r') : null;
                                            }
                                            else if (current2 === 't') {
                                                builder != null ? builder.append('\t') : null;
                                            }
                                            else if (current2 === 'u') {
                                                throw new Error('Bad char to escape ');
                                            }
                                        }
                                        else {
                                            if (builder != null) {
                                                builder = builder != null ? builder.append(current) : null;
                                            }
                                        }
                                        i++;
                                    }
                                    if (builder != null) {
                                        return (builder != null ? builder : Kotlin.throwNPE()).toString();
                                    }
                                    else {
                                        return src;
                                    }
                                }
                            });
                            this.Type = Kotlin.createObject(null, function () {
                                this.VALUE = 0;
                                this.LEFT_BRACE = 1;
                                this.RIGHT_BRACE = 2;
                                this.LEFT_BRACKET = 3;
                                this.RIGHT_BRACKET = 4;
                                this.COMMA = 5;
                                this.COLON = 6;
                                this.EOF = 42;
                            });
                        }, /** @lends _.org.kevoree.modeling.api.json */ {
                            JSONModelLoader: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.ModelLoader];
                            }, function () {
                                this.$factory_5vzziy$ = null;
                            }, /** @lends _.org.kevoree.modeling.api.json.JSONModelLoader.prototype */ {
                                factory: {
                                    get: function () {
                                        return this.$factory_5vzziy$;
                                    },
                                    set: function (tmp$0) {
                                        this.$factory_5vzziy$ = tmp$0;
                                    }
                                },
                                loadModelFromString: function (str) {
                                    return this.deserialize(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(str));
                                },
                                loadModelFromStream: function (inputStream) {
                                    return this.deserialize(inputStream);
                                },
                                deserialize: function (instream) {
                                    if (instream == null) {
                                        throw new Error('Null input Stream');
                                    }
                                    var resolverCommands = new Kotlin.ArrayList();
                                    var roots = new Kotlin.ArrayList();
                                    var lexer = new _.org.kevoree.modeling.api.json.Lexer(instream);
                                    var currentToken = lexer.nextToken();
                                    if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.LEFT_BRACE) {
                                        this.loadObject(lexer, null, null, roots, resolverCommands);
                                    }
                                    else {
                                        throw new Error('Bad Format / {\xA0expected');
                                    }
                                    {
                                        var tmp$0 = resolverCommands.iterator();
                                        while (tmp$0.hasNext()) {
                                            var resol = tmp$0.next();
                                            resol.run();
                                        }
                                    }
                                    return roots;
                                },
                                loadObject: function (lexer, nameInParent, parent, roots, commands) {
                                    var currentToken = lexer.nextToken();
                                    var currentObject = null;
                                    if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.VALUE) {
                                        if (Kotlin.equals(currentToken.value, 'eClass')) {
                                            lexer.nextToken();
                                            currentToken = lexer.nextToken();
                                            var tmp$0, tmp$1, tmp$2;
                                            var name = (tmp$1 = (tmp$0 = currentToken.value) != null ? tmp$0.toString() : null) != null ? tmp$1 : Kotlin.throwNPE();
                                            currentObject = (tmp$2 = this.factory) != null ? tmp$2.create(name) : null;
                                            if (parent == null) {
                                                roots.add_za3rmp$(currentObject != null ? currentObject : Kotlin.throwNPE());
                                            }
                                            var currentNameAttOrRef = null;
                                            var refModel = false;
                                            currentToken = lexer.nextToken();
                                            while (currentToken.tokenType !== _.org.kevoree.modeling.api.json.Type.EOF) {
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.LEFT_BRACE) {
                                                    this.loadObject(lexer, currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), currentObject, roots, commands);
                                                }
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.COMMA) {
                                                }
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.VALUE) {
                                                    if (currentNameAttOrRef == null) {
                                                        currentNameAttOrRef = Kotlin.toString(currentToken.value);
                                                    }
                                                    else {
                                                        if (refModel) {
                                                            var tmp$3;
                                                            commands.add_za3rmp$(new _.org.kevoree.modeling.api.json.ResolveCommand(roots, ((tmp$3 = currentToken.value) != null ? tmp$3 : Kotlin.throwNPE()).toString(), currentObject != null ? currentObject : Kotlin.throwNPE(), currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE()));
                                                        }
                                                        else {
                                                            var unscaped = _.org.kevoree.modeling.api.json.JSONString.unescape(Kotlin.toString(currentToken.value));
                                                            (currentObject != null ? currentObject : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), unscaped, false, false);
                                                            currentNameAttOrRef = null;
                                                        }
                                                    }
                                                }
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.LEFT_BRACKET) {
                                                    currentToken = lexer.nextToken();
                                                    if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.LEFT_BRACE) {
                                                        this.loadObject(lexer, currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE(), currentObject, roots, commands);
                                                    }
                                                    else {
                                                        refModel = true;
                                                        if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.VALUE) {
                                                            var tmp$4;
                                                            commands.add_za3rmp$(new _.org.kevoree.modeling.api.json.ResolveCommand(roots, ((tmp$4 = currentToken.value) != null ? tmp$4 : Kotlin.throwNPE()).toString(), currentObject != null ? currentObject : Kotlin.throwNPE(), currentNameAttOrRef != null ? currentNameAttOrRef : Kotlin.throwNPE()));
                                                        }
                                                    }
                                                }
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.RIGHT_BRACKET) {
                                                    currentNameAttOrRef = null;
                                                    refModel = false;
                                                }
                                                if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.RIGHT_BRACE) {
                                                    if (parent != null) {
                                                        parent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, nameInParent != null ? nameInParent : Kotlin.throwNPE(), currentObject, false, false);
                                                    }
                                                    return;
                                                }
                                                currentToken = lexer.nextToken();
                                            }
                                        }
                                        else {
                                            throw new Error('Bad Format / eClass att must be first');
                                        }
                                    }
                                    else {
                                        throw new Error('Bad Format');
                                    }
                                }
                            }),
                            ResolveCommand: Kotlin.createClass(null, function (roots, ref, currentRootElem, refName) {
                                this.roots = roots;
                                this.ref = ref;
                                this.currentRootElem = currentRootElem;
                                this.refName = refName;
                            }, /** @lends _.org.kevoree.modeling.api.json.ResolveCommand.prototype */ {
                                run: function () {
                                    var referencedElement = null;
                                    var i = 0;
                                    while (referencedElement == null && i < this.roots.size()) {
                                        referencedElement = this.roots.get_za3lpa$(i++).findByPath(this.ref);
                                    }
                                    if (referencedElement != null) {
                                        this.currentRootElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, this.refName, referencedElement, false, false);
                                    }
                                    else {
                                        throw new Error('Unresolved ' + this.ref);
                                    }
                                }
                            }),
                            ModelReferenceVisitor: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun(out) {
                                $fun.baseInitializer.call(this);
                                this.out = out;
                                this.isFirst = true;
                            }, /** @lends _.org.kevoree.modeling.api.json.ModelReferenceVisitor.prototype */ {
                                beginVisitRef: function (refName, refType) {
                                    this.out.print_4(',"' + refName + '":[');
                                    this.isFirst = true;
                                },
                                endVisitRef: function (refName) {
                                    this.out.print_4(']');
                                },
                                visit: function (elem, refNameInParent, parent) {
                                    if (!this.isFirst) {
                                        this.out.print_4(',');
                                    }
                                    else {
                                        this.isFirst = false;
                                    }
                                    this.out.print_4('"' + elem.path() + '"');
                                }
                            }),
                            JSONModelSerializer: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.ModelSerializer];
                            }, null, /** @lends _.org.kevoree.modeling.api.json.JSONModelSerializer.prototype */ {
                                serialize: function (model) {
                                    var outstream = new _.java.io.ByteArrayOutputStream();
                                    this.serializeToStream(model, outstream);
                                    outstream.close();
                                    return outstream.toString();
                                },
                                serializeToStream: function (model, raw) {
                                    var out = new _.java.io.PrintStream(new _.java.io.BufferedOutputStream(raw), false);
                                    var internalReferenceVisitor = new _.org.kevoree.modeling.api.json.ModelReferenceVisitor(out);
                                    var masterVisitor = _.org.kevoree.modeling.api.json.JSONModelSerializer.serializeToStream$f(out, this, internalReferenceVisitor);
                                    model.visit(masterVisitor, true, true, false);
                                    out.flush();
                                },
                                printAttName: function (elem, out) {
                                    out.print_4('\n{"eClass":"' + elem.metaClassName() + '"');
                                    var attributeVisitor = _.org.kevoree.modeling.api.json.JSONModelSerializer.printAttName$f(out);
                                    elem.visitAttributes(attributeVisitor);
                                }
                            }, /** @lends _.org.kevoree.modeling.api.json.JSONModelSerializer */ {
                                serializeToStream$f: function (out, this$JSONModelSerializer, internalReferenceVisitor) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                    }, function $fun() {
                                        $fun.baseInitializer.call(this);
                                        this.isFirstInRef = true;
                                    }, {
                                        beginVisitElem: function (elem) {
                                            if (!this.isFirstInRef) {
                                                out.print_4(',');
                                                this.isFirstInRef = false;
                                            }
                                            this$JSONModelSerializer.printAttName(elem, out);
                                            var tmp$0;
                                            (tmp$0 = internalReferenceVisitor.alreadyVisited) != null ? tmp$0.clear() : null;
                                            elem.visit(internalReferenceVisitor, false, false, true);
                                        },
                                        endVisitElem: function (elem) {
                                            out.println_2('}');
                                            this.isFirstInRef = false;
                                        },
                                        beginVisitRef: function (refName, refType) {
                                            out.print_4(',"' + refName + '":[');
                                            this.isFirstInRef = true;
                                        },
                                        endVisitRef: function (refName) {
                                            out.print_4(']');
                                            this.isFirstInRef = false;
                                        },
                                        visit: function (elem, refNameInParent, parent) {
                                        }
                                    });
                                },
                                printAttName$f: function (out) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                                    }, null, {
                                        visit: function (value, name, parent) {
                                            if (value != null) {
                                                out.print_4(',"' + name + '":"');
                                                if (Kotlin.isType(value, Date)) {
                                                    _.org.kevoree.modeling.api.json.JSONString.encode(out, '' + value.getTime());
                                                }
                                                else {
                                                    _.org.kevoree.modeling.api.json.JSONString.encode(out, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(value));
                                                }
                                                out.print_4('"');
                                            }
                                        }
                                    });
                                }
                            }),
                            Token: Kotlin.createClass(null, function (tokenType, value) {
                                this.tokenType = tokenType;
                                this.value = value;
                            }, /** @lends _.org.kevoree.modeling.api.json.Token.prototype */ {
                                toString: function () {
                                    var tmp$0;
                                    if (this.value != null) {
                                        tmp$0 = ' (' + this.value + ')';
                                    }
                                    else {
                                        tmp$0 = '';
                                    }
                                    var v = tmp$0;
                                    var result = this.tokenType.toString() + v;
                                    return result;
                                }
                            }),
                            Lexer: Kotlin.createClass(null, function (inputStream) {
                                this.inputStream = inputStream;
                                this.bytes = this.inputStream.readBytes();
                                this.EOF = new _.org.kevoree.modeling.api.json.Token(_.org.kevoree.modeling.api.json.Type.EOF, null);
                                this.index = 0;
                                this.BOOLEAN_LETTERS = null;
                                this.DIGIT = null;
                            }, /** @lends _.org.kevoree.modeling.api.json.Lexer.prototype */ {
                                isSpace: function (c) {
                                    return c === ' ' || c === '\r' || c === '\n' || c === '\t';
                                },
                                nextChar: function () {
                                    return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.bytes[this.index++]);
                                },
                                peekChar: function () {
                                    return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.bytes[this.index]);
                                },
                                isDone: function () {
                                    return this.index >= this.bytes.length;
                                },
                                isBooleanLetter: function (c) {
                                    if (this.BOOLEAN_LETTERS == null) {
                                        this.BOOLEAN_LETTERS = new Kotlin.PrimitiveHashSet();
                                        var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7;
                                        ((tmp$0 = this.BOOLEAN_LETTERS) != null ? tmp$0 : Kotlin.throwNPE()).add_za3rmp$('f');
                                        ((tmp$1 = this.BOOLEAN_LETTERS) != null ? tmp$1 : Kotlin.throwNPE()).add_za3rmp$('a');
                                        ((tmp$2 = this.BOOLEAN_LETTERS) != null ? tmp$2 : Kotlin.throwNPE()).add_za3rmp$('l');
                                        ((tmp$3 = this.BOOLEAN_LETTERS) != null ? tmp$3 : Kotlin.throwNPE()).add_za3rmp$('s');
                                        ((tmp$4 = this.BOOLEAN_LETTERS) != null ? tmp$4 : Kotlin.throwNPE()).add_za3rmp$('e');
                                        ((tmp$5 = this.BOOLEAN_LETTERS) != null ? tmp$5 : Kotlin.throwNPE()).add_za3rmp$('t');
                                        ((tmp$6 = this.BOOLEAN_LETTERS) != null ? tmp$6 : Kotlin.throwNPE()).add_za3rmp$('r');
                                        ((tmp$7 = this.BOOLEAN_LETTERS) != null ? tmp$7 : Kotlin.throwNPE()).add_za3rmp$('u');
                                    }
                                    var tmp$8;
                                    return ((tmp$8 = this.BOOLEAN_LETTERS) != null ? tmp$8 : Kotlin.throwNPE()).contains_za3rmp$(c);
                                },
                                isDigit: function (c) {
                                    if (this.DIGIT == null) {
                                        this.DIGIT = new Kotlin.PrimitiveHashSet();
                                        var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
                                        ((tmp$0 = this.DIGIT) != null ? tmp$0 : Kotlin.throwNPE()).add_za3rmp$('0');
                                        ((tmp$1 = this.DIGIT) != null ? tmp$1 : Kotlin.throwNPE()).add_za3rmp$('1');
                                        ((tmp$2 = this.DIGIT) != null ? tmp$2 : Kotlin.throwNPE()).add_za3rmp$('2');
                                        ((tmp$3 = this.DIGIT) != null ? tmp$3 : Kotlin.throwNPE()).add_za3rmp$('3');
                                        ((tmp$4 = this.DIGIT) != null ? tmp$4 : Kotlin.throwNPE()).add_za3rmp$('4');
                                        ((tmp$5 = this.DIGIT) != null ? tmp$5 : Kotlin.throwNPE()).add_za3rmp$('5');
                                        ((tmp$6 = this.DIGIT) != null ? tmp$6 : Kotlin.throwNPE()).add_za3rmp$('6');
                                        ((tmp$7 = this.DIGIT) != null ? tmp$7 : Kotlin.throwNPE()).add_za3rmp$('7');
                                        ((tmp$8 = this.DIGIT) != null ? tmp$8 : Kotlin.throwNPE()).add_za3rmp$('8');
                                        ((tmp$9 = this.DIGIT) != null ? tmp$9 : Kotlin.throwNPE()).add_za3rmp$('9');
                                    }
                                    var tmp$10;
                                    return ((tmp$10 = this.DIGIT) != null ? tmp$10 : Kotlin.throwNPE()).contains_za3rmp$(c);
                                },
                                isValueLetter: function (c) {
                                    return c === '-' || c === '+' || c === '.' || this.isDigit(c) || this.isBooleanLetter(c);
                                },
                                nextToken: function () {
                                    if (this.isDone()) {
                                        return this.EOF;
                                    }
                                    var tokenType = _.org.kevoree.modeling.api.json.Type.EOF;
                                    var c = this.nextChar();
                                    var currentValue = new Kotlin.StringBuilder();
                                    var jsonValue = null;
                                    while (!this.isDone() && this.isSpace(c)) {
                                        c = this.nextChar();
                                    }
                                    if ('"' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.VALUE;
                                        if (!this.isDone()) {
                                            c = this.nextChar();
                                            while (this.index < this.bytes.length && c !== '"') {
                                                currentValue.append(c);
                                                if (c === '\\' && this.index < this.bytes.length) {
                                                    c = this.nextChar();
                                                    currentValue.append(c);
                                                }
                                                c = this.nextChar();
                                            }
                                            jsonValue = currentValue.toString();
                                        }
                                        else {
                                            throw new Kotlin.RuntimeException('Unterminated string');
                                        }
                                    }
                                    else if ('{' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.LEFT_BRACE;
                                    }
                                    else if ('}' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.RIGHT_BRACE;
                                    }
                                    else if ('[' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.LEFT_BRACKET;
                                    }
                                    else if (']' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.RIGHT_BRACKET;
                                    }
                                    else if (':' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.COLON;
                                    }
                                    else if (',' === c) {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.COMMA;
                                    }
                                    else if (!this.isDone()) {
                                        while (this.isValueLetter(c)) {
                                            currentValue.append(c);
                                            if (!this.isValueLetter(this.peekChar())) {
                                                break;
                                            }
                                            else {
                                                c = this.nextChar();
                                            }
                                        }
                                        var v = currentValue.toString();
                                        if (Kotlin.equals('true', v.toLowerCase())) {
                                            jsonValue = true;
                                        }
                                        else if (Kotlin.equals('false', v.toLowerCase())) {
                                            jsonValue = false;
                                        }
                                        else {
                                            jsonValue = v.toLowerCase();
                                        }
                                        tokenType = _.org.kevoree.modeling.api.json.Type.VALUE;
                                    }
                                    else {
                                        tokenType = _.org.kevoree.modeling.api.json.Type.EOF;
                                    }
                                    return new _.org.kevoree.modeling.api.json.Token(tokenType, jsonValue);
                                }
                            })
                        }),
                        KMFContainer: Kotlin.createTrait(null),
                        KMFFactory: Kotlin.createTrait(null),
                        ModelCloner: Kotlin.createTrait(null, /** @lends _.org.kevoree.modeling.api.ModelCloner.prototype */ {
                            mainFactory: {
                                get: function () {
                                    return this.$mainFactory_czvnov$;
                                },
                                set: function (tmp$0) {
                                    this.$mainFactory_czvnov$ = tmp$0;
                                }
                            },
                            clone: function (o) {
                                return this.clone_1(o, false);
                            },
                            clone_1: function (o, readOnly) {
                                return this.clone_2(o, readOnly, false);
                            },
                            cloneMutableOnly: function (o, readOnly) {
                                return this.clone_2(o, readOnly, true);
                            },
                            cloneModelElem: function (src) {
                                var tmp$0;
                                var clonedSrc = (tmp$0 = this.mainFactory.create(src.metaClassName())) != null ? tmp$0 : Kotlin.throwNPE();
                                var attributesCloner = _.org.kevoree.modeling.api.ModelCloner.cloneModelElem$f(clonedSrc);
                                src.visitAttributes(attributesCloner);
                                return clonedSrc;
                            },
                            resolveModelElem: function (src, target, context, mutableOnly) {
                                var refResolver = _.org.kevoree.modeling.api.ModelCloner.resolveModelElem$f(mutableOnly, target, context);
                                src.visit(refResolver, false, true, true);
                            },
                            clone_2: function (o, readOnly, mutableOnly) {
                                var context = this.createContext();
                                var clonedObject = this.cloneModelElem(o);
                                context.put_wn2jw4$(o, clonedObject);
                                var cloneGraphVisitor = _.org.kevoree.modeling.api.ModelCloner.clone_2$f(mutableOnly, context, this);
                                o.visit(cloneGraphVisitor, true, true, false);
                                var resolveGraphVisitor = _.org.kevoree.modeling.api.ModelCloner.clone_2$f_0(mutableOnly, context, this, readOnly);
                                this.resolveModelElem(o, clonedObject, context, mutableOnly);
                                o.visit(resolveGraphVisitor, true, true, false);
                                if (readOnly) {
                                    clonedObject.setInternalReadOnly();
                                }
                                return clonedObject != null ? clonedObject : Kotlin.throwNPE();
                            }
                        }, /** @lends _.org.kevoree.modeling.api.ModelCloner */ {
                            cloneModelElem$f: function (clonedSrc) {
                                return Kotlin.createObject(function () {
                                    return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                                }, null, {
                                    visit: function (value, name, parent) {
                                        if (value != null) {
                                            if (Kotlin.isType(value, Kotlin.ArrayList)) {
                                                var clonedList = new Kotlin.ArrayList();
                                                clonedList.addAll_xeylzf$(value != null ? value : Kotlin.throwNPE());
                                                clonedSrc.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, name, clonedList, false, false);
                                            }
                                            else {
                                                clonedSrc.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, name, value, false, false);
                                            }
                                        }
                                    }
                                });
                            },
                            resolveModelElem$f: function (mutableOnly, target, context) {
                                return Kotlin.createObject(function () {
                                    return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                }, function $fun() {
                                    $fun.baseInitializer.call(this);
                                }, {
                                    visit: function (elem, refNameInParent, parent) {
                                        if (mutableOnly && elem.isRecursiveReadOnly()) {
                                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, refNameInParent, elem, false, false);
                                        }
                                        else {
                                            var elemResolved = context.get_za3rmp$(elem);
                                            if (elemResolved == null) {
                                                throw new Error('Cloner error, not self-contain model, the element ' + elem.path() + ' is contained in the root element');
                                            }
                                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, refNameInParent, elemResolved, false, false);
                                        }
                                    }
                                });
                            },
                            clone_2$f: function (mutableOnly, context, this$ModelCloner) {
                                return Kotlin.createObject(function () {
                                    return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                }, function $fun() {
                                    $fun.baseInitializer.call(this);
                                }, {
                                    visit: function (elem, refNameInParent, parent) {
                                        if (mutableOnly && elem.isRecursiveReadOnly()) {
                                            this.noChildrenVisit();
                                        }
                                        else {
                                            context.put_wn2jw4$(elem, this$ModelCloner.cloneModelElem(elem));
                                        }
                                    }
                                });
                            },
                            clone_2$f_0: function (mutableOnly, context, this$ModelCloner, readOnly) {
                                return Kotlin.createObject(function () {
                                    return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                }, function $fun() {
                                    $fun.baseInitializer.call(this);
                                }, {
                                    visit: function (elem, refNameInParent, parent) {
                                        if (mutableOnly && elem.isRecursiveReadOnly()) {
                                        }
                                        else {
                                            var tmp$0;
                                            var clonedObj = (tmp$0 = context.get_za3rmp$(elem)) != null ? tmp$0 : Kotlin.throwNPE();
                                            this$ModelCloner.resolveModelElem(elem, clonedObj, context, mutableOnly);
                                            if (readOnly) {
                                                clonedObj.setInternalReadOnly();
                                            }
                                        }
                                    }
                                });
                            }
                        }),
                        ModelLoader: Kotlin.createTrait(null),
                        ModelSerializer: Kotlin.createTrait(null),
                        persistence: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling.api.persistence */ {
                            Batch: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                                this.elements = new Kotlin.ArrayList();
                            }, /** @lends _.org.kevoree.modeling.api.persistence.Batch.prototype */ {
                                visit: function (elem, refNameInParent, parent) {
                                    if (Kotlin.isType(elem, _.org.kevoree.modeling.api.persistence.KMFContainerProxy)) {
                                        if (!elem.isResolved) {
                                            this.noChildrenVisit();
                                            this.noReferencesVisit();
                                        }
                                        else {
                                            this.elements.add_za3rmp$(elem);
                                        }
                                    }
                                    else {
                                        this.elements.add_za3rmp$(elem);
                                    }
                                },
                                addElement: function (e) {
                                    this.elements.add_za3rmp$(e);
                                    return this;
                                },
                                addElementAndReachable: function (e) {
                                    this.elements.add_za3rmp$(e);
                                    e.visit(this, true, true, true);
                                    return this;
                                }
                            }),
                            DataStore: Kotlin.createTrait(null),
                            KMFContainerProxy: Kotlin.createTrait(function () {
                                return [_.org.kevoree.modeling.api.KMFContainer];
                            }, /** @lends _.org.kevoree.modeling.api.persistence.KMFContainerProxy.prototype */ {
                                isResolved: {
                                    get: function () {
                                        return this.$isResolved_q9gcci$;
                                    },
                                    set: function (tmp$0) {
                                        this.$isResolved_q9gcci$ = tmp$0;
                                    }
                                },
                                inResolution: {
                                    get: function () {
                                        return this.$inResolution_fvhr0z$;
                                    },
                                    set: function (tmp$0) {
                                        this.$inResolution_fvhr0z$ = tmp$0;
                                    }
                                },
                                originFactory: {
                                    get: function () {
                                        return this.$originFactory_8fzws8$;
                                    },
                                    set: function (tmp$0) {
                                        this.$originFactory_8fzws8$ = tmp$0;
                                    }
                                },
                                relativeLookupFrom: function (base, relationInParent, key) {
                                    var currentPath = base.path();
                                    var tmp$0;
                                    return (tmp$0 = this.originFactory) != null ? tmp$0.lookupFrom(Kotlin.toString(currentPath) + '/' + relationInParent + '[' + key + ']', base) : null;
                                }
                            }),
                            MemoryDataStore: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.persistence.DataStore];
                            }, function () {
                                this.maps = new Kotlin.PrimitiveHashMap();
                            }, /** @lends _.org.kevoree.modeling.api.persistence.MemoryDataStore.prototype */ {
                                getSegmentKeys: function (segment) {
                                    if (this.maps.containsKey_za3rmp$(segment)) {
                                        var tmp$0;
                                        ((tmp$0 = this.maps.get_za3rmp$(segment)) != null ? tmp$0 : Kotlin.throwNPE()).keySet();
                                    }
                                    return new Kotlin.PrimitiveHashSet();
                                },
                                getSegments: function () {
                                    return this.maps.keySet();
                                },
                                sync: function () {
                                },
                                getOrCreateSegment: function (segment) {
                                    if (!this.maps.containsKey_za3rmp$(segment)) {
                                        this.maps.put_wn2jw4$(segment, new Kotlin.PrimitiveHashMap());
                                    }
                                    var tmp$0;
                                    return (tmp$0 = this.maps.get_za3rmp$(segment)) != null ? tmp$0 : Kotlin.throwNPE();
                                },
                                put: function (segment, key, value) {
                                    this.getOrCreateSegment(segment).put_wn2jw4$(key, value);
                                },
                                get: function (segment, key) {
                                    return this.getOrCreateSegment(segment).get_za3rmp$(key);
                                },
                                remove: function (segment, key) {
                                    this.getOrCreateSegment(segment).remove_za3rmp$(key);
                                },
                                dump: function () {
                                    {
                                        var tmp$0 = this.maps;
                                        while (tmp$0.hasNext()) {
                                            var k = tmp$0.next();
                                            Kotlin.println('Map ' + _.kotlin.get_key(k));
                                            {
                                                var tmp$1 = _.kotlin.get_value(k);
                                                while (tmp$1.hasNext()) {
                                                    var t = tmp$1.next();
                                                    Kotlin.println(_.kotlin.get_key(t) + '->' + _.kotlin.get_value(t));
                                                }
                                            }
                                        }
                                    }
                                }
                            }),
                            PersistenceKMFFactory: Kotlin.createTrait(function () {
                                return [_.org.kevoree.modeling.api.KMFFactory];
                            }, /** @lends _.org.kevoree.modeling.api.persistence.PersistenceKMFFactory.prototype */ {
                                datastore: {
                                    get: function () {
                                        return this.$datastore_xkqfe9$;
                                    },
                                    set: function (tmp$0) {
                                        this.$datastore_xkqfe9$ = tmp$0;
                                    }
                                },
                                compare: {
                                    get: function () {
                                        return this.$compare_71ixh9$;
                                    },
                                    set: function (tmp$0) {
                                        this.$compare_71ixh9$ = tmp$0;
                                    }
                                },
                                remove: function (elem) {
                                    if (this.datastore != null) {
                                        var tmp$0, tmp$1, tmp$2, tmp$3;
                                        ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).remove('trace', (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE());
                                        ((tmp$2 = this.datastore) != null ? tmp$2 : Kotlin.throwNPE()).remove('type', (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE());
                                    }
                                },
                                elem_cache: {
                                    get: function () {
                                        return this.$elem_cache_55i3ba$;
                                    }
                                },
                                clearCache: function () {
                                    this.elem_cache.clear();
                                },
                                lookup: function (path) {
                                    return this.lookupFrom(path, null);
                                },
                                lookupFrom: function (path, origin) {
                                    var path2 = path;
                                    if (Kotlin.equals(path2, '/')) {
                                        path2 = '';
                                    }
                                    if (path2.startsWith('/')) {
                                        path2 = path2.substring(1);
                                    }
                                    if (this.elem_cache.containsKey_za3rmp$(path2)) {
                                        return this.elem_cache.get_za3rmp$(path2);
                                    }
                                    if (this.datastore != null) {
                                        var tmp$0;
                                        var typeName = ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).get('type', path2);
                                        if (typeName != null) {
                                            var tmp$1;
                                            var elem = (tmp$1 = this.create(typeName)) != null ? tmp$1 : Kotlin.throwNPE();
                                            this.elem_cache.put_wn2jw4$(path2, elem);
                                            elem.isResolved = false;
                                            elem.setOriginPath(path2);
                                            return elem;
                                        }
                                        else {
                                            throw new Error('Empty Type Name for ' + path2);
                                        }
                                    }
                                    return null;
                                },
                                getTraces: function (origin) {
                                    var sequence = this.compare.createSequence();
                                    var tmp$0, tmp$1;
                                    var traces = (tmp$0 = this.datastore) != null ? tmp$0.get('trace', (tmp$1 = origin.path()) != null ? tmp$1 : Kotlin.throwNPE()) : null;
                                    if (traces != null) {
                                        sequence.populateFromString(traces);
                                        return sequence;
                                    }
                                    return null;
                                },
                                persist: function (elem) {
                                    if (this.datastore != null) {
                                        var traces = elem.toTraces(true, true);
                                        var traceSeq = this.compare.createSequence();
                                        traceSeq.populate(traces);
                                        var tmp$0, tmp$1, tmp$2, tmp$3;
                                        ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).put('trace', (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE(), traceSeq.exportToString());
                                        ((tmp$2 = this.datastore) != null ? tmp$2 : Kotlin.throwNPE()).put('type', (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE(), elem.metaClassName());
                                        if (Kotlin.isType(elem, _.org.kevoree.modeling.api.persistence.KMFContainerProxy)) {
                                            elem.originFactory = this;
                                        }
                                    }
                                },
                                persistBatch: function (batch) {
                                    {
                                        var tmp$0 = batch.elements.iterator();
                                        while (tmp$0.hasNext()) {
                                            var b = tmp$0.next();
                                            this.persist(b);
                                        }
                                    }
                                },
                                createBatch: function () {
                                    return new _.org.kevoree.modeling.api.persistence.Batch();
                                },
                                commit: function () {
                                    var tmp$0;
                                    (tmp$0 = this.datastore) != null ? tmp$0.sync() : null;
                                }
                            })
                        }),
                        time: Kotlin.definePackage(null, /** @lends _.org.kevoree.modeling.api.time */ {
                            RelativeTimeStrategy: Kotlin.createClass(function () {
                                return [Kotlin.Enum];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, null, /** @lends _.org.kevoree.modeling.api.time.RelativeTimeStrategy */ {
                                object_initializer$: function () {
                                    return Kotlin.createEnumEntries({
                                        RELATIVE: new _.org.kevoree.modeling.api.time.RelativeTimeStrategy(),
                                        ABSOLUTE: new _.org.kevoree.modeling.api.time.RelativeTimeStrategy(),
                                        LATEST: new _.org.kevoree.modeling.api.time.RelativeTimeStrategy()
                                    });
                                }
                            }),
                            TimeAwareKMFContainer: Kotlin.createTrait(function () {
                                return [_.org.kevoree.modeling.api.persistence.KMFContainerProxy];
                            }, /** @lends _.org.kevoree.modeling.api.time.TimeAwareKMFContainer.prototype */ {
                                previousTimePoint: {
                                    get: function () {
                                        return this.$previousTimePoint_y8xt5x$;
                                    },
                                    set: function (tmp$0) {
                                        this.$previousTimePoint_y8xt5x$ = tmp$0;
                                    }
                                },
                                shiftOffset: function (offset) {
                                    if (this.now != null) {
                                        var tmp$0;
                                        return this.shift(((tmp$0 = this.now) != null ? tmp$0 : Kotlin.throwNPE()).shift(offset));
                                    }
                                    return null;
                                },
                                shift: function (timePoint) {
                                    if (this.originFactory != null) {
                                        var tmp$0, tmp$1, tmp$2;
                                        var newObject = (tmp$1 = ((tmp$0 = this.originFactory) != null ? tmp$0 : Kotlin.throwNPE()).create(this.metaClassName())) != null ? tmp$1 : Kotlin.throwNPE();
                                        newObject.isResolved = true;
                                        newObject.setOriginPath((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE());
                                        newObject.now = timePoint;
                                        newObject.previousTimePoint = this.now;
                                        return newObject;
                                    }
                                    return null;
                                },
                                now: {
                                    get: function () {
                                        return this.$now_k63ot7$;
                                    },
                                    set: function (tmp$0) {
                                        this.$now_k63ot7$ = tmp$0;
                                    }
                                },
                                previous: function () {
                                    var tmp$0, tmp$1, tmp$2;
                                    var previousTimePoint = ((tmp$0 = this.originFactory) != null ? tmp$0 : Kotlin.throwNPE()).previous((tmp$1 = this.now) != null ? tmp$1 : Kotlin.throwNPE(), (tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE());
                                    if (previousTimePoint != null) {
                                        return this.shift(previousTimePoint);
                                    }
                                    return null;
                                },
                                next: function () {
                                    var tmp$0, tmp$1, tmp$2;
                                    var nextTimePoint = ((tmp$0 = this.originFactory) != null ? tmp$0 : Kotlin.throwNPE()).next((tmp$1 = this.now) != null ? tmp$1 : Kotlin.throwNPE(), (tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE());
                                    if (nextTimePoint != null) {
                                        return this.shift(nextTimePoint);
                                    }
                                    return null;
                                }
                            }),
                            TimeAwareKMFFactory: Kotlin.createTrait(function () {
                                return [_.org.kevoree.modeling.api.persistence.PersistenceKMFFactory];
                            }, /** @lends _.org.kevoree.modeling.api.time.TimeAwareKMFFactory.prototype */ {
                                previous: function (currentNow, path) {
                                    var currentNowString = currentNow.toString();
                                    var tmp$0, tmp$1;
                                    var previousPrevious = ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), currentNowString + '/' + path);
                                    if (previousPrevious != null) {
                                        return _.org.kevoree.modeling.api.time.TimePoint.object.create(previousPrevious != null ? previousPrevious : Kotlin.throwNPE());
                                    }
                                    previousPrevious = ((tmp$1 = this.datastore) != null ? tmp$1 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), currentNowString + '/' + path);
                                    if (previousPrevious != null) {
                                        return _.org.kevoree.modeling.api.time.TimePoint.object.create(previousPrevious != null ? previousPrevious : Kotlin.throwNPE());
                                    }
                                    return null;
                                },
                                next: function (currentNow, path) {
                                    var currentNowString = currentNow.toString();
                                    var tmp$0;
                                    var previousPrevious = ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.NEXT.name(), currentNowString + '/' + path);
                                    if (previousPrevious != null) {
                                        return _.org.kevoree.modeling.api.time.TimePoint.object.create(previousPrevious != null ? previousPrevious : Kotlin.throwNPE());
                                    }
                                    return null;
                                },
                                shiftElem: function (path, relativeNow) {
                                },
                                shiftQuery: function (query, relativeNow) {
                                },
                                relativeTime: {
                                    get: function () {
                                        return this.$relativeTime_53j5cx$;
                                    },
                                    set: function (tmp$0) {
                                        this.$relativeTime_53j5cx$ = tmp$0;
                                    }
                                },
                                queryMap: {
                                    get: function () {
                                        return this.$queryMap_hz4fx8$;
                                    },
                                    set: function (tmp$0) {
                                        this.$queryMap_hz4fx8$ = tmp$0;
                                    }
                                },
                                relativityStrategy: {
                                    get: function () {
                                        return this.$relativityStrategy_lzxf4$;
                                    },
                                    set: function (tmp$0) {
                                        this.$relativityStrategy_lzxf4$ = tmp$0;
                                    }
                                },
                                setPrevious: function (p) {
                                    var tmp$0;
                                    ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), this.relativeTime.toString(), p.toString());
                                },
                                persist: function (elem) {
                                    if (this.datastore != null) {
                                        var traces = elem.toTraces(true, true);
                                        var traceSeq = this.compare.createSequence();
                                        traceSeq.populate(traces);
                                        var currentNow = elem != null ? elem.now : null;
                                        if (currentNow == null) {
                                            currentNow = this.relativeTime;
                                        }
                                        var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                        var currentPath = (tmp$0 = elem.path()) != null ? tmp$0 : Kotlin.throwNPE();
                                        var alreadyExists = ((tmp$1 = this.datastore) != null ? tmp$1 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(currentNow) + '/' + currentPath) != null;
                                        ((tmp$2 = this.datastore) != null ? tmp$2 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(currentNow) + '/' + currentPath, traceSeq.exportToString());
                                        var path = (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE();
                                        var previousType = ((tmp$4 = this.datastore) != null ? tmp$4 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.TYPE.name(), path);
                                        if (previousType == null) {
                                            var tmp$5, tmp$6;
                                            ((tmp$5 = this.datastore) != null ? tmp$5 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.TYPE.name(), (tmp$6 = elem.path()) != null ? tmp$6 : Kotlin.throwNPE(), elem.metaClassName());
                                        }
                                        else {
                                            if (!Kotlin.equals(previousType, elem.metaClassName())) {
                                                throw new Error('Unconsitant typing : previous was : ' + previousType + ' , can persist ' + elem.metaClassName() + ' for the path :' + path);
                                            }
                                        }
                                        if (!alreadyExists && false) {
                                            if (Kotlin.isType(elem, _.org.kevoree.modeling.api.time.TimeAwareKMFContainer)) {
                                                if (elem.previousTimePoint != null) {
                                                    var tmp$7;
                                                    ((tmp$7 = this.datastore) != null ? tmp$7 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), Kotlin.toString(currentNow) + '/' + currentPath, Kotlin.toString(elem.previousTimePoint));
                                                }
                                            }
                                            var tmp$8;
                                            var currentLatestString = ((tmp$8 = this.datastore) != null ? tmp$8 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), currentPath);
                                            var currentLatest = null;
                                            if (currentLatestString != null) {
                                                currentLatest = _.org.kevoree.modeling.api.time.TimePoint.object.create(currentLatestString != null ? currentLatestString : Kotlin.throwNPE());
                                            }
                                            if (currentLatest == null || (currentLatest != null ? currentLatest : Kotlin.throwNPE()).compareTo(currentNow != null ? currentNow : Kotlin.throwNPE()) < 0) {
                                                var tmp$9;
                                                ((tmp$9 = this.datastore) != null ? tmp$9 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), currentPath, Kotlin.toString(currentNow));
                                                if (currentLatest != null) {
                                                    var tmp$10, tmp$11;
                                                    ((tmp$10 = this.datastore) != null ? tmp$10 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), Kotlin.toString(currentNow) + '/' + currentPath, Kotlin.toString(currentLatest));
                                                    ((tmp$11 = this.datastore) != null ? tmp$11 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.NEXT.name(), Kotlin.toString(currentLatest) + '/' + currentPath, Kotlin.toString(currentNow));
                                                }
                                            }
                                            else {
                                                var tmp$12;
                                                var previousGlobal = ((tmp$12 = this.datastore) != null ? tmp$12 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), Kotlin.toString(currentNow));
                                                if (previousGlobal == null) {
                                                    var immediatePreviousVersion = this.lookupImmediatePreviousVersionOf(currentNow != null ? currentNow : Kotlin.throwNPE(), currentPath);
                                                    var immediatePreviousVersionString = Kotlin.toString(immediatePreviousVersion);
                                                    var tmp$13, tmp$16, tmp$17;
                                                    var previousPrevious = ((tmp$13 = this.datastore) != null ? tmp$13 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), immediatePreviousVersionString + '/' + currentPath);
                                                    if (previousPrevious != null) {
                                                        var tmp$14, tmp$15;
                                                        ((tmp$14 = this.datastore) != null ? tmp$14 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), Kotlin.toString(currentNow) + '/' + currentPath, Kotlin.toString(previousPrevious));
                                                        ((tmp$15 = this.datastore) != null ? tmp$15 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.NEXT.name(), Kotlin.toString(previousPrevious) + '/' + currentPath, Kotlin.toString(currentNow));
                                                    }
                                                    ((tmp$16 = this.datastore) != null ? tmp$16 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), immediatePreviousVersionString + '/' + currentPath, Kotlin.toString(currentNow));
                                                    ((tmp$17 = this.datastore) != null ? tmp$17 : Kotlin.throwNPE()).put(_.org.kevoree.modeling.api.time.TimeSegment.object.NEXT.name(), Kotlin.toString(currentNow) + '/' + currentPath, immediatePreviousVersionString.toString());
                                                }
                                            }
                                        }
                                    }
                                },
                                lookupImmediatePreviousVersionOf: function (currentNow, path) {
                                    var tmp$0, tmp$1;
                                    var currentLatest = ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), path);
                                    var result = null;
                                    if (currentLatest != null) {
                                        result = _.org.kevoree.modeling.api.time.TimePoint.object.create(currentLatest != null ? currentLatest : Kotlin.throwNPE());
                                    }
                                    var currentLatestPreviousString = ((tmp$1 = this.datastore) != null ? tmp$1 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), Kotlin.toString(currentLatest) + '/' + path);
                                    if (currentLatestPreviousString == null) {
                                        var tmp$2;
                                        currentLatestPreviousString = ((tmp$2 = this.datastore) != null ? tmp$2 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), Kotlin.toString(currentLatest));
                                    }
                                    while (currentLatestPreviousString != null && _.org.kevoree.modeling.api.time.TimePoint.object.create(currentLatestPreviousString != null ? currentLatestPreviousString : Kotlin.throwNPE()).compareTo(currentNow) > 0) {
                                        result = _.org.kevoree.modeling.api.time.TimePoint.object.create(currentLatestPreviousString != null ? currentLatestPreviousString : Kotlin.throwNPE());
                                        var tmp$3;
                                        currentLatestPreviousString = ((tmp$3 = this.datastore) != null ? tmp$3 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.PREVIOUS.name(), Kotlin.toString(currentLatestPreviousString) + '/' + path);
                                        if (currentLatestPreviousString == null) {
                                            var tmp$4;
                                            currentLatestPreviousString = ((tmp$4 = this.datastore) != null ? tmp$4 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), Kotlin.toString(currentLatestPreviousString));
                                        }
                                    }
                                    return result;
                                },
                                removeVersion: function (t) {
                                },
                                remove: function (elem) {
                                    if (this.datastore != null) {
                                        var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5;
                                        ((tmp$0 = this.datastore) != null ? tmp$0 : Kotlin.throwNPE()).remove(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), (tmp$1 = elem.path()) != null ? tmp$1 : Kotlin.throwNPE());
                                        ((tmp$2 = this.datastore) != null ? tmp$2 : Kotlin.throwNPE()).remove(_.org.kevoree.modeling.api.time.TimeSegment.object.TYPE.name(), (tmp$3 = elem.path()) != null ? tmp$3 : Kotlin.throwNPE());
                                        ((tmp$4 = this.datastore) != null ? tmp$4 : Kotlin.throwNPE()).remove(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), (tmp$5 = elem.path()) != null ? tmp$5 : Kotlin.throwNPE());
                                    }
                                },
                                lookupFromTime: function (path, time) {
                                    return this.internal_lookupFrom(path, null, time);
                                },
                                lookupFrom: function (path, origin) {
                                    return this.internal_lookupFrom(path, origin, null);
                                },
                                internal_lookupFrom: function (path, origin, time) {
                                    var path2 = path;
                                    if (Kotlin.equals(path2, '/')) {
                                        path2 = '';
                                    }
                                    if (path2.startsWith('/')) {
                                        path2 = path2.substring(1);
                                    }
                                    var currentTime = origin != null ? origin.now : null;
                                    if (time != null) {
                                        currentTime = time;
                                    }
                                    var tmp$0 = this.relativityStrategy;
                                    if (tmp$0 === _.org.kevoree.modeling.api.time.RelativeTimeStrategy.object.ABSOLUTE) {
                                        currentTime = this.relativeTime;
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.time.RelativeTimeStrategy.object.LATEST) {
                                        var tmp$1, tmp$2;
                                        currentTime = _.org.kevoree.modeling.api.time.TimePoint.object.create((tmp$2 = ((tmp$1 = this.datastore) != null ? tmp$1 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), path2)) != null ? tmp$2 : Kotlin.throwNPE());
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.time.RelativeTimeStrategy.object.RELATIVE) {
                                        if (currentTime == null) {
                                            currentTime = this.relativeTime;
                                        }
                                        var tmp$3;
                                        var existingVersion = (tmp$3 = this.datastore) != null ? tmp$3.get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(currentTime) + '/' + path) : null;
                                        if (existingVersion == null) {
                                            currentTime = this.lookupImmediatePreviousVersionOf(currentTime != null ? currentTime : Kotlin.throwNPE(), path);
                                        }
                                    }
                                    else {
                                    }
                                    if (currentTime == null) {
                                        var tmp$4, tmp$5;
                                        currentTime = _.org.kevoree.modeling.api.time.TimePoint.object.create((tmp$5 = ((tmp$4 = this.datastore) != null ? tmp$4 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.LATEST.name(), path2)) != null ? tmp$5 : Kotlin.throwNPE());
                                    }
                                    var composedKey = (currentTime != null ? currentTime : Kotlin.throwNPE()).toString() + path2;
                                    if (this.elem_cache.containsKey_za3rmp$(composedKey)) {
                                        return this.elem_cache.get_za3rmp$(composedKey);
                                    }
                                    if (this.datastore != null) {
                                        var tmp$6;
                                        var typeName = ((tmp$6 = this.datastore) != null ? tmp$6 : Kotlin.throwNPE()).get(_.org.kevoree.modeling.api.time.TimeSegment.object.TYPE.name(), path2);
                                        if (typeName != null) {
                                            var tmp$7;
                                            var elem = (tmp$7 = this.create(typeName)) != null ? tmp$7 : Kotlin.throwNPE();
                                            this.elem_cache.put_wn2jw4$(composedKey, elem);
                                            elem.isResolved = false;
                                            elem.now = currentTime != null ? currentTime : Kotlin.throwNPE();
                                            elem.setOriginPath(path2);
                                            return elem;
                                        }
                                        else {
                                            throw new Error('Empty Type Name for ' + path2);
                                        }
                                    }
                                    return null;
                                },
                                getTraces: function (origin) {
                                    var currentNow = (origin != null ? origin : Kotlin.throwNPE()).now;
                                    var tmp$0, tmp$1, tmp$3;
                                    var currentPath = (tmp$0 = origin.path()) != null ? tmp$0 : Kotlin.throwNPE();
                                    var sequence = this.compare.createSequence();
                                    var traces = (tmp$1 = this.datastore) != null ? tmp$1.get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(currentNow) + '/' + currentPath) : null;
                                    if (traces != null) {
                                        sequence.populateFromString(traces != null ? traces : Kotlin.throwNPE());
                                        return sequence;
                                    }
                                    var previousTimePoint = (origin != null ? origin : Kotlin.throwNPE()).previousTimePoint;
                                    if (previousTimePoint != null) {
                                        var tmp$2;
                                        traces = (tmp$2 = this.datastore) != null ? tmp$2.get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(previousTimePoint) + '/' + currentPath) : null;
                                        if (traces != null) {
                                            sequence.populateFromString(traces != null ? traces : Kotlin.throwNPE());
                                            return sequence;
                                        }
                                    }
                                    var resolved = this.resolvePreviousGetTrace(origin, this.relativeTime.toString(), sequence);
                                    if (resolved) {
                                        return sequence;
                                    }
                                    previousTimePoint = this.lookupImmediatePreviousVersionOf(currentNow != null ? currentNow : Kotlin.throwNPE(), currentPath);
                                    traces = (tmp$3 = this.datastore) != null ? tmp$3.get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), Kotlin.toString(previousTimePoint) + '/' + currentPath) : null;
                                    if (traces != null) {
                                        sequence.populateFromString(traces != null ? traces : Kotlin.throwNPE());
                                        return sequence;
                                    }
                                    return sequence;
                                },
                                resolvePreviousGetTrace: function (origin, current, sequence) {
                                    var tmp$0, tmp$1, tmp$2;
                                    var previous = (tmp$0 = this.datastore) != null ? tmp$0.get(_.org.kevoree.modeling.api.time.TimeSegment.object.ORIGIN.name(), current.toString()) : null;
                                    if (previous == null) {
                                        return false;
                                    }
                                    var currentPath = (tmp$1 = origin.path()) != null ? tmp$1 : Kotlin.throwNPE();
                                    var composedKey = Kotlin.toString(previous) + '/' + currentPath;
                                    var traces = (tmp$2 = this.datastore) != null ? tmp$2.get(_.org.kevoree.modeling.api.time.TimeSegment.object.RAW.name(), composedKey) : null;
                                    if (traces != null) {
                                        sequence.populateFromString(traces != null ? traces : Kotlin.throwNPE());
                                        return true;
                                    }
                                    else {
                                        return this.resolvePreviousGetTrace(origin, previous != null ? previous : Kotlin.throwNPE(), sequence);
                                    }
                                }
                            }),
                            TimePoint: Kotlin.createClass(null, function (timestamp, sequenceNumber) {
                                this.timestamp = timestamp;
                                this.sequenceNumber = sequenceNumber;
                            }, /** @lends _.org.kevoree.modeling.api.time.TimePoint.prototype */ {
                                compareTo: function (other) {
                                    if (Kotlin.equals(this, other)) {
                                        return 0;
                                    }
                                    if (this.timestamp === other.timestamp) {
                                        return this.sequenceNumber.compareTo_za3rmp$(other.sequenceNumber);
                                    }
                                    else {
                                        return this.timestamp.compareTo_za3rmp$(other.timestamp);
                                    }
                                },
                                shift: function (timeOffset) {
                                    return new _.org.kevoree.modeling.api.time.TimePoint(this.timestamp + timeOffset, 0.0);
                                },
                                toString: function () {
                                    return this.timestamp.toString() + ':' + this.sequenceNumber;
                                }
                            }, /** @lends _.org.kevoree.modeling.api.time.TimePoint */ {
                                object_initializer$: function () {
                                    return Kotlin.createObject(null, null, {
                                        create: function (v) {
                                            var vv = Kotlin.splitString(v, ':');
                                            var tmp$0, tmp$1;
                                            return new _.org.kevoree.modeling.api.time.TimePoint((tmp$0 = vv[0]) != null ? tmp$0 : Kotlin.throwNPE(), (tmp$1 = vv[1]) != null ? tmp$1 : Kotlin.throwNPE());
                                        }
                                    });
                                }
                            }),
                            TimeSegment: Kotlin.createClass(function () {
                                return [Kotlin.Enum];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, null, /** @lends _.org.kevoree.modeling.api.time.TimeSegment */ {
                                object_initializer$: function () {
                                    return Kotlin.createEnumEntries({
                                        LATEST: new _.org.kevoree.modeling.api.time.TimeSegment(),
                                        RAW: new _.org.kevoree.modeling.api.time.TimeSegment(),
                                        TYPE: new _.org.kevoree.modeling.api.time.TimeSegment(),
                                        PREVIOUS: new _.org.kevoree.modeling.api.time.TimeSegment(),
                                        NEXT: new _.org.kevoree.modeling.api.time.TimeSegment(),
                                        ORIGIN: new _.org.kevoree.modeling.api.time.TimeSegment()
                                    });
                                }
                            })
                        }),
                        trace: Kotlin.definePackage(function () {
                            this.ModelTraceConstants = Kotlin.createObject(null, function () {
                                this.traceType = 't';
                                this.src = 's';
                                this.refname = 'r';
                                this.previouspath = 'p';
                                this.typename = 'n';
                                this.objpath = 'o';
                                this.content = 'c';
                                this.openJSON = '{';
                                this.closeJSON = '}';
                                this.bb = '"';
                                this.coma = ',';
                                this.dp = ':';
                            });
                        }, /** @lends _.org.kevoree.modeling.api.trace */ {
                            DefaultTraceConverter: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.TraceConverter];
                            }, function () {
                                this.metaClassNameEquivalence_1_rqkn57$ = new Kotlin.PrimitiveHashMap();
                                this.metaClassNameEquivalence_2_rqkn58$ = new Kotlin.PrimitiveHashMap();
                                this.attNameEquivalence_1_vwmrr1$ = new Kotlin.PrimitiveHashMap();
                                this.attNameEquivalence_2_vwmrr2$ = new Kotlin.PrimitiveHashMap();
                            }, /** @lends _.org.kevoree.modeling.api.trace.DefaultTraceConverter.prototype */ {
                                addMetaClassEquivalence: function (name1, name2) {
                                    this.metaClassNameEquivalence_1_rqkn57$.put_wn2jw4$(name1, name2);
                                    this.metaClassNameEquivalence_2_rqkn58$.put_wn2jw4$(name2, name2);
                                },
                                addAttEquivalence: function (name1, name2) {
                                    var fqnArray_1 = Kotlin.splitString(name1, '#');
                                    var fqnArray_2 = Kotlin.splitString(name1, '#');
                                    this.attNameEquivalence_1_vwmrr1$.put_wn2jw4$(name1, name2);
                                    this.attNameEquivalence_2_vwmrr2$.put_wn2jw4$(name2, name2);
                                },
                                convert: function (trace) {
                                    if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                                        var addTrace = trace != null ? trace : Kotlin.throwNPE();
                                        var newTrace = new _.org.kevoree.modeling.api.trace.ModelAddTrace(addTrace.srcPath, addTrace.refName, addTrace.previousPath, this.tryConvertClassName(addTrace.typeName));
                                        return newTrace;
                                    }
                                    else if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                                        var setTrace = trace != null ? trace : Kotlin.throwNPE();
                                        var newTrace_0 = new _.org.kevoree.modeling.api.trace.ModelSetTrace(setTrace.srcPath, setTrace.refName, setTrace.objPath, setTrace.content, this.tryConvertClassName(setTrace.typeName));
                                        return newTrace_0;
                                    }
                                    else {
                                        return trace;
                                    }
                                },
                                tryConvertPath: function (previousPath) {
                                    if (previousPath == null) {
                                        return null;
                                    }
                                    return previousPath;
                                },
                                tryConvertClassName: function (previousClassName) {
                                    if (previousClassName == null) {
                                        return null;
                                    }
                                    if (this.metaClassNameEquivalence_1_rqkn57$.containsKey_za3rmp$(previousClassName)) {
                                        var tmp$0;
                                        return (tmp$0 = this.metaClassNameEquivalence_1_rqkn57$.get_za3rmp$(previousClassName)) != null ? tmp$0 : Kotlin.throwNPE();
                                    }
                                    if (this.metaClassNameEquivalence_2_rqkn58$.containsKey_za3rmp$(previousClassName)) {
                                        var tmp$1;
                                        return (tmp$1 = this.metaClassNameEquivalence_2_rqkn58$.get_za3rmp$(previousClassName)) != null ? tmp$1 : Kotlin.throwNPE();
                                    }
                                    return previousClassName;
                                },
                                tryConvertAttName: function (previousAttName) {
                                    if (previousAttName == null) {
                                        return null;
                                    }
                                    var FQNattName = previousAttName;
                                    if (this.attNameEquivalence_1_vwmrr1$.containsKey_za3rmp$(FQNattName)) {
                                        var tmp$0;
                                        return (tmp$0 = this.attNameEquivalence_1_vwmrr1$.get_za3rmp$(FQNattName)) != null ? tmp$0 : Kotlin.throwNPE();
                                    }
                                    if (this.attNameEquivalence_2_vwmrr2$.containsKey_za3rmp$(FQNattName)) {
                                        var tmp$1;
                                        return (tmp$1 = this.attNameEquivalence_2_vwmrr2$.get_za3rmp$(FQNattName)) != null ? tmp$1 : Kotlin.throwNPE();
                                    }
                                    return previousAttName;
                                }
                            }),
                            Event2Trace: Kotlin.createClass(null, function (compare) {
                                this.compare = compare;
                            }, /** @lends _.org.kevoree.modeling.api.trace.Event2Trace.prototype */ {
                                convert: function (event) {
                                    var result = new Kotlin.ArrayList();
                                    var tmp$0 = event.etype;
                                    if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                        var tmp$1;
                                        result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$1 = event.sourcePath) != null ? tmp$1 : Kotlin.throwNPE(), event.elementAttributeName, Kotlin.toString(event.previous_value)));
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                        var tmp$2;
                                        result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$2 = event.sourcePath) != null ? tmp$2 : Kotlin.throwNPE(), event.elementAttributeName));
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                        var tmp$3, tmp$4;
                                        var casted = (tmp$3 = event.value) != null ? tmp$3 : Kotlin.throwNPE();
                                        var traces = this.compare.inter(casted, casted);
                                        result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$4 = event.sourcePath) != null ? tmp$4 : Kotlin.throwNPE(), event.elementAttributeName, casted.path(), casted.metaClassName()));
                                        result.addAll_xeylzf$(traces.traces);
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                        var tmp$5;
                                        var casted_0 = (tmp$5 = event.value) != null ? tmp$5 : Kotlin.throwNPE();
                                        {
                                            var tmp$6 = (casted_0 != null ? casted_0 : Kotlin.throwNPE()).iterator();
                                            while (tmp$6.hasNext()) {
                                                var elem = tmp$6.next();
                                                var elemCasted = elem != null ? elem : Kotlin.throwNPE();
                                                var traces_0 = this.compare.inter(elemCasted, elemCasted);
                                                var tmp$7;
                                                result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$7 = event.sourcePath) != null ? tmp$7 : Kotlin.throwNPE(), event.elementAttributeName, elemCasted.path(), elemCasted.metaClassName()));
                                                result.addAll_xeylzf$(traces_0.traces);
                                            }
                                        }
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                        if (Kotlin.equals(event.elementAttributeType, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE)) {
                                            var tmp$8;
                                            result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = event.sourcePath) != null ? tmp$8 : Kotlin.throwNPE(), event.elementAttributeName, null, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(event.value), null));
                                        }
                                        else {
                                            var tmp$9, tmp$10;
                                            result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = event.sourcePath) != null ? tmp$9 : Kotlin.throwNPE(), event.elementAttributeName, (tmp$10 = event.value) != null ? tmp$10.path() : null, null, null));
                                        }
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    }
                                    else {
                                        throw new Error("Can't convert event : " + event);
                                    }
                                    return this.compare.createSequence().populate(result);
                                },
                                inverse: function (event) {
                                    var result = new Kotlin.ArrayList();
                                    var tmp$0 = event.etype;
                                    if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE) {
                                        var tmp$1, tmp$2, tmp$3, tmp$4;
                                        result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$1 = event.sourcePath) != null ? tmp$1 : Kotlin.throwNPE(), event.elementAttributeName, (tmp$3 = ((tmp$2 = event.value) != null ? tmp$2 : Kotlin.throwNPE()).path()) != null ? tmp$3 : Kotlin.throwNPE(), ((tmp$4 = event.value) != null ? tmp$4 : Kotlin.throwNPE()).metaClassName()));
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL) {
                                        var tmp$5;
                                        var casted = (tmp$5 = event.value) != null ? tmp$5 : Kotlin.throwNPE();
                                        {
                                            var tmp$6 = (casted != null ? casted : Kotlin.throwNPE()).iterator();
                                            while (tmp$6.hasNext()) {
                                                var elem = tmp$6.next();
                                                var elemCasted = elem != null ? elem : Kotlin.throwNPE();
                                                var traces = this.compare.inter(elemCasted, elemCasted);
                                                var tmp$7;
                                                result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$7 = event.sourcePath) != null ? tmp$7 : Kotlin.throwNPE(), event.elementAttributeName, elemCasted.path(), elemCasted.metaClassName()));
                                                result.addAll_xeylzf$(traces.traces);
                                            }
                                        }
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.ADD) {
                                        var tmp$8, tmp$9, tmp$10;
                                        var casted_0 = (tmp$8 = event.value) != null ? tmp$8 : Kotlin.throwNPE();
                                        var traces_0 = this.compare.inter(casted_0, casted_0);
                                        result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$9 = event.sourcePath) != null ? tmp$9 : Kotlin.throwNPE(), event.elementAttributeName, (tmp$10 = casted_0.path()) != null ? tmp$10 : Kotlin.throwNPE()));
                                        result.addAll_xeylzf$(traces_0.traces);
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL) {
                                        var tmp$11;
                                        var casted_1 = (tmp$11 = event.value) != null ? tmp$11 : Kotlin.throwNPE();
                                        {
                                            var tmp$12 = (casted_1 != null ? casted_1 : Kotlin.throwNPE()).iterator();
                                            while (tmp$12.hasNext()) {
                                                var elem_0 = tmp$12.next();
                                                var elemCasted_0 = elem_0 != null ? elem_0 : Kotlin.throwNPE();
                                                var traces_1 = this.compare.inter(elemCasted_0, elemCasted_0);
                                                var tmp$13, tmp$14;
                                                result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$13 = event.sourcePath) != null ? tmp$13 : Kotlin.throwNPE(), event.elementAttributeName, (tmp$14 = elemCasted_0.path()) != null ? tmp$14 : Kotlin.throwNPE()));
                                                result.addAll_xeylzf$(traces_1.traces);
                                            }
                                        }
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.SET) {
                                        if (Kotlin.equals(event.elementAttributeType, _.org.kevoree.modeling.api.util.ElementAttributeType.object.ATTRIBUTE)) {
                                            var tmp$15;
                                            result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$15 = event.sourcePath) != null ? tmp$15 : Kotlin.throwNPE(), event.elementAttributeName, null, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(event.previous_value), null));
                                        }
                                        else {
                                            var tmp$16, tmp$17;
                                            result.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = event.sourcePath) != null ? tmp$16 : Kotlin.throwNPE(), event.elementAttributeName, (tmp$17 = event.previous_value) != null ? tmp$17.path() : null, null, null));
                                        }
                                    }
                                    else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX) {
                                    }
                                    else {
                                        throw new Error("Can't convert event : " + event);
                                    }
                                    return this.compare.createSequence().populate(result);
                                }
                            }),
                            ModelTrace: Kotlin.createTrait(null, /** @lends _.org.kevoree.modeling.api.trace.ModelTrace.prototype */ {
                                refName: {
                                    get: function () {
                                        return this.$refName_eb8jwl$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_cer0bq$;
                                    }
                                },
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_z3ltm8$;
                                    }
                                },
                                toString: function () {
                                    return this.toCString(true, true);
                                }
                            }),
                            ModelControlTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, traceTypeGlobal) {
                                this.$srcPath_5kjq8d$ = srcPath;
                                this.traceTypeGlobal = traceTypeGlobal;
                                this.$refName_qcwzy0$ = '';
                                this.$traceType_5dhonr$ = _.org.kevoree.modeling.api.util.ActionType.object.CONTROL;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelControlTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_5kjq8d$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_qcwzy0$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_5dhonr$;
                                    }
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.CONTROL.code);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    if (this.traceTypeGlobal == null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    else {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(this.traceTypeGlobal);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelAddTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, refName, previousPath, typeName) {
                                this.$srcPath_uvkbsf$ = srcPath;
                                this.$refName_a3722s$ = refName;
                                this.previousPath = previousPath;
                                this.typeName = typeName;
                                this.$traceType_2i989x$ = _.org.kevoree.modeling.api.util.ActionType.object.ADD;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelAddTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_uvkbsf$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_a3722s$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_2i989x$;
                                    }
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    if (withTypeName) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.ADD.code);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    if (withSrcPath) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(this.refName);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    if (this.previousPath != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.previouspath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.previousPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    if (this.typeName != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.typeName);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelAddAllTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, refName, previousPath, typeName) {
                                this.$srcPath_1h16pc$ = srcPath;
                                this.$refName_m9egez$ = refName;
                                this.previousPath = previousPath;
                                this.typeName = typeName;
                                this.$traceType_pralmu$ = _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelAddAllTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_1h16pc$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_m9egez$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_pralmu$;
                                    }
                                },
                                mkString: function (ss) {
                                    if (ss == null) {
                                        return null;
                                    }
                                    var buffer = new Kotlin.StringBuilder();
                                    var isFirst = true;
                                    {
                                        var tmp$0 = ss.iterator();
                                        while (tmp$0.hasNext()) {
                                            var s = tmp$0.next();
                                            if (!isFirst) {
                                                buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                            }
                                            buffer.append(s);
                                            isFirst = false;
                                        }
                                    }
                                    return buffer.toString();
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    if (withTypeName) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL.code);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    if (withSrcPath) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(this.refName);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    if (this.previousPath != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.previouspath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.mkString(this.previousPath));
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    if (this.typeName != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.mkString(this.typeName));
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelRemoveTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, refName, objPath) {
                                this.$srcPath_7kbv2k$ = srcPath;
                                this.$refName_d81en3$ = refName;
                                this.objPath = objPath;
                                this.$traceType_po7rum$ = _.org.kevoree.modeling.api.util.ActionType.object.REMOVE;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_7kbv2k$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_d81en3$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_po7rum$;
                                    }
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    if (withTypeName) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE.code);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    if (withSrcPath) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(this.refName);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.objpath);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.objPath);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelRemoveAllTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, refName) {
                                this.$srcPath_mobmwd$ = srcPath;
                                this.$refName_rkf5d4$ = refName;
                                this.$traceType_z0g113$ = _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_mobmwd$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_rkf5d4$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_z0g113$;
                                    }
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    if (withTypeName) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL.code);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    if (withSrcPath) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(this.refName);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelSetTrace: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.trace.ModelTrace];
                            }, function (srcPath, refName, objPath, content, typeName) {
                                this.$srcPath_guqstu$ = srcPath;
                                this.$refName_xdzzfn$ = refName;
                                this.objPath = objPath;
                                this.content = content;
                                this.typeName = typeName;
                                this.$traceType_j5yedg$ = _.org.kevoree.modeling.api.util.ActionType.object.SET;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelSetTrace.prototype */ {
                                srcPath: {
                                    get: function () {
                                        return this.$srcPath_guqstu$;
                                    }
                                },
                                refName: {
                                    get: function () {
                                        return this.$refName_xdzzfn$;
                                    }
                                },
                                traceType: {
                                    get: function () {
                                        return this.$traceType_j5yedg$;
                                    }
                                },
                                toCString: function (withTypeName, withSrcPath) {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.openJSON);
                                    if (withTypeName) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.util.ActionType.object.SET.code);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    if (withSrcPath) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.srcPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    buffer.append(this.refName);
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    if (this.objPath != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.objpath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.objPath);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    if (this.content != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.content);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.content);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    if (this.typeName != null) {
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.coma);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.dp);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                        _.org.kevoree.modeling.api.json.JSONString.encodeBuffer(buffer, this.typeName);
                                        buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.bb);
                                    }
                                    buffer.append(_.org.kevoree.modeling.api.trace.ModelTraceConstants.closeJSON);
                                    return buffer.toString();
                                }
                            }),
                            ModelTraceApplicator: Kotlin.createClass(null, function (targetModel, factory) {
                                this.targetModel = targetModel;
                                this.factory = factory;
                                this.pendingObj = null;
                                this.pendingParent = null;
                                this.pendingParentRefName = null;
                                this.pendingObjPath = null;
                                this.fireEvents = true;
                            }, /** @lends _.org.kevoree.modeling.api.trace.ModelTraceApplicator.prototype */ {
                                tryClosePending: function (srcPath) {
                                    if (this.pendingObj != null && !Kotlin.equals(this.pendingObjPath, srcPath)) {
                                        var tmp$0, tmp$1;
                                        ((tmp$0 = this.pendingParent) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, (tmp$1 = this.pendingParentRefName) != null ? tmp$1 : Kotlin.throwNPE(), this.pendingObj, true, this.fireEvents);
                                        this.pendingObj = null;
                                        this.pendingObjPath = null;
                                        this.pendingParentRefName = null;
                                        this.pendingParent = null;
                                    }
                                },
                                createOrAdd: function (previousPath, target, refName, potentialTypeName) {
                                    var tmp$0;
                                    if (previousPath != null) {
                                        tmp$0 = this.targetModel.findByPath(previousPath);
                                    }
                                    else {
                                        tmp$0 = null;
                                    }
                                    var targetElem = tmp$0;
                                    if (targetElem != null) {
                                        target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, refName, targetElem, true, this.fireEvents);
                                    }
                                    else {
                                        this.pendingObj = this.factory.create(potentialTypeName != null ? potentialTypeName : Kotlin.throwNPE());
                                        this.pendingObjPath = previousPath;
                                        this.pendingParentRefName = refName;
                                        this.pendingParent = target;
                                    }
                                },
                                applyTraceOnModel: function (traceSeq) {
                                    {
                                        var tmp$0 = traceSeq.traces.iterator();
                                        while (tmp$0.hasNext()) {
                                            var trace = tmp$0.next();
                                            var target = this.targetModel;
                                            if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                                                this.tryClosePending(null);
                                                if (!Kotlin.equals(trace.srcPath, '')) {
                                                    var resolvedTarget = this.targetModel.findByPath(trace.srcPath);
                                                    if (resolvedTarget == null) {
                                                        throw new Error('Add Trace source not found for path : ' + trace.srcPath + ' pending ' + this.pendingObjPath + '\n' + trace.toString());
                                                    }
                                                    target = resolvedTarget != null ? resolvedTarget : Kotlin.throwNPE();
                                                }
                                                this.createOrAdd(trace.previousPath, target, trace.refName, trace.typeName);
                                            }
                                            if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddAllTrace)) {
                                                this.tryClosePending(null);
                                                var i = 0;
                                                var tmp$1;
                                                {
                                                    var tmp$2 = ((tmp$1 = trace.previousPath) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                                                    while (tmp$2.hasNext()) {
                                                        var path = tmp$2.next();
                                                        var tmp$3;
                                                        this.createOrAdd(path, target, trace.refName, ((tmp$3 = trace.typeName) != null ? tmp$3 : Kotlin.throwNPE()).get_za3lpa$(i));
                                                        i++;
                                                    }
                                                }
                                            }
                                            if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveTrace)) {
                                                this.tryClosePending(trace.srcPath);
                                                var tempTarget = this.targetModel;
                                                if (!Kotlin.equals(trace.srcPath, '')) {
                                                    tempTarget = this.targetModel.findByPath(trace.srcPath);
                                                }
                                                if (tempTarget != null) {
                                                    (tempTarget != null ? tempTarget : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE, trace.refName, this.targetModel.findByPath(trace.objPath), true, this.fireEvents);
                                                }
                                            }
                                            if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace)) {
                                                this.tryClosePending(trace.srcPath);
                                                var tempTarget_0 = this.targetModel;
                                                if (!Kotlin.equals(trace.srcPath, '')) {
                                                    tempTarget_0 = this.targetModel.findByPath(trace.srcPath);
                                                }
                                                if (tempTarget_0 != null) {
                                                    (tempTarget_0 != null ? tempTarget_0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL, trace.refName, null, true, this.fireEvents);
                                                }
                                            }
                                            if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                                                this.tryClosePending(trace.srcPath);
                                                if (!Kotlin.equals(trace.srcPath, '') && !Kotlin.equals(trace.srcPath, this.pendingObjPath)) {
                                                    var tempObject = this.targetModel.findByPath(trace.srcPath);
                                                    if (tempObject == null) {
                                                        throw new Error('Set Trace source not found for path : ' + trace.srcPath + ' pending ' + this.pendingObjPath + '\n' + trace.toString());
                                                    }
                                                    target = tempObject != null ? tempObject : Kotlin.throwNPE();
                                                }
                                                else {
                                                    if (Kotlin.equals(trace.srcPath, this.pendingObjPath) && this.pendingObj != null) {
                                                        var tmp$4;
                                                        target = (tmp$4 = this.pendingObj) != null ? tmp$4 : Kotlin.throwNPE();
                                                    }
                                                }
                                                if (trace.content != null) {
                                                    target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, trace.refName, trace.content, true, this.fireEvents);
                                                }
                                                else {
                                                    var tmp$5;
                                                    if (trace.objPath != null) {
                                                        tmp$5 = this.targetModel.findByPath(trace.objPath);
                                                    }
                                                    else {
                                                        tmp$5 = null;
                                                    }
                                                    var targetContentPath = tmp$5;
                                                    if (targetContentPath != null) {
                                                        target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, trace.refName, targetContentPath, true, this.fireEvents);
                                                    }
                                                    else {
                                                        if (trace.typeName != null && !Kotlin.equals(trace.typeName, '')) {
                                                            this.createOrAdd(trace.objPath, target, trace.refName, trace.typeName);
                                                        }
                                                        else {
                                                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.SET, trace.refName, targetContentPath, true, this.fireEvents);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    this.tryClosePending(null);
                                }
                            }),
                            TraceConverter: Kotlin.createTrait(null),
                            TraceSequence: Kotlin.createTrait(null, /** @lends _.org.kevoree.modeling.api.trace.TraceSequence.prototype */ {
                                traces: {
                                    get: function () {
                                        return this.$traces_1yhbo1$;
                                    },
                                    set: function (tmp$0) {
                                        this.$traces_1yhbo1$ = tmp$0;
                                    }
                                },
                                factory: {
                                    get: function () {
                                        return this.$factory_9xm9u1$;
                                    },
                                    set: function (tmp$0) {
                                        this.$factory_9xm9u1$ = tmp$0;
                                    }
                                },
                                populate: function (addtraces) {
                                    this.traces.addAll_xeylzf$(addtraces);
                                    return this;
                                },
                                append: function (seq) {
                                    this.traces.addAll_xeylzf$(seq.traces);
                                },
                                populateFromString: function (addtracesTxt) {
                                    return this.populateFromStream(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(addtracesTxt));
                                },
                                populateFromStream: function (inputStream) {
                                    var previousControlSrc = null;
                                    var previousControlTypeName = null;
                                    var lexer = new _.org.kevoree.modeling.api.json.Lexer(inputStream);
                                    var currentToken = lexer.nextToken();
                                    if (currentToken.tokenType !== _.org.kevoree.modeling.api.json.Type.LEFT_BRACKET) {
                                        throw new Error('Bad Format : expect [');
                                    }
                                    currentToken = lexer.nextToken();
                                    var keys = new Kotlin.PrimitiveHashMap();
                                    var previousName = null;
                                    while (currentToken.tokenType !== _.org.kevoree.modeling.api.json.Type.EOF && currentToken.tokenType !== _.org.kevoree.modeling.api.json.Type.RIGHT_BRACKET) {
                                        if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.LEFT_BRACE) {
                                            keys.clear();
                                        }
                                        if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.VALUE) {
                                            if (previousName != null) {
                                                keys.put_wn2jw4$(previousName != null ? previousName : Kotlin.throwNPE(), Kotlin.toString(currentToken.value));
                                                previousName = null;
                                            }
                                            else {
                                                previousName = Kotlin.toString(currentToken.value);
                                            }
                                        }
                                        if (currentToken.tokenType === _.org.kevoree.modeling.api.json.Type.RIGHT_BRACE) {
                                            var traceTypeRead = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.traceType);
                                            if (traceTypeRead == null) {
                                                traceTypeRead = previousControlTypeName;
                                            }
                                            if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.CONTROL.code) {
                                                var src = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (src != null) {
                                                    var tmp$0;
                                                    previousControlSrc = (tmp$0 = _.org.kevoree.modeling.api.json.JSONString.unescape(src)) != null ? tmp$0 : Kotlin.throwNPE();
                                                }
                                                var globalTypeName = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname);
                                                if (globalTypeName != null) {
                                                    previousControlTypeName = globalTypeName;
                                                }
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.SET.code) {
                                                var srcFound = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (srcFound == null) {
                                                    srcFound = previousControlSrc;
                                                }
                                                else {
                                                    srcFound = _.org.kevoree.modeling.api.json.JSONString.unescape(srcFound);
                                                }
                                                var tmp$1;
                                                this.traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelSetTrace(srcFound != null ? srcFound : Kotlin.throwNPE(), (tmp$1 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname)) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.modeling.api.json.JSONString.unescape(keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.objpath)), _.org.kevoree.modeling.api.json.JSONString.unescape(keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.content)), _.org.kevoree.modeling.api.json.JSONString.unescape(keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename))));
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.ADD.code) {
                                                var srcFound_0 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (srcFound_0 == null) {
                                                    srcFound_0 = previousControlSrc;
                                                }
                                                else {
                                                    srcFound_0 = _.org.kevoree.modeling.api.json.JSONString.unescape(srcFound_0);
                                                }
                                                var tmp$2, tmp$3;
                                                this.traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddTrace(srcFound_0 != null ? srcFound_0 : Kotlin.throwNPE(), (tmp$2 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname)) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.modeling.api.json.JSONString.unescape((tmp$3 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.previouspath)) != null ? tmp$3 : Kotlin.throwNPE()), keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename)));
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.ADD_ALL.code) {
                                                var srcFound_1 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (srcFound_1 == null) {
                                                    srcFound_1 = previousControlSrc;
                                                }
                                                else {
                                                    srcFound_1 = _.org.kevoree.modeling.api.json.JSONString.unescape(srcFound_1);
                                                }
                                                var tmp$4, tmp$5, tmp$6, tmp$7, tmp$8;
                                                this.traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace(srcFound_1 != null ? srcFound_1 : Kotlin.throwNPE(), (tmp$4 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname)) != null ? tmp$4 : Kotlin.throwNPE(), (tmp$6 = (tmp$5 = _.org.kevoree.modeling.api.json.JSONString.unescape(keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.content))) != null ? Kotlin.splitString(tmp$5, ';') : null) != null ? _.kotlin.toList_2hx8bi$(tmp$6) : null, (tmp$8 = (tmp$7 = _.org.kevoree.modeling.api.json.JSONString.unescape(keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.typename))) != null ? Kotlin.splitString(tmp$7, ';') : null) != null ? _.kotlin.toList_2hx8bi$(tmp$8) : null));
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE.code) {
                                                var srcFound_2 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (srcFound_2 == null) {
                                                    srcFound_2 = previousControlSrc;
                                                }
                                                else {
                                                    srcFound_2 = _.org.kevoree.modeling.api.json.JSONString.unescape(srcFound_2);
                                                }
                                                var tmp$9, tmp$10, tmp$11;
                                                this.traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace(srcFound_2 != null ? srcFound_2 : Kotlin.throwNPE(), (tmp$9 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname)) != null ? tmp$9 : Kotlin.throwNPE(), (tmp$11 = _.org.kevoree.modeling.api.json.JSONString.unescape((tmp$10 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.objpath)) != null ? tmp$10 : Kotlin.throwNPE())) != null ? tmp$11 : Kotlin.throwNPE()));
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.REMOVE_ALL.code) {
                                                var srcFound_3 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.src);
                                                if (srcFound_3 == null) {
                                                    srcFound_3 = previousControlSrc;
                                                }
                                                else {
                                                    srcFound_3 = _.org.kevoree.modeling.api.json.JSONString.unescape(srcFound_3);
                                                }
                                                var tmp$12;
                                                this.traces.add_za3rmp$(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace(srcFound_3 != null ? srcFound_3 : Kotlin.throwNPE(), (tmp$12 = keys.get_za3rmp$(_.org.kevoree.modeling.api.trace.ModelTraceConstants.refname)) != null ? tmp$12 : Kotlin.throwNPE()));
                                            }
                                            else if (traceTypeRead === _.org.kevoree.modeling.api.util.ActionType.object.RENEW_INDEX.code) {
                                            }
                                            else {
                                                Kotlin.println('Trace lost !!!');
                                            }
                                        }
                                        currentToken = lexer.nextToken();
                                    }
                                    return this;
                                },
                                exportToString: function () {
                                    var buffer = new Kotlin.StringBuilder();
                                    buffer.append('[');
                                    var isFirst = true;
                                    var previousSrc = null;
                                    var previousType = null;
                                    {
                                        var tmp$0 = this.traces.iterator();
                                        while (tmp$0.hasNext()) {
                                            var trace = tmp$0.next();
                                            if (!isFirst) {
                                                buffer.append(',\n');
                                            }
                                            if (previousSrc == null || !Kotlin.equals(previousSrc, trace.srcPath)) {
                                                buffer.append((new _.org.kevoree.modeling.api.trace.ModelControlTrace(trace.srcPath, null)).toString());
                                                buffer.append(',\n');
                                                previousSrc = trace.srcPath;
                                            }
                                            if (previousType == null || !Kotlin.equals(previousType, trace.traceType.code)) {
                                                buffer.append((new _.org.kevoree.modeling.api.trace.ModelControlTrace('', trace.traceType.code)).toString());
                                                buffer.append(',\n');
                                                previousType = trace.traceType.code;
                                            }
                                            buffer.append(trace.toCString(false, false));
                                            isFirst = false;
                                        }
                                    }
                                    buffer.append(']');
                                    return buffer.toString();
                                },
                                toString: function () {
                                    return this.exportToString();
                                },
                                applyOn: function (target) {
                                    var tmp$0;
                                    var traceApplicator = new _.org.kevoree.modeling.api.trace.ModelTraceApplicator(target, (tmp$0 = this.factory) != null ? tmp$0 : Kotlin.throwNPE());
                                    traceApplicator.applyTraceOnModel(this);
                                    return true;
                                },
                                silentlyApplyOn: function (target) {
                                    var tmp$0;
                                    var traceApplicator = new _.org.kevoree.modeling.api.trace.ModelTraceApplicator(target, (tmp$0 = this.factory) != null ? tmp$0 : Kotlin.throwNPE());
                                    traceApplicator.fireEvents = false;
                                    traceApplicator.applyTraceOnModel(this);
                                    return true;
                                },
                                reverse: function () {
                                    var reversed = new Kotlin.ArrayList();
                                    var i = _.kotlin.get_size_0(this.traces);
                                    while (i > 0) {
                                        i = i - 1;
                                        reversed.add_za3rmp$(this.traces.get_za3lpa$(i));
                                    }
                                    this.traces = reversed;
                                }
                            })
                        }),
                        util: Kotlin.definePackage(function () {
                            this.AttConverter = Kotlin.createObject(null, null, {
                                convFlatAtt: function (value) {
                                    if (value == null) {
                                        return null;
                                    }
                                    if (Kotlin.isType(value, Kotlin.ArrayList)) {
                                        var isF = true;
                                        var buffer = new Kotlin.StringBuilder();
                                        {
                                            var tmp$0 = value.iterator();
                                            while (tmp$0.hasNext()) {
                                                var v = tmp$0.next();
                                                if (!isF) {
                                                    buffer.append('$');
                                                }
                                                buffer.append(Kotlin.toString(v));
                                                isF = false;
                                            }
                                        }
                                        return buffer.toString();
                                    }
                                    else {
                                        return value.toString();
                                    }
                                },
                                convAttFlat: function (value) {
                                    return Kotlin.splitString(value.toString(), '$');
                                }
                            });
                            this.ByteConverter = Kotlin.createObject(null, null, {
                                toChar: function (b) {
                                    return b != null ? b : Kotlin.throwNPE();
                                },
                                fromChar: function (b) {
                                    return b != null ? b : Kotlin.throwNPE();
                                },
                                byteArrayInputStreamFromString: function (str) {
                                    var bytes = Kotlin.numberArrayOfSize(str.length);
                                    var i = 0;
                                    while (i < str.length) {
                                        var tmp$0;
                                        bytes[i] = (tmp$0 = str.charAt(i)) != null ? tmp$0 : Kotlin.throwNPE();
                                        i = i + 1;
                                    }
                                    return new _.java.io.ByteArrayInputStream(bytes);
                                }
                            });
                        }, /** @lends _.org.kevoree.modeling.api.util */ {
                            ActionType: Kotlin.createClass(function () {
                                return [Kotlin.Enum];
                            }, function $fun(code) {
                                $fun.baseInitializer.call(this);
                                this.code = code;
                            }, null, /** @lends _.org.kevoree.modeling.api.util.ActionType */ {
                                object_initializer$: function () {
                                    return Kotlin.createEnumEntries({
                                        SET: new _.org.kevoree.modeling.api.util.ActionType('S'),
                                        ADD: new _.org.kevoree.modeling.api.util.ActionType('a'),
                                        REMOVE: new _.org.kevoree.modeling.api.util.ActionType('r'),
                                        ADD_ALL: new _.org.kevoree.modeling.api.util.ActionType('A'),
                                        REMOVE_ALL: new _.org.kevoree.modeling.api.util.ActionType('R'),
                                        RENEW_INDEX: new _.org.kevoree.modeling.api.util.ActionType('I'),
                                        CONTROL: new _.org.kevoree.modeling.api.util.ActionType('C')
                                    });
                                }
                            }),
                            ElementAttributeType: Kotlin.createClass(function () {
                                return [Kotlin.Enum];
                            }, function $fun() {
                                $fun.baseInitializer.call(this);
                            }, null, /** @lends _.org.kevoree.modeling.api.util.ElementAttributeType */ {
                                object_initializer$: function () {
                                    return Kotlin.createEnumEntries({
                                        ATTRIBUTE: new _.org.kevoree.modeling.api.util.ElementAttributeType(),
                                        REFERENCE: new _.org.kevoree.modeling.api.util.ElementAttributeType(),
                                        CONTAINMENT: new _.org.kevoree.modeling.api.util.ElementAttributeType()
                                    });
                                }
                            }),
                            ModelAttributeVisitor: Kotlin.createTrait(null),
                            ModelTracker: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.events.ModelElementListener];
                            }, function (compare) {
                                this.compare = compare;
                                this.convertor = new _.org.kevoree.modeling.api.trace.Event2Trace(this.compare);
                                this.currentModel = null;
                                this.invertedTraceSequence = null;
                                this.traceSequence = null;
                                this.activated = true;
                            }, /** @lends _.org.kevoree.modeling.api.util.ModelTracker.prototype */ {
                                elementChanged: function (evt) {
                                    if (this.activated) {
                                        var tmp$0, tmp$1;
                                        ((tmp$0 = this.traceSequence) != null ? tmp$0 : Kotlin.throwNPE()).append(this.convertor.convert(evt));
                                        ((tmp$1 = this.invertedTraceSequence) != null ? tmp$1 : Kotlin.throwNPE()).append(this.convertor.inverse(evt));
                                    }
                                },
                                track: function (model) {
                                    this.currentModel = model;
                                    var tmp$0;
                                    ((tmp$0 = this.currentModel) != null ? tmp$0 : Kotlin.throwNPE()).addModelTreeListener(this);
                                    this.traceSequence = this.compare.createSequence();
                                    this.invertedTraceSequence = this.compare.createSequence();
                                },
                                untrack: function () {
                                    var tmp$0;
                                    (tmp$0 = this.currentModel) != null ? tmp$0.removeModelTreeListener(this) : null;
                                },
                                redo: function () {
                                    if (this.currentModel != null && this.traceSequence != null) {
                                        this.activated = false;
                                        try {
                                            var tmp$0, tmp$1;
                                            ((tmp$0 = this.traceSequence) != null ? tmp$0 : Kotlin.throwNPE()).applyOn((tmp$1 = this.currentModel) != null ? tmp$1 : Kotlin.throwNPE());
                                        }
                                        finally {
                                            this.activated = true;
                                        }
                                    }
                                },
                                undo: function () {
                                    if (this.currentModel != null && this.invertedTraceSequence != null) {
                                        this.activated = false;
                                        var tmp$0;
                                        ((tmp$0 = this.invertedTraceSequence) != null ? tmp$0 : Kotlin.throwNPE()).reverse();
                                        try {
                                            var tmp$1, tmp$2;
                                            ((tmp$1 = this.invertedTraceSequence) != null ? tmp$1 : Kotlin.throwNPE()).applyOn((tmp$2 = this.currentModel) != null ? tmp$2 : Kotlin.throwNPE());
                                        }
                                        finally {
                                            var tmp$3;
                                            ((tmp$3 = this.invertedTraceSequence) != null ? tmp$3 : Kotlin.throwNPE()).reverse();
                                            this.activated = true;
                                        }
                                    }
                                },
                                reset: function () {
                                    this.traceSequence = this.compare.createSequence();
                                    this.invertedTraceSequence = this.compare.createSequence();
                                }
                            }),
                            ModelVisitor: Kotlin.createClass(null, function () {
                                this.visitStopped = false;
                                this.visitChildren = true;
                                this.visitReferences = true;
                                this.alreadyVisited = null;
                            }, /** @lends _.org.kevoree.modeling.api.util.ModelVisitor.prototype */ {
                                stopVisit: function () {
                                    this.visitStopped = true;
                                },
                                noChildrenVisit: function () {
                                    this.visitChildren = false;
                                },
                                noReferencesVisit: function () {
                                    this.visitReferences = false;
                                },
                                beginVisitElem: function (elem) {
                                },
                                endVisitElem: function (elem) {
                                },
                                beginVisitRef: function (refName, refType) {
                                },
                                endVisitRef: function (refName) {
                                }
                            })
                        }),
                        xmi: Kotlin.definePackage(function () {
                            this.Token = Kotlin.createObject(null, function () {
                                this.XML_HEADER = 0;
                                this.END_DOCUMENT = 1;
                                this.START_TAG = 2;
                                this.END_TAG = 3;
                                this.COMMENT = 4;
                                this.SINGLETON_TAG = 5;
                            });
                        }, /** @lends _.org.kevoree.modeling.api.xmi */ {
                            ResourceSet: Kotlin.createClass(null, function () {
                                this.resources_twji9r$ = new Kotlin.PrimitiveHashMap();
                                this.invertedResources_583d58$ = new Kotlin.ComplexHashMap();
                            }, /** @lends _.org.kevoree.modeling.api.xmi.ResourceSet.prototype */ {
                                registerXmiAddrMappedObjects: function (nsuri, xmiAddrs) {
                                    this.resources_twji9r$.put_wn2jw4$(nsuri, xmiAddrs);
                                    {
                                        var tmp$0 = xmiAddrs;
                                        while (tmp$0.hasNext()) {
                                            var ad = tmp$0.next();
                                            if (this.invertedResources_583d58$.containsKey_za3rmp$(_.kotlin.get_value(ad))) {
                                                var alreadyVal = this.invertedResources_583d58$.get_za3rmp$(_.kotlin.get_value(ad));
                                                if ((alreadyVal != null ? alreadyVal : Kotlin.throwNPE()).addr.contains('@')) {
                                                    this.invertedResources_583d58$.put_wn2jw4$(_.kotlin.get_value(ad), new _.org.kevoree.modeling.api.xmi.XmiObjAddr(nsuri, _.kotlin.get_key(ad)));
                                                }
                                            }
                                            else {
                                                this.invertedResources_583d58$.put_wn2jw4$(_.kotlin.get_value(ad), new _.org.kevoree.modeling.api.xmi.XmiObjAddr(nsuri, _.kotlin.get_key(ad)));
                                            }
                                        }
                                    }
                                },
                                resolveObject: function (xmiAddr) {
                                    var typeAndAddr = Kotlin.splitString(xmiAddr, ' ');
                                    if (typeAndAddr.length > 1) {
                                        var addrs = Kotlin.splitString(typeAndAddr[1], '#');
                                        if (addrs.length === 2) {
                                            var resolvedAddrs = this.resources_twji9r$.get_za3rmp$(addrs[0]);
                                            var addr = addrs[1];
                                            addr = '#' + addr;
                                            addr = addr.replace('#//', '/0/');
                                            return resolvedAddrs != null ? resolvedAddrs.get_za3rmp$(addr) : null;
                                        }
                                    }
                                    return null;
                                },
                                objToAddr: function (obj) {
                                    var resolved = this.invertedResources_583d58$.get_za3rmp$(obj);
                                    if (resolved != null) {
                                        var packName = this.formatMetaClassName(obj.metaClassName());
                                        var nsURI = resolved.nsuri;
                                        var addr = resolved.addr;
                                        addr = addr.replace('/0/', '#//');
                                        return packName + ' ' + nsURI + addr;
                                    }
                                    return null;
                                },
                                formatMetaClassName: function (metaClassName) {
                                    var lastPoint = _.js.lastIndexOf_960177$(metaClassName, '.');
                                    var pack = metaClassName.substring(0, lastPoint);
                                    var cls = metaClassName.substring(lastPoint + 1);
                                    return pack + ':' + cls;
                                }
                            }),
                            XmiObjAddr: Kotlin.createClass(null, function (nsuri, addr) {
                                this.nsuri = nsuri;
                                this.addr = addr;
                            }),
                            XMIModelLoader: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.ModelLoader];
                            }, function () {
                                this.resourceSet = null;
                                this.LOADER_XMI_LOCAL_NAME = 'type';
                                this.LOADER_XMI_XSI = 'xsi';
                                this.LOADER_XMI_NS_URI = 'nsURI';
                                this.$factory_6cbbgy$ = null;
                                this.attributesHashmap_7wijs5$ = new Kotlin.PrimitiveHashMap();
                                this.referencesHashmap_cc1kom$ = new Kotlin.PrimitiveHashMap();
                                this.namedElementSupportActivated_71goxr$ = false;
                                this.attributeVisitor_g67dla$ = _.org.kevoree.modeling.api.xmi.XMIModelLoader.XMIModelLoader$f(this);
                                this.referencesVisitor_g5fzti$ = _.org.kevoree.modeling.api.xmi.XMIModelLoader.XMIModelLoader$f_0(this);
                            }, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelLoader.prototype */ {
                                factory: {
                                    get: function () {
                                        return this.$factory_6cbbgy$;
                                    },
                                    set: function (tmp$0) {
                                        this.$factory_6cbbgy$ = tmp$0;
                                    }
                                },
                                activateSupportForNamedElements: function (activate) {
                                    this.namedElementSupportActivated_71goxr$ = activate;
                                },
                                unescapeXml: function (src) {
                                    var builder = null;
                                    var i = 0;
                                    while (i < src.length) {
                                        var c = src.charAt(i);
                                        if (c === '&') {
                                            if (builder == null) {
                                                builder = new Kotlin.StringBuilder();
                                                (builder != null ? builder : Kotlin.throwNPE()).append(src.substring(0, i));
                                            }
                                            if (src.charAt(i + 1) === 'a') {
                                                if (src.charAt(i + 2) === 'm') {
                                                    builder != null ? builder.append('&') : null;
                                                    i = i + 5;
                                                }
                                                else if (src.charAt(i + 2) === 'p') {
                                                    builder != null ? builder.append("'") : null;
                                                    i = i + 6;
                                                }
                                                else {
                                                    Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1) + src.charAt(i + 2));
                                                }
                                            }
                                            else if (src.charAt(i + 1) === 'q') {
                                                builder != null ? builder.append('"') : null;
                                                i = i + 6;
                                            }
                                            else if (src.charAt(i + 1) === 'l') {
                                                builder != null ? builder.append('<') : null;
                                                i = i + 4;
                                            }
                                            else if (src.charAt(i + 1) === 'g') {
                                                builder != null ? builder.append('>') : null;
                                                i = i + 4;
                                            }
                                            else {
                                                Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1));
                                            }
                                        }
                                        else {
                                            if (builder != null) {
                                                builder != null ? builder.append(c) : null;
                                            }
                                            i++;
                                        }
                                    }
                                    if (builder != null) {
                                        return Kotlin.toString(builder);
                                    }
                                    else {
                                        return src;
                                    }
                                },
                                loadModelFromString: function (str) {
                                    var reader = new _.org.kevoree.modeling.api.xmi.XmlParser(_.org.kevoree.modeling.api.util.ByteConverter.byteArrayInputStreamFromString(str));
                                    if (reader.hasNext()) {
                                        return this.deserialize(reader);
                                    }
                                    else {
                                        Kotlin.println('Loader::Nothing in the String !');
                                        return null;
                                    }
                                },
                                loadModelFromStream: function (inputStream) {
                                    var reader = new _.org.kevoree.modeling.api.xmi.XmlParser(inputStream);
                                    if (reader.hasNext()) {
                                        return this.deserialize(reader);
                                    }
                                    else {
                                        Kotlin.println('Loader::Nothing in the file !');
                                        return null;
                                    }
                                },
                                loadObject: function (ctx, xmiAddress, objectType) {
                                    if (objectType === void 0)
                                        objectType = null;
                                    var tmp$0, tmp$12, tmp$13, tmp$14, tmp$15, tmp$16, tmp$17, tmp$18;
                                    var elementTagName = ((tmp$0 = ctx.xmiReader) != null ? tmp$0 : Kotlin.throwNPE()).getLocalName();
                                    var modelElem;
                                    if (objectType != null) {
                                        var tmp$1;
                                        modelElem = (tmp$1 = this.factory) != null ? tmp$1.create(objectType) : null;
                                        if (modelElem == null) {
                                            var xsiType = null;
                                            var tmp$2, tmp$3, tmp$4, tmp$5, tmp$6;
                                            {
                                                tmp$3 = new Kotlin.NumberRange(0, ((tmp$2 = ctx.xmiReader) != null ? tmp$2 : Kotlin.throwNPE()).getAttributeCount() - 1), tmp$4 = tmp$3.start, tmp$5 = tmp$3.end, tmp$6 = tmp$3.increment;
                                                for (var i = tmp$4; i <= tmp$5; i += tmp$6) {
                                                    var tmp$7, tmp$8;
                                                    var localName = ((tmp$7 = ctx.xmiReader) != null ? tmp$7 : Kotlin.throwNPE()).getAttributeLocalName(i);
                                                    var xsi = ((tmp$8 = ctx.xmiReader) != null ? tmp$8 : Kotlin.throwNPE()).getAttributePrefix(i);
                                                    if (Kotlin.equals(localName, this.LOADER_XMI_LOCAL_NAME) && Kotlin.equals(xsi, this.LOADER_XMI_XSI)) {
                                                        var tmp$9;
                                                        xsiType = ((tmp$9 = ctx.xmiReader) != null ? tmp$9 : Kotlin.throwNPE()).getAttributeValue(i);
                                                        break;
                                                    }
                                                }
                                            }
                                            if (xsiType != null) {
                                                var tmp$10;
                                                modelElem = (tmp$10 = this.factory) != null ? tmp$10.create((xsiType != null ? xsiType : Kotlin.throwNPE()).substring((xsiType != null ? xsiType : Kotlin.throwNPE()).lastIndexOf(':') + 1, (xsiType != null ? xsiType : Kotlin.throwNPE()).length)) : null;
                                            }
                                        }
                                    }
                                    else {
                                        var tmp$11;
                                        modelElem = (tmp$11 = this.factory) != null ? tmp$11.create(elementTagName) : null;
                                    }
                                    if (modelElem == null) {
                                        Kotlin.println('Could not create an object for local name ' + elementTagName);
                                    }
                                    ctx.map.put_wn2jw4$(xmiAddress, modelElem != null ? modelElem : Kotlin.throwNPE());
                                    if (!this.attributesHashmap_7wijs5$.containsKey_za3rmp$((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) {
                                        modelElem != null ? modelElem.visitAttributes(this.attributeVisitor_g67dla$) : null;
                                    }
                                    var elemAttributesMap = (tmp$12 = this.attributesHashmap_7wijs5$.get_za3rmp$((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) != null ? tmp$12 : Kotlin.throwNPE();
                                    if (!this.referencesHashmap_cc1kom$.containsKey_za3rmp$((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) {
                                        modelElem != null ? modelElem.visit(this.referencesVisitor_g5fzti$, false, true, false) : null;
                                    }
                                    var elemReferencesMap = (tmp$13 = this.referencesHashmap_cc1kom$.get_za3rmp$((modelElem != null ? modelElem : Kotlin.throwNPE()).metaClassName())) != null ? tmp$13 : Kotlin.throwNPE();
                                    {
                                        tmp$15 = new Kotlin.NumberRange(0, ((tmp$14 = ctx.xmiReader) != null ? tmp$14 : Kotlin.throwNPE()).getAttributeCount() - 1), tmp$16 = tmp$15.start, tmp$17 = tmp$15.end, tmp$18 = tmp$15.increment;
                                        for (var i_0 = tmp$16; i_0 <= tmp$17; i_0 += tmp$18) {
                                            var tmp$19;
                                            var prefix = ((tmp$19 = ctx.xmiReader) != null ? tmp$19 : Kotlin.throwNPE()).getAttributePrefix(i_0);
                                            if (prefix == null || Kotlin.equals(prefix, '')) {
                                                var tmp$20, tmp$21;
                                                var attrName = ((tmp$20 = ctx.xmiReader) != null ? tmp$20 : Kotlin.throwNPE()).getAttributeLocalName(i_0).trim();
                                                var valueAtt = ((tmp$21 = ctx.xmiReader) != null ? tmp$21 : Kotlin.throwNPE()).getAttributeValue(i_0).trim();
                                                if (valueAtt != null) {
                                                    if (elemAttributesMap.containsKey_za3rmp$(attrName)) {
                                                        modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, attrName, this.unescapeXml(valueAtt), false, false) : null;
                                                        if (this.namedElementSupportActivated_71goxr$ && Kotlin.equals(attrName, 'name')) {
                                                            var parent = ctx.map.get_za3rmp$(xmiAddress.substring(0, xmiAddress.lastIndexOf('/')));
                                                            {
                                                                var tmp$22 = _.kotlin.toList_h3panj$(ctx.map.entrySet()).iterator();
                                                                while (tmp$22.hasNext()) {
                                                                    var entry = tmp$22.next();
                                                                    if (Kotlin.equals(_.kotlin.get_value(entry), parent)) {
                                                                        var refT = _.kotlin.get_key(entry) + '/' + this.unescapeXml(valueAtt);
                                                                        ctx.map.put_wn2jw4$(refT, modelElem != null ? modelElem : Kotlin.throwNPE());
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        if (!valueAtt.startsWith('#') && !valueAtt.startsWith('/')) {
                                                            if (this.resourceSet != null) {
                                                                var tmp$23;
                                                                var previousLoadedRef = ((tmp$23 = this.resourceSet) != null ? tmp$23 : Kotlin.throwNPE()).resolveObject(valueAtt);
                                                                if (previousLoadedRef != null) {
                                                                    modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, attrName, previousLoadedRef, true, false) : null;
                                                                }
                                                                else {
                                                                    throw new Error('Unresolve NsURI based XMI reference ' + valueAtt);
                                                                }
                                                            }
                                                            else {
                                                                throw new Error('Bad XMI reference ' + valueAtt);
                                                            }
                                                        }
                                                        else {
                                                            var tmp$24, tmp$25, tmp$26;
                                                            {
                                                                tmp$24 = Kotlin.splitString(valueAtt, ' '), tmp$25 = tmp$24.length;
                                                                for (var tmp$26 = 0; tmp$26 !== tmp$25; ++tmp$26) {
                                                                    var xmiRef = tmp$24[tmp$26];
                                                                    var tmp$27, tmp$28;
                                                                    if (xmiRef.startsWith('#')) {
                                                                        tmp$27 = xmiRef.substring(1);
                                                                    }
                                                                    else {
                                                                        tmp$27 = xmiRef;
                                                                    }
                                                                    var adjustedRef = tmp$27;
                                                                    if (adjustedRef.startsWith('//')) {
                                                                        tmp$28 = '/0' + adjustedRef.substring(1);
                                                                    }
                                                                    else {
                                                                        tmp$28 = adjustedRef;
                                                                    }
                                                                    adjustedRef = tmp$28;
                                                                    adjustedRef = adjustedRef.replace('.0', '');
                                                                    var ref = ctx.map.get_za3rmp$(adjustedRef);
                                                                    if (ref != null) {
                                                                        modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, attrName, ref, true, false) : null;
                                                                    }
                                                                    else {
                                                                        ctx.resolvers.add_za3rmp$(new _.org.kevoree.modeling.api.xmi.XMIResolveCommand(ctx, modelElem != null ? modelElem : Kotlin.throwNPE(), _.org.kevoree.modeling.api.util.ActionType.object.ADD, attrName, adjustedRef, this.resourceSet));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var done = false;
                                    while (!done) {
                                        var tmp$29;
                                        var tmp$30 = ((tmp$29 = ctx.xmiReader) != null ? tmp$29 : Kotlin.throwNPE()).next();
                                        if (tmp$30 === _.org.kevoree.modeling.api.xmi.Token.START_TAG) {
                                            var tmp$31, tmp$32, tmp$34;
                                            var subElemName = ((tmp$31 = ctx.xmiReader) != null ? tmp$31 : Kotlin.throwNPE()).getLocalName();
                                            var i_1 = (tmp$32 = ctx.elementsCount.get_za3rmp$(xmiAddress + '/@' + subElemName)) != null ? tmp$32 : 0;
                                            var tmp$33 = xmiAddress + '/@' + subElemName;
                                            if (i_1 !== 0) {
                                                tmp$34 = '.' + i_1;
                                            }
                                            else {
                                                tmp$34 = '';
                                            }
                                            var subElementId = tmp$33 + tmp$34;
                                            var containedElement = this.loadObject(ctx, subElementId, elemReferencesMap.get_za3rmp$(subElemName));
                                            modelElem != null ? modelElem.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.object.ADD, subElemName != null ? subElemName : Kotlin.throwNPE(), containedElement, true, false) : null;
                                            ctx.elementsCount.put_wn2jw4$(xmiAddress + '/@' + subElemName, i_1 + 1);
                                        }
                                        else if (tmp$30 === _.org.kevoree.modeling.api.xmi.Token.END_TAG) {
                                            var tmp$35;
                                            if (Kotlin.equals(((tmp$35 = ctx.xmiReader) != null ? tmp$35 : Kotlin.throwNPE()).getLocalName(), elementTagName)) {
                                                done = true;
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    return modelElem != null ? modelElem : Kotlin.throwNPE();
                                },
                                deserialize: function (reader) {
                                    var nsURI = null;
                                    var context = new _.org.kevoree.modeling.api.xmi.LoadingContext();
                                    context.xmiReader = reader;
                                    while (reader.hasNext()) {
                                        var nextTag = reader.next();
                                        if (nextTag === _.org.kevoree.modeling.api.xmi.Token.START_TAG) {
                                            var localName = reader.getLocalName();
                                            if (localName != null) {
                                                var loadedRootsSize = context.loadedRoots.size();
                                                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4;
                                                {
                                                    tmp$1 = new Kotlin.NumberRange(0, ((tmp$0 = context.xmiReader) != null ? tmp$0 : Kotlin.throwNPE()).getAttributeCount() - 1), tmp$2 = tmp$1.start, tmp$3 = tmp$1.end, tmp$4 = tmp$1.increment;
                                                    for (var i = tmp$2; i <= tmp$3; i += tmp$4) {
                                                        var tmp$5, tmp$6;
                                                        var localName_0 = ((tmp$5 = context.xmiReader) != null ? tmp$5 : Kotlin.throwNPE()).getAttributeLocalName(i);
                                                        var localValue = ((tmp$6 = context.xmiReader) != null ? tmp$6 : Kotlin.throwNPE()).getAttributeValue(i);
                                                        if (Kotlin.equals(localName_0, this.LOADER_XMI_NS_URI)) {
                                                            nsURI = localValue;
                                                        }
                                                    }
                                                }
                                                context.loadedRoots.add_za3rmp$(this.loadObject(context, '/' + loadedRootsSize));
                                            }
                                            else {
                                                Kotlin.println('Tried to read a tag with null tag_name.');
                                            }
                                        }
                                        else if (nextTag === _.org.kevoree.modeling.api.xmi.Token.END_TAG) {
                                            break;
                                        }
                                        else if (nextTag === _.org.kevoree.modeling.api.xmi.Token.END_DOCUMENT) {
                                            break;
                                        }
                                        else {
                                        }
                                    }
                                    {
                                        var tmp$7 = context.resolvers.iterator();
                                        while (tmp$7.hasNext()) {
                                            var res = tmp$7.next();
                                            res.run();
                                        }
                                    }
                                    if (this.resourceSet != null && nsURI != null) {
                                        var tmp$8;
                                        ((tmp$8 = this.resourceSet) != null ? tmp$8 : Kotlin.throwNPE()).registerXmiAddrMappedObjects(nsURI != null ? nsURI : Kotlin.throwNPE(), context.map);
                                    }
                                    return context.loadedRoots;
                                }
                            }, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelLoader */ {
                                visit$f: function () {
                                    return new Kotlin.PrimitiveHashMap();
                                },
                                XMIModelLoader$f: function (this$XMIModelLoader) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                                    }, null, {
                                        visit: function (value, name, parent) {
                                            _.kotlin.getOrPut_ynyybx$(this$XMIModelLoader.attributesHashmap_7wijs5$, parent.metaClassName(), _.org.kevoree.modeling.api.xmi.XMIModelLoader.visit$f).put_wn2jw4$(name, true);
                                        }
                                    });
                                },
                                beginVisitElem$f: function () {
                                    return new Kotlin.PrimitiveHashMap();
                                },
                                XMIModelLoader$f_0: function (this$XMIModelLoader) {
                                    return Kotlin.createObject(function () {
                                        return [_.org.kevoree.modeling.api.util.ModelVisitor];
                                    }, function $fun() {
                                        $fun.baseInitializer.call(this);
                                        this.refMap = null;
                                    }, {
                                        beginVisitElem: function (elem) {
                                            this.refMap = _.kotlin.getOrPut_ynyybx$(this$XMIModelLoader.referencesHashmap_cc1kom$, elem.metaClassName(), _.org.kevoree.modeling.api.xmi.XMIModelLoader.beginVisitElem$f);
                                        },
                                        endVisitElem: function (elem) {
                                            this.refMap = null;
                                        },
                                        beginVisitRef: function (refName, refType) {
                                            var tmp$0;
                                            ((tmp$0 = this.refMap) != null ? tmp$0 : Kotlin.throwNPE()).put_wn2jw4$(refName, refType);
                                        },
                                        visit: function (elem, refNameInParent, parent) {
                                        }
                                    });
                                }
                            }),
                            LoadingContext: Kotlin.createClass(null, function () {
                                this.xmiReader = null;
                                this.loadedRoots = new Kotlin.ArrayList();
                                this.map = new Kotlin.PrimitiveHashMap();
                                this.elementsCount = new Kotlin.PrimitiveHashMap();
                                this.resolvers = new Kotlin.ArrayList();
                                this.stats = new Kotlin.PrimitiveHashMap();
                                this.oppositesAlreadySet = new Kotlin.PrimitiveHashMap();
                            }, /** @lends _.org.kevoree.modeling.api.xmi.LoadingContext.prototype */ {
                                isOppositeAlreadySet: function (localRef, oppositeRef) {
                                    var res = this.oppositesAlreadySet.get_za3rmp$(oppositeRef + '_' + localRef) != null || this.oppositesAlreadySet.get_za3rmp$(localRef + '_' + oppositeRef) != null;
                                    return res;
                                },
                                storeOppositeRelation: function (localRef, oppositeRef) {
                                    this.oppositesAlreadySet.put_wn2jw4$(localRef + '_' + oppositeRef, true);
                                }
                            }),
                            XMIResolveCommand: Kotlin.createClass(null, function (context, target, mutatorType, refName, ref, resourceSet) {
                                this.context = context;
                                this.target = target;
                                this.mutatorType = mutatorType;
                                this.refName = refName;
                                this.ref = ref;
                                this.resourceSet = resourceSet;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.XMIResolveCommand.prototype */ {
                                run: function () {
                                    var referencedElement = this.context.map.get_za3rmp$(this.ref);
                                    if (referencedElement != null) {
                                        this.target.reflexiveMutator(this.mutatorType, this.refName, referencedElement, true, false);
                                        return;
                                    }
                                    if (Kotlin.equals(this.ref, '/0/') || Kotlin.equals(this.ref, '/')) {
                                        referencedElement = this.context.map.get_za3rmp$('/0');
                                        if (referencedElement != null) {
                                            this.target.reflexiveMutator(this.mutatorType, this.refName, referencedElement, true, false);
                                            return;
                                        }
                                    }
                                    if (this.resourceSet != null) {
                                        referencedElement = this.resourceSet.resolveObject(this.ref);
                                        if (referencedElement != null) {
                                            this.target.reflexiveMutator(this.mutatorType, this.refName, referencedElement, true, false);
                                            return;
                                        }
                                    }
                                    throw new Error('KMF Load error : reference ' + this.ref + ' not found in map when trying to  ' + this.mutatorType + ' ' + this.refName + '  on ' + this.target.metaClassName() + '(path:' + this.target.path() + ')');
                                }
                            }),
                            ReferencesVisitor: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun(ostream, addressTable, elementsCount, resourceSet) {
                                $fun.baseInitializer.call(this);
                                this.ostream = ostream;
                                this.addressTable = addressTable;
                                this.elementsCount = elementsCount;
                                this.resourceSet = resourceSet;
                                this.value = null;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.ReferencesVisitor.prototype */ {
                                beginVisitElem: function (elem) {
                                },
                                endVisitElem: function (elem) {
                                },
                                beginVisitRef: function (refName, refType) {
                                },
                                endVisitRef: function (refName) {
                                    if (this.value != null) {
                                        this.ostream.print_4(' ' + refName + '="' + Kotlin.toString(this.value) + '"');
                                        this.value = null;
                                    }
                                },
                                visit: function (elem, refNameInParent, parent) {
                                    var tmp$0;
                                    var adjustedAddress = (tmp$0 = this.resourceSet) != null ? tmp$0.objToAddr(elem) : null;
                                    if (adjustedAddress == null) {
                                        adjustedAddress = this.addressTable.get_za3rmp$(elem);
                                    }
                                    if (this.value == null) {
                                        this.value = adjustedAddress;
                                    }
                                    else {
                                        this.value = _.kotlin.plus_n7iowf$(this.value, ' ');
                                        this.value = _.kotlin.plus_n7iowf$(this.value, Kotlin.toString(adjustedAddress));
                                    }
                                }
                            }),
                            AttributesVisitor: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelAttributeVisitor];
                            }, function (ostream, ignoreGeneratedID) {
                                this.ostream = ostream;
                                this.ignoreGeneratedID = ignoreGeneratedID;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.AttributesVisitor.prototype */ {
                                visit: function (value, name, parent) {
                                    if (value != null) {
                                        if (this.ignoreGeneratedID && Kotlin.equals(name, 'generated_KMF_ID')) {
                                            return;
                                        }
                                        if (typeof value === 'string' && Kotlin.equals(value, '')) {
                                            return;
                                        }
                                        this.ostream.print_4(' ' + name + '="');
                                        if (Kotlin.isType(value, Date)) {
                                            this.escapeXml(this.ostream, '' + value.getTime());
                                        }
                                        else {
                                            this.escapeXml(this.ostream, _.org.kevoree.modeling.api.util.AttConverter.convFlatAtt(value));
                                        }
                                        this.ostream.print_4('"');
                                    }
                                },
                                escapeXml: function (ostream, chain) {
                                    if (chain == null) {
                                        return;
                                    }
                                    var i = 0;
                                    var max = chain.length;
                                    while (i < max) {
                                        var c = chain.charAt(i);
                                        if (c === '"') {
                                            ostream.print_4('&quot;');
                                        }
                                        else if (c === '&') {
                                            ostream.print_4('&amp;');
                                        }
                                        else if (c === "'") {
                                            ostream.print_4('&apos;');
                                        }
                                        else if (c === '<') {
                                            ostream.print_4('&lt;');
                                        }
                                        else if (c === '>') {
                                            ostream.print_4('&gt;');
                                        }
                                        else {
                                            ostream.print_1(c);
                                        }
                                        i = i + 1;
                                    }
                                }
                            }),
                            ModelSerializationVisitor: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun(ostream, addressTable, elementsCount, resourceSet, ignoreGeneratedID) {
                                $fun.baseInitializer.call(this);
                                this.ostream = ostream;
                                this.addressTable = addressTable;
                                this.elementsCount = elementsCount;
                                this.resourceSet = resourceSet;
                                this.attributeVisitor = new _.org.kevoree.modeling.api.xmi.AttributesVisitor(this.ostream, ignoreGeneratedID);
                                this.referenceVisitor = new _.org.kevoree.modeling.api.xmi.ReferencesVisitor(this.ostream, this.addressTable, this.elementsCount, this.resourceSet);
                            }, /** @lends _.org.kevoree.modeling.api.xmi.ModelSerializationVisitor.prototype */ {
                                beginVisitElem: function (elem) {
                                },
                                endVisitElem: function (elem) {
                                },
                                beginVisitRef: function (refName, refType) {
                                },
                                endVisitRef: function (refName) {
                                },
                                visit: function (elem, refNameInParent, parent) {
                                    this.ostream.print_1('<');
                                    this.ostream.print_4(refNameInParent);
                                    this.ostream.print_4(' xsi:type="' + this.formatMetaClassName(elem.metaClassName()) + '"');
                                    elem.visitAttributes(this.attributeVisitor);
                                    elem.visit(this.referenceVisitor, false, false, true);
                                    this.ostream.println_1('>');
                                    elem.visit(this, false, true, false);
                                    this.ostream.print_4('<\/');
                                    this.ostream.print_4(refNameInParent);
                                    this.ostream.print_1('>');
                                    this.ostream.println();
                                },
                                formatMetaClassName: function (metaClassName) {
                                    var lastPoint = _.js.lastIndexOf_960177$(metaClassName, '.');
                                    var pack = metaClassName.substring(0, lastPoint);
                                    var cls = metaClassName.substring(lastPoint + 1);
                                    return pack + ':' + cls;
                                }
                            }),
                            ModelAddressVisitor: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.util.ModelVisitor];
                            }, function $fun(addressTable, elementsCount, packageList) {
                                $fun.baseInitializer.call(this);
                                this.addressTable = addressTable;
                                this.elementsCount = elementsCount;
                                this.packageList = packageList;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.ModelAddressVisitor.prototype */ {
                                beginVisitElem: function (elem) {
                                },
                                endVisitElem: function (elem) {
                                },
                                beginVisitRef: function (refName, refType) {
                                },
                                endVisitRef: function (refName) {
                                },
                                visit: function (elem, refNameInParent, parent) {
                                    var tmp$0, tmp$1;
                                    var parentXmiAddress = (tmp$0 = this.addressTable.get_za3rmp$(parent)) != null ? tmp$0 : Kotlin.throwNPE();
                                    var i = (tmp$1 = this.elementsCount.get_za3rmp$(parentXmiAddress + '/@' + refNameInParent)) != null ? tmp$1 : 0;
                                    this.addressTable.put_wn2jw4$(elem, parentXmiAddress + '/@' + refNameInParent + '.' + i);
                                    this.elementsCount.put_wn2jw4$(parentXmiAddress + '/@' + refNameInParent, i + 1);
                                    var pack = elem.metaClassName().substring(0, _.js.lastIndexOf_960177$(elem.metaClassName(), '.'));
                                    if (!this.packageList.contains_za3rmp$(pack))
                                        this.packageList.add_za3rmp$(pack);
                                }
                            }),
                            XMIModelSerializer: Kotlin.createClass(function () {
                                return [_.org.kevoree.modeling.api.ModelSerializer];
                            }, function () {
                                this.resourceSet = null;
                                this.ignoreGeneratedID = false;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.XMIModelSerializer.prototype */ {
                                serialize: function (oMS) {
                                    var oo = new _.java.io.ByteArrayOutputStream();
                                    this.serializeToStream(oMS, oo);
                                    oo.flush();
                                    return oo.toString();
                                },
                                serializeToStream: function (oMS, ostream) {
                                    var wt = new _.java.io.PrintStream(new _.java.io.BufferedOutputStream(ostream), false);
                                    var addressTable = new Kotlin.ComplexHashMap();
                                    var packageList = new Kotlin.ArrayList();
                                    addressTable.put_wn2jw4$(oMS, '/');
                                    var elementsCount = new Kotlin.PrimitiveHashMap();
                                    var addressBuilderVisitor = new _.org.kevoree.modeling.api.xmi.ModelAddressVisitor(addressTable, elementsCount, packageList);
                                    oMS.visit(addressBuilderVisitor, true, true, false);
                                    var masterVisitor = new _.org.kevoree.modeling.api.xmi.ModelSerializationVisitor(wt, addressTable, elementsCount, this.resourceSet, this.ignoreGeneratedID);
                                    wt.println_2('<?xml version="1.0" encoding="UTF-8"?>');
                                    wt.print_4('<' + this.formatMetaClassName(oMS.metaClassName()).replace('.', '_'));
                                    wt.print_4(' xmlns:xsi="http://wwww.w3.org/2001/XMLSchema-instance"');
                                    wt.print_4(' xmi:version="2.0"');
                                    wt.print_4(' xmlns:xmi="http://www.omg.org/XMI"');
                                    var index = 0;
                                    while (index < _.kotlin.get_size_0(packageList)) {
                                        wt.print_4(' xmlns:' + packageList.get_za3lpa$(index).replace('.', '_') + '="http://' + packageList.get_za3lpa$(index) + '"');
                                        index++;
                                    }
                                    oMS.visitAttributes(new _.org.kevoree.modeling.api.xmi.AttributesVisitor(wt, this.ignoreGeneratedID));
                                    oMS.visit(new _.org.kevoree.modeling.api.xmi.ReferencesVisitor(wt, addressTable, elementsCount, this.resourceSet), false, false, true);
                                    wt.println_2('>');
                                    oMS.visit(masterVisitor, false, true, false);
                                    wt.println_2('<\/' + this.formatMetaClassName(oMS.metaClassName()).replace('.', '_') + '>');
                                    wt.flush();
                                },
                                formatMetaClassName: function (metaClassName) {
                                    var lastPoint = _.js.lastIndexOf_960177$(metaClassName, '.');
                                    var pack = metaClassName.substring(0, lastPoint);
                                    var cls = metaClassName.substring(lastPoint + 1);
                                    return pack + ':' + cls;
                                }
                            }),
                            XmlParser: Kotlin.createClass(null, function (inputStream) {
                                this.inputStream = inputStream;
                                this.bytes_gdnk4p$ = this.inputStream.readBytes();
                                this.index_gharkg$ = -1;
                                this.currentChar_x9b225$ = null;
                                this.xmlVersion_ywy43n$ = null;
                                this.xmlCharset_tph6x5$ = null;
                                this.tagName_b61wcj$ = '';
                                this.tagPrefix_83yyh6$ = null;
                                this.attributesNames_b5o00h$ = new Kotlin.ArrayList();
                                this.attributesPrefixes_hgbl8n$ = new Kotlin.ArrayList();
                                this.attributesValues_d28x97$ = new Kotlin.ArrayList();
                                this.attributeName_f9qnph$ = new Kotlin.StringBuilder();
                                this.attributePrefix_r6drlg$ = null;
                                this.attributeValue_npfmfd$ = new Kotlin.StringBuilder();
                                this.readSingleton_h1okvh$ = false;
                            }, /** @lends _.org.kevoree.modeling.api.xmi.XmlParser.prototype */ {
                                hasNext: function () {
                                    return this.bytes_gdnk4p$.length - this.index_gharkg$ > 2;
                                },
                                getLocalName: function () {
                                    return this.tagName_b61wcj$;
                                },
                                getAttributeCount: function () {
                                    return this.attributesNames_b5o00h$.size();
                                },
                                getAttributeLocalName: function (i) {
                                    return this.attributesNames_b5o00h$.get_za3lpa$(i);
                                },
                                getAttributePrefix: function (i) {
                                    return this.attributesPrefixes_hgbl8n$.get_za3lpa$(i);
                                },
                                getAttributeValue: function (i) {
                                    return this.attributesValues_d28x97$.get_za3lpa$(i);
                                },
                                readChar: function () {
                                    return _.org.kevoree.modeling.api.util.ByteConverter.toChar(this.bytes_gdnk4p$[++this.index_gharkg$]);
                                },
                                next: function () {
                                    if (this.readSingleton_h1okvh$) {
                                        this.readSingleton_h1okvh$ = false;
                                        return _.org.kevoree.modeling.api.xmi.Token.END_TAG;
                                    }
                                    if (!this.hasNext()) {
                                        return _.org.kevoree.modeling.api.xmi.Token.END_DOCUMENT;
                                    }
                                    this.attributesNames_b5o00h$.clear();
                                    this.attributesPrefixes_hgbl8n$.clear();
                                    this.attributesValues_d28x97$.clear();
                                    this.read_lessThan();
                                    this.currentChar_x9b225$ = this.readChar();
                                    if (this.currentChar_x9b225$ === '?') {
                                        this.currentChar_x9b225$ = this.readChar();
                                        this.read_xmlHeader();
                                        return _.org.kevoree.modeling.api.xmi.Token.XML_HEADER;
                                    }
                                    else if (this.currentChar_x9b225$ === '!') {
                                        do {
                                            this.currentChar_x9b225$ = this.readChar();
                                        }
                                        while (this.currentChar_x9b225$ !== '>');
                                        return _.org.kevoree.modeling.api.xmi.Token.COMMENT;
                                    }
                                    else if (this.currentChar_x9b225$ === '/') {
                                        this.currentChar_x9b225$ = this.readChar();
                                        this.read_closingTag();
                                        return _.org.kevoree.modeling.api.xmi.Token.END_TAG;
                                    }
                                    else {
                                        this.read_openTag();
                                        if (this.currentChar_x9b225$ === '/') {
                                            this.read_upperThan();
                                            this.readSingleton_h1okvh$ = true;
                                        }
                                        return _.org.kevoree.modeling.api.xmi.Token.START_TAG;
                                    }
                                },
                                read_lessThan: function () {
                                    do {
                                        this.currentChar_x9b225$ = this.readChar();
                                    }
                                    while (this.currentChar_x9b225$ !== '<');
                                },
                                read_upperThan: function () {
                                    while (this.currentChar_x9b225$ !== '>') {
                                        this.currentChar_x9b225$ = this.readChar();
                                    }
                                },
                                read_xmlHeader: function () {
                                    this.read_tagName();
                                    this.read_attributes();
                                    this.read_upperThan();
                                },
                                read_closingTag: function () {
                                    this.read_tagName();
                                    this.read_upperThan();
                                },
                                read_openTag: function () {
                                    this.read_tagName();
                                    if (this.currentChar_x9b225$ !== '>' && this.currentChar_x9b225$ !== '/') {
                                        this.read_attributes();
                                    }
                                },
                                read_tagName: function () {
                                    this.tagName_b61wcj$ = '' + this.currentChar_x9b225$;
                                    this.tagPrefix_83yyh6$ = null;
                                    this.currentChar_x9b225$ = this.readChar();
                                    while (this.currentChar_x9b225$ !== ' ' && this.currentChar_x9b225$ !== '>' && this.currentChar_x9b225$ !== '/') {
                                        if (this.currentChar_x9b225$ === ':') {
                                            this.tagPrefix_83yyh6$ = this.tagName_b61wcj$;
                                            this.tagName_b61wcj$ = '';
                                        }
                                        else {
                                            this.tagName_b61wcj$ += this.currentChar_x9b225$;
                                        }
                                        this.currentChar_x9b225$ = this.readChar();
                                    }
                                },
                                read_attributes: function () {
                                    var end_of_tag = false;
                                    while (this.currentChar_x9b225$ === ' ') {
                                        this.currentChar_x9b225$ = this.readChar();
                                    }
                                    while (!end_of_tag) {
                                        while (this.currentChar_x9b225$ !== '=') {
                                            if (this.currentChar_x9b225$ === ':') {
                                                this.attributePrefix_r6drlg$ = this.attributeName_f9qnph$.toString();
                                                this.attributeName_f9qnph$ = new Kotlin.StringBuilder();
                                            }
                                            else {
                                                var tmp$0;
                                                this.attributeName_f9qnph$.append((tmp$0 = this.currentChar_x9b225$) != null ? tmp$0 : Kotlin.throwNPE());
                                            }
                                            this.currentChar_x9b225$ = this.readChar();
                                        }
                                        do {
                                            this.currentChar_x9b225$ = this.readChar();
                                        }
                                        while (this.currentChar_x9b225$ !== '"');
                                        this.currentChar_x9b225$ = this.readChar();
                                        while (this.currentChar_x9b225$ !== '"') {
                                            var tmp$1;
                                            this.attributeValue_npfmfd$.append((tmp$1 = this.currentChar_x9b225$) != null ? tmp$1 : Kotlin.throwNPE());
                                            this.currentChar_x9b225$ = this.readChar();
                                        }
                                        this.attributesNames_b5o00h$.add_za3rmp$(this.attributeName_f9qnph$.toString());
                                        this.attributesPrefixes_hgbl8n$.add_za3rmp$(this.attributePrefix_r6drlg$);
                                        this.attributesValues_d28x97$.add_za3rmp$(this.attributeValue_npfmfd$.toString());
                                        this.attributeName_f9qnph$ = new Kotlin.StringBuilder();
                                        this.attributePrefix_r6drlg$ = null;
                                        this.attributeValue_npfmfd$ = new Kotlin.StringBuilder();
                                        do {
                                            this.currentChar_x9b225$ = this.readChar();
                                            if (this.currentChar_x9b225$ === '?' || this.currentChar_x9b225$ === '/' || this.currentChar_x9b225$ === '-' || this.currentChar_x9b225$ === '>') {
                                                end_of_tag = true;
                                            }
                                        }
                                        while (!end_of_tag && this.currentChar_x9b225$ === ' ');
                                    }
                                }
                            })
                        })
                    })
                }),
                serializer: Kotlin.definePackage(null, /** @lends _.org.kevoree.serializer */ {
                    JSONModelSerializer: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.json.JSONModelSerializer];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                    }),
                    XMIModelSerializer: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.xmi.XMIModelSerializer];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                    })
                }),
                trace: Kotlin.definePackage(null, /** @lends _.org.kevoree.trace */ {
                    DefaultTraceSequence: Kotlin.createClass(function () {
                        return [_.org.kevoree.modeling.api.trace.TraceSequence];
                    }, function () {
                        this.$traces_8xzatx$ = new Kotlin.ArrayList();
                        this.$factory_79mml9$ = new _.org.kevoree.factory.MainFactory();
                    }, /** @lends _.org.kevoree.trace.DefaultTraceSequence.prototype */ {
                        traces: {
                            get: function () {
                                return this.$traces_8xzatx$;
                            },
                            set: function (tmp$0) {
                                this.$traces_8xzatx$ = tmp$0;
                            }
                        },
                        factory: {
                            get: function () {
                                return this.$factory_79mml9$;
                            },
                            set: function (tmp$0) {
                                this.$factory_79mml9$ = tmp$0;
                            }
                        }
                    })
                }),
                util: Kotlin.definePackage(function () {
                    this.Constants = Kotlin.createObject(null, function () {
                        this.UNKNOWN_MUTATION_TYPE_EXCEPTION = 'Unknown mutation type: ';
                        this.READ_ONLY_EXCEPTION = 'This model is ReadOnly. Elements are not modifiable.';
                        this.LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION = 'The list in parameter of the setter cannot be null. Use removeAll to empty a collection.';
                        this.ELEMENT_HAS_NO_KEY_IN_COLLECTION = 'Cannot set the collection, because at least one element of it has no key!';
                        this.EMPTY_KEY = 'Key empty : please set the attribute key before adding the object.';
                        this.KMFQL_CONTAINED = 'contained';
                        this.STRING_DEFAULTVAL = '';
                        this.INT_DEFAULTVAL = 0;
                        this.BOOLEAN_DEFAULTVAL = false;
                        this.CHAR_DEFAULTVAL = 'a';
                        this.SHORT_DEFAULTVAL = 0;
                        this.LONG_DEFAULTVAL = 0.0;
                        this.DOUBLE_DEFAULTVAL = 0.0;
                        this.FLOAT_DEFAULTVAL = 0;
                        this.BYTE_DEFAULTVAL = 0;
                        this.org_kevoree_Instance = 'org.kevoree.Instance';
                        this.Ref_superTypes = 'superTypes';
                        this.Att_started = 'started';
                        this.org_kevoree_NodeNetwork = 'org.kevoree.NodeNetwork';
                        this.org_kevoree_TypedElement = 'org.kevoree.TypedElement';
                        this.Ref_hub = 'hub';
                        this.Ref_dataTypes = 'dataTypes';
                        this.Att_factoryBean = 'factoryBean';
                        this.Ref_port = 'port';
                        this.Ref_returnType = 'returnType';
                        this.Ref_elements = 'elements';
                        this.CN_Dictionary = 'Dictionary';
                        this.Ref_portTypeRef = 'portTypeRef';
                        this.CN_ContainerRoot = 'ContainerRoot';
                        this.CN_Operation = 'Operation';
                        this.CN_PortType = 'PortType';
                        this.Att_networkType = 'networkType';
                        this.Ref_values = 'values';
                        this.Ref_initBy = 'initBy';
                        this.Ref_link = 'link';
                        this.org_kevoree_ContainerRoot = 'org.kevoree.ContainerRoot';
                        this.CN_Group = 'Group';
                        this.Ref_hosts = 'hosts';
                        this.Att_interface = 'interface';
                        this.org_kevoree_MBinding = 'org.kevoree.MBinding';
                        this.Ref_subTypes = 'subTypes';
                        this.Ref_groups = 'groups';
                        this.org_kevoree_Group = 'org.kevoree.Group';
                        this.CN_TypedElement = 'TypedElement';
                        this.Att_type = 'type';
                        this.Ref_dictionary = 'dictionary';
                        this.org_kevoree_DeployUnit = 'org.kevoree.DeployUnit';
                        this.Ref_fragmentDictionary = 'fragmentDictionary';
                        this.Ref_hubs = 'hubs';
                        this.Ref_mappings = 'mappings';
                        this.Ref_attributes = 'attributes';
                        this.Att_hashcode = 'hashcode';
                        this.Att_lowerFragments = 'lowerFragments';
                        this.Ref_networkInformation = 'networkInformation';
                        this.Att_datatype = 'datatype';
                        this.Ref_type = 'type';
                        this.Att_abstract = 'abstract';
                        this.Att_version = 'version';
                        this.CN_Namespace = 'Namespace';
                        this.org_kevoree_ContainerNode = 'org.kevoree.ContainerNode';
                        this.Ref_components = 'components';
                        this.CN_ChannelType = 'ChannelType';
                        this.CN_GroupType = 'GroupType';
                        this.Ref_typeDefinitions = 'typeDefinitions';
                        this.Ref_genericTypes = 'genericTypes';
                        this.Ref_requiredLibs = 'requiredLibs';
                        this.CN_PortTypeRef = 'PortTypeRef';
                        this.org_kevoree_DictionaryValue = 'org.kevoree.DictionaryValue';
                        this.CN_DeployUnit = 'DeployUnit';
                        this.org_kevoree_NodeLink = 'org.kevoree.NodeLink';
                        this.org_kevoree_Parameter = 'org.kevoree.Parameter';
                        this.org_kevoree_Repository = 'org.kevoree.Repository';
                        this.CN_NamedElement = 'NamedElement';
                        this.Att_serviceMethodName = 'serviceMethodName';
                        this.CN_Instance = 'Instance';
                        this.Ref_networkProperties = 'networkProperties';
                        this.Att_name = 'name';
                        this.CN_Repository = 'Repository';
                        this.CN_ComponentType = 'ComponentType';
                        this.Att_order = 'order';
                        this.Att_lowerBindings = 'lowerBindings';
                        this.org_kevoree_GroupType = 'org.kevoree.GroupType';
                        this.org_kevoree_Operation = 'org.kevoree.Operation';
                        this.CN_Port = 'Port';
                        this.Att_optional = 'optional';
                        this.CN_FragmentDictionary = 'FragmentDictionary';
                        this.Att_metaData = 'metaData';
                        this.Att_beanMethodName = 'beanMethodName';
                        this.org_kevoree_TypeDefinition = 'org.kevoree.TypeDefinition';
                        this.Ref_target = 'target';
                        this.org_kevoree_TypeLibrary = 'org.kevoree.TypeLibrary';
                        this.Att_paramTypes = 'paramTypes';
                        this.CN_MBinding = 'MBinding';
                        this.Att_noDependency = 'noDependency';
                        this.CN_NodeLink = 'NodeLink';
                        this.CN_PortTypeMapping = 'PortTypeMapping';
                        this.Ref_provided = 'provided';
                        this.Att_defaultValue = 'defaultValue';
                        this.org_kevoree_PortTypeMapping = 'org.kevoree.PortTypeMapping';
                        this.Ref_dictionaryType = 'dictionaryType';
                        this.CN_ComponentInstance = 'ComponentInstance';
                        this.Att_zoneID = 'zoneID';
                        this.Att_upperBindings = 'upperBindings';
                        this.Ref_host = 'host';
                        this.CN_TypeLibrary = 'TypeLibrary';
                        this.Att_url = 'url';
                        this.Ref_namespace = 'namespace';
                        this.org_kevoree_NodeType = 'org.kevoree.NodeType';
                        this.CN_ServicePortType = 'ServicePortType';
                        this.CN_NodeNetwork = 'NodeNetwork';
                        this.Att_state = 'state';
                        this.Att_fragmentDependant = 'fragmentDependant';
                        this.org_kevoree_ServicePortType = 'org.kevoree.ServicePortType';
                        this.org_kevoree_PortType = 'org.kevoree.PortType';
                        this.CN_MessagePortType = 'MessagePortType';
                        this.Ref_operations = 'operations';
                        this.CN_DictionaryAttribute = 'DictionaryAttribute';
                        this.Att_generated_KMF_ID = 'generated_KMF_ID';
                        this.org_kevoree_NamedElement = 'org.kevoree.NamedElement';
                        this.CN_TypeDefinition = 'TypeDefinition';
                        this.org_kevoree_ComponentType = 'org.kevoree.ComponentType';
                        this.Ref_mBindings = 'mBindings';
                        this.Ref_subNodes = 'subNodes';
                        this.Ref_nodes = 'nodes';
                        this.Ref_deployUnit = 'deployUnit';
                        this.org_kevoree_ChannelType = 'org.kevoree.ChannelType';
                        this.Ref_nodeNetworks = 'nodeNetworks';
                        this.Ref_parameters = 'parameters';
                        this.Att_estimatedRate = 'estimatedRate';
                        this.Att_value = 'value';
                        this.org_kevoree_NetworkProperty = 'org.kevoree.NetworkProperty';
                        this.org_kevoree_Port = 'org.kevoree.Port';
                        this.org_kevoree_ComponentInstance = 'org.kevoree.ComponentInstance';
                        this.CN_NetworkInfo = 'NetworkInfo';
                        this.org_kevoree_DictionaryAttribute = 'org.kevoree.DictionaryAttribute';
                        this.org_kevoree_Namespace = 'org.kevoree.Namespace';
                        this.org_kevoree_FragmentDictionary = 'org.kevoree.FragmentDictionary';
                        this.Ref_typeDefinition = 'typeDefinition';
                        this.org_kevoree_Channel = 'org.kevoree.Channel';
                        this.Ref_deployUnits = 'deployUnits';
                        this.org_kevoree_Dictionary = 'org.kevoree.Dictionary';
                        this.Att_synchrone = 'synchrone';
                        this.Ref_repositories = 'repositories';
                        this.Ref_required = 'required';
                        this.Att_lastCheck = 'lastCheck';
                        this.Ref_libraries = 'libraries';
                        this.Att_upperFragments = 'upperFragments';
                        this.org_kevoree_NetworkInfo = 'org.kevoree.NetworkInfo';
                        this.CN_ContainerNode = 'ContainerNode';
                        this.Att_groupName = 'groupName';
                        this.CN_Parameter = 'Parameter';
                        this.CN_DictionaryValue = 'DictionaryValue';
                        this.org_kevoree_PortTypeRef = 'org.kevoree.PortTypeRef';
                        this.Ref_filters = 'filters';
                        this.CN_NetworkProperty = 'NetworkProperty';
                        this.org_kevoree_DictionaryType = 'org.kevoree.DictionaryType';
                        this.CN_NodeType = 'NodeType';
                        this.Att_bean = 'bean';
                        this.CN_Channel = 'Channel';
                        this.Ref_bindings = 'bindings';
                        this.Ref_ref = 'ref';
                        this.CN_DictionaryType = 'DictionaryType';
                        this.org_kevoree_MessagePortType = 'org.kevoree.MessagePortType';
                    });
                }, /** @lends _.org.kevoree.util */ {
                })
            }),
            w3c: Kotlin.definePackage(null, /** @lends _.org.w3c */ {
                dom: Kotlin.definePackage(null, /** @lends _.org.w3c.dom */ {
                    events: Kotlin.definePackage(null, /** @lends _.org.w3c.dom.events */ {
                        EventListener: Kotlin.createTrait(null)
                    })
                })
            })
        }),
        kotlin: Kotlin.definePackage(null, /** @lends _.kotlin */ {
            toString_h3panj$: function ($receiver) {
                return _.kotlin.makeString_mc2pv1$($receiver, ', ', '[', ']');
            },
            mapValues_lh0hhz$: function ($receiver, transform) {
                return _.kotlin.mapValuesTo_7qivbo$($receiver, new Kotlin.ComplexHashMap(), transform);
            },
            Pair: Kotlin.createClass(null, function (first, second) {
                this.first = first;
                this.second = second;
            }, /** @lends _.kotlin.Pair.prototype */ {
                component1: function () {
                    return this.first;
                },
                component2: function () {
                    return this.second;
                },
                toString: function () {
                    return '(' + this.first + ', ' + this.second + ')';
                }
            }),
            Triple: Kotlin.createClass(null, function (first, second, third) {
                this.first = first;
                this.second = second;
                this.third = third;
            }, /** @lends _.kotlin.Triple.prototype */ {
                component1: function () {
                    return this.first;
                },
                component2: function () {
                    return this.second;
                },
                component3: function () {
                    return this.third;
                },
                toString: function () {
                    return '(' + this.first + ', ' + this.second + ', ' + this.third + ')';
                }
            }),
            sum_h3panj$: function ($receiver) {
                var iterator = $receiver.iterator();
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_h3panj$_0: function ($receiver) {
                var iterator = $receiver.iterator();
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_h3panj$_1: function ($receiver) {
                var iterator = $receiver.iterator();
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_h3panj$_2: function ($receiver) {
                var iterator = $receiver.iterator();
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_tmsbgp$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$_0: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_se6h4y$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$_1: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_964n92$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$_2: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_i2lc78$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$_3: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_bvy38t$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_2hx8bi$_4: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            sum_rjqrz0$: function ($receiver) {
                var iterator = Kotlin.arrayIterator($receiver);
                var sum = 0.0;
                while (iterator.hasNext()) {
                    sum += iterator.next();
                }
                return sum;
            },
            requireNoNulls_2hx8bi$: function ($receiver) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (element == null) {
                            throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver);
                        }
                    }
                }
                return $receiver != null ? $receiver : Kotlin.throwNPE();
            },
            requireNoNulls_h3panj$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element == null) {
                            throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver);
                        }
                    }
                }
                return $receiver != null ? $receiver : Kotlin.throwNPE();
            },
            requireNoNulls_mtvwn1$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element == null) {
                            throw new Kotlin.IllegalArgumentException('null element found in ' + $receiver);
                        }
                    }
                }
                return $receiver != null ? $receiver : Kotlin.throwNPE();
            },
            requireNoNulls_pdnvbz$f: function (this$requireNoNulls) {
                return function (it) {
                    if (it == null) {
                        throw new Kotlin.IllegalArgumentException('null element found in ' + this$requireNoNulls);
                    }
                    return true;
                };
            },
            requireNoNulls_pdnvbz$: function ($receiver) {
                var tmp$0;
                return (tmp$0 = new _.kotlin.FilteringStream($receiver, void 0, _.kotlin.requireNoNulls_pdnvbz$f($receiver))) != null ? tmp$0 : Kotlin.throwNPE();
            },
            drop_fdw77o$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_rz0vgy$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_ucmip8$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_cwi0e2$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_3qx2rv$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_2e964m$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_tb5gmf$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_x09c4g$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_7naycm$: function ($receiver, n) {
                if (n >= $receiver.length)
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList($receiver.length - n);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_odt3s5$: function ($receiver, n) {
                if (n >= _.kotlin.get_size_0($receiver))
                    return new Kotlin.ArrayList();
                var count = 0;
                var list = new Kotlin.ArrayList(_.kotlin.get_size_0($receiver) - n);
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_eq3vf5$: function ($receiver, n) {
                var count = 0;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            drop_9ip83h$f: function (count, n) {
                return function (it) {
                    return count.v++ >= n;
                };
            },
            drop_9ip83h$: function ($receiver, n) {
                var count = {v: 0};
                return new _.kotlin.FilteringStream($receiver, void 0, _.kotlin.drop_9ip83h$f(count, n));
            },
            dropWhile_de9h66$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_50zxbw$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_x245au$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_h5ed0c$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_24jijj$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_im8pe8$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_1xntkt$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_3cuuyy$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_p67zio$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_vqr6wr$: function ($receiver, predicate) {
                var yielding = false;
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (yielding)
                            list.add_za3rmp$(item);
                        else if (!predicate(item)) {
                            list.add_za3rmp$(item);
                            yielding = true;
                        }
                    }
                }
                return list;
            },
            dropWhile_9fpnal$f: function (yielding, predicate) {
                return function (it) {
                    if (yielding.v)
                        return true;
                    else if (!predicate(it)) {
                        yielding.v = true;
                        return true;
                    }
                    else
                        return false;
                };
            },
            dropWhile_9fpnal$: function ($receiver, predicate) {
                var yielding = {v: false};
                return new _.kotlin.FilteringStream($receiver, void 0, _.kotlin.dropWhile_9fpnal$f(yielding, predicate));
            },
            filter_de9h66$: function ($receiver, predicate) {
                return _.kotlin.filterTo_1jm7xb$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_50zxbw$: function ($receiver, predicate) {
                return _.kotlin.filterTo_uoz9bj$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_x245au$: function ($receiver, predicate) {
                return _.kotlin.filterTo_o451x3$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_h5ed0c$: function ($receiver, predicate) {
                return _.kotlin.filterTo_xryfpz$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_24jijj$: function ($receiver, predicate) {
                return _.kotlin.filterTo_6s9ff2$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_im8pe8$: function ($receiver, predicate) {
                return _.kotlin.filterTo_lbhsbh$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_1xntkt$: function ($receiver, predicate) {
                return _.kotlin.filterTo_4m2m1i$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_3cuuyy$: function ($receiver, predicate) {
                return _.kotlin.filterTo_ru2r$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_p67zio$: function ($receiver, predicate) {
                return _.kotlin.filterTo_wion7n$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_vqr6wr$: function ($receiver, predicate) {
                return _.kotlin.filterTo_ywx4y6$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_gld13f$: function ($receiver, predicate) {
                return _.kotlin.filterTo_inv7mm$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filter_9fpnal$: function ($receiver, predicate) {
                return new _.kotlin.FilteringStream($receiver, true, predicate);
            },
            filterNot_de9h66$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_1jm7xb$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_50zxbw$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_uoz9bj$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_x245au$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_o451x3$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_h5ed0c$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_xryfpz$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_24jijj$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_6s9ff2$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_im8pe8$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_lbhsbh$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_1xntkt$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_4m2m1i$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_3cuuyy$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_ru2r$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_p67zio$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_wion7n$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_vqr6wr$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_ywx4y6$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_gld13f$: function ($receiver, predicate) {
                return _.kotlin.filterNotTo_inv7mm$($receiver, new Kotlin.ArrayList(), predicate);
            },
            filterNot_9fpnal$: function ($receiver, predicate) {
                return new _.kotlin.FilteringStream($receiver, false, predicate);
            },
            filterNotNull_2hx8bi$: function ($receiver) {
                return _.kotlin.filterNotNullTo_xpmo5j$($receiver, new Kotlin.ArrayList());
            },
            filterNotNull_h3panj$: function ($receiver) {
                return _.kotlin.filterNotNullTo_4jj70a$($receiver, new Kotlin.ArrayList());
            },
            filterNotNull_pdnvbz$f: function (it) {
                return it != null;
            },
            filterNotNull_pdnvbz$: function ($receiver) {
                var tmp$0;
                return (tmp$0 = new _.kotlin.FilteringStream($receiver, false, _.kotlin.filterNotNull_pdnvbz$f)) != null ? tmp$0 : Kotlin.throwNPE();
            },
            filterNotNullTo_xpmo5j$: function ($receiver, collection) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (element != null)
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotNullTo_4jj70a$: function ($receiver, collection) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element != null)
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotNullTo_791eew$: function ($receiver, collection) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element != null)
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_1jm7xb$: function ($receiver, collection, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_uoz9bj$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_o451x3$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_xryfpz$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_6s9ff2$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_lbhsbh$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_4m2m1i$: function ($receiver, collection, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_ru2r$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_wion7n$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_ywx4y6$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_inv7mm$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterNotTo_ggat1c$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_1jm7xb$: function ($receiver, collection, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_uoz9bj$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_o451x3$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_xryfpz$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_6s9ff2$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_lbhsbh$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_4m2m1i$: function ($receiver, collection, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_ru2r$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_wion7n$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_ywx4y6$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_inv7mm$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            filterTo_ggat1c$: function ($receiver, collection, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            collection.add_za3rmp$(element);
                    }
                }
                return collection;
            },
            take_fdw77o$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_rz0vgy$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_ucmip8$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_cwi0e2$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_3qx2rv$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_2e964m$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_tb5gmf$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_x09c4g$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_7naycm$: function ($receiver, n) {
                var count = 0;
                var realN = n > $receiver.length ? $receiver.length : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_odt3s5$: function ($receiver, n) {
                var count = 0;
                var realN = n > _.kotlin.get_size_0($receiver) ? _.kotlin.get_size_0($receiver) : n;
                var list = new Kotlin.ArrayList(realN);
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ === realN)
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_eq3vf5$: function ($receiver, n) {
                var count = 0;
                var list = new Kotlin.ArrayList(n);
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (count++ >= n)
                            list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            take_9ip83h$f: function (count, n) {
                return function (it) {
                    return count.v++ === n;
                };
            },
            take_9ip83h$: function ($receiver, n) {
                var count = {v: 0};
                return new _.kotlin.LimitedStream($receiver, void 0, _.kotlin.take_9ip83h$f(count, n));
            },
            takeWhile_de9h66$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_50zxbw$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_x245au$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_h5ed0c$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_24jijj$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_im8pe8$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_1xntkt$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_3cuuyy$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_p67zio$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_vqr6wr$: function ($receiver, predicate) {
                var list = new Kotlin.ArrayList();
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (!predicate(item))
                            break;
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            takeWhile_9fpnal$: function ($receiver, predicate) {
                return new _.kotlin.LimitedStream($receiver, false, predicate);
            },
            to_l1ob02$: function ($receiver, that) {
                return new _.kotlin.Pair($receiver, that);
            },
            run_n8bj3p$: function (f) {
                return f();
            },
            with_rc1ekn$: function (receiver, f) {
                return f.call(receiver);
            },
            let_j58jph$: function ($receiver, f) {
                return f($receiver);
            },
            stream_2hx8bi$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_l1lu5s$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_964n92$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_355nu0$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_bvy38t$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_rjqrz0$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_tmsbgp$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_se6h4y$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_i2lc78$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return Kotlin.arrayIterator($receiver);
                    }
                });
            },
            stream_h3panj$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.Stream];
                }, null, {
                    iterator: function () {
                        return $receiver.iterator();
                    }
                });
            },
            stream_pdnvbz$: function ($receiver) {
                return $receiver;
            },
            toArrayList_2hx8bi$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_l1lu5s$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_964n92$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_355nu0$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_bvy38t$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_rjqrz0$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_tmsbgp$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_se6h4y$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_i2lc78$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toArrayList_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.ArrayList());
            },
            toArrayList_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.ArrayList());
            },
            toCollection_xpmo5j$: function ($receiver, collection) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_aaeveh$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_d1lgh$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_ba3pld$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_enu0mi$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_gk003p$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_mglpxq$: function ($receiver, collection) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_vus1ud$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_5k8uqj$: function ($receiver, collection) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_4jj70a$: function ($receiver, collection) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toCollection_791eew$: function ($receiver, collection) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(item);
                    }
                }
                return collection;
            },
            toHashSet_2hx8bi$: function ($receiver) {
                return _.kotlin.toCollection_xpmo5j$($receiver, new Kotlin.ComplexHashSet());
            },
            toHashSet_l1lu5s$: function ($receiver) {
                return _.kotlin.toCollection_aaeveh$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_964n92$: function ($receiver) {
                return _.kotlin.toCollection_d1lgh$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_355nu0$: function ($receiver) {
                return _.kotlin.toCollection_ba3pld$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_bvy38t$: function ($receiver) {
                return _.kotlin.toCollection_enu0mi$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_rjqrz0$: function ($receiver) {
                return _.kotlin.toCollection_gk003p$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_tmsbgp$: function ($receiver) {
                return _.kotlin.toCollection_mglpxq$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_se6h4y$: function ($receiver) {
                return _.kotlin.toCollection_vus1ud$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_i2lc78$: function ($receiver) {
                return _.kotlin.toCollection_5k8uqj$($receiver, new Kotlin.PrimitiveHashSet());
            },
            toHashSet_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.ComplexHashSet());
            },
            toHashSet_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.ComplexHashSet());
            },
            toLinkedList_2hx8bi$: function ($receiver) {
                return _.kotlin.toCollection_xpmo5j$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_l1lu5s$: function ($receiver) {
                return _.kotlin.toCollection_aaeveh$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_964n92$: function ($receiver) {
                return _.kotlin.toCollection_d1lgh$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_355nu0$: function ($receiver) {
                return _.kotlin.toCollection_ba3pld$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_bvy38t$: function ($receiver) {
                return _.kotlin.toCollection_enu0mi$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_rjqrz0$: function ($receiver) {
                return _.kotlin.toCollection_gk003p$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_tmsbgp$: function ($receiver) {
                return _.kotlin.toCollection_mglpxq$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_se6h4y$: function ($receiver) {
                return _.kotlin.toCollection_vus1ud$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_i2lc78$: function ($receiver) {
                return _.kotlin.toCollection_5k8uqj$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.LinkedList());
            },
            toLinkedList_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.LinkedList());
            },
            toList_2hx8bi$: function ($receiver) {
                return _.kotlin.toCollection_xpmo5j$($receiver, new Kotlin.ArrayList());
            },
            toList_l1lu5s$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_964n92$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_355nu0$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_bvy38t$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_rjqrz0$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_tmsbgp$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_se6h4y$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_i2lc78$: function ($receiver) {
                var list = new Kotlin.ArrayList($receiver.length);
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        list.add_za3rmp$(item);
                    }
                }
                return list;
            },
            toList_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.ArrayList());
            },
            toList_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.ArrayList());
            },
            toSet_2hx8bi$: function ($receiver) {
                return _.kotlin.toCollection_xpmo5j$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_l1lu5s$: function ($receiver) {
                return _.kotlin.toCollection_aaeveh$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_964n92$: function ($receiver) {
                return _.kotlin.toCollection_d1lgh$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_355nu0$: function ($receiver) {
                return _.kotlin.toCollection_ba3pld$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_bvy38t$: function ($receiver) {
                return _.kotlin.toCollection_enu0mi$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_rjqrz0$: function ($receiver) {
                return _.kotlin.toCollection_gk003p$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_tmsbgp$: function ($receiver) {
                return _.kotlin.toCollection_mglpxq$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_se6h4y$: function ($receiver) {
                return _.kotlin.toCollection_vus1ud$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_i2lc78$: function ($receiver) {
                return _.kotlin.toCollection_5k8uqj$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.LinkedHashSet());
            },
            toSet_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.LinkedHashSet());
            },
            toSortedList_2hx8bi$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_2hx8bi$($receiver));
            },
            toSortedList_l1lu5s$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_l1lu5s$($receiver));
            },
            toSortedList_964n92$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_964n92$($receiver));
            },
            toSortedList_355nu0$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_355nu0$($receiver));
            },
            toSortedList_bvy38t$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_bvy38t$($receiver));
            },
            toSortedList_rjqrz0$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_rjqrz0$($receiver));
            },
            toSortedList_tmsbgp$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_tmsbgp$($receiver));
            },
            toSortedList_se6h4y$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_se6h4y$($receiver));
            },
            toSortedList_i2lc78$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_i2lc78$($receiver));
            },
            toSortedList_h3panj$: function ($receiver) {
                return _.kotlin.sort_h3panj$($receiver);
            },
            toSortedList_pdnvbz$: function ($receiver) {
                return _.kotlin.sort_h3panj$(_.kotlin.toArrayList_pdnvbz$($receiver));
            },
            toSortedSet_2hx8bi$: function ($receiver) {
                return _.kotlin.toCollection_xpmo5j$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_l1lu5s$: function ($receiver) {
                return _.kotlin.toCollection_aaeveh$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_964n92$: function ($receiver) {
                return _.kotlin.toCollection_d1lgh$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_355nu0$: function ($receiver) {
                return _.kotlin.toCollection_ba3pld$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_bvy38t$: function ($receiver) {
                return _.kotlin.toCollection_enu0mi$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_rjqrz0$: function ($receiver) {
                return _.kotlin.toCollection_gk003p$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_tmsbgp$: function ($receiver) {
                return _.kotlin.toCollection_mglpxq$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_se6h4y$: function ($receiver) {
                return _.kotlin.toCollection_vus1ud$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_i2lc78$: function ($receiver) {
                return _.kotlin.toCollection_5k8uqj$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_h3panj$: function ($receiver) {
                return _.kotlin.toCollection_4jj70a$($receiver, new Kotlin.TreeSet());
            },
            toSortedSet_pdnvbz$: function ($receiver) {
                return _.kotlin.toCollection_791eew$($receiver, new Kotlin.TreeSet());
            },
            downTo_9q324c$: function ($receiver, to) {
                return new _.kotlin.ByteProgression($receiver, to, -1);
            },
            downTo_9q3c22$: function ($receiver, to) {
                return new _.kotlin.CharProgression($receiver.toChar(), to, -1);
            },
            downTo_hl85u0$: function ($receiver, to) {
                return new _.kotlin.ShortProgression($receiver, to, -1);
            },
            downTo_y20kcl$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to, -1);
            },
            downTo_9q98fk$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver.toLong(), to, -(1).toLong());
            },
            downTo_he5dns$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_tylosb$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_sd8xje$: function ($receiver, to) {
                return new _.kotlin.CharProgression($receiver, to.toChar(), -1);
            },
            downTo_sd97h4$: function ($receiver, to) {
                return new _.kotlin.CharProgression($receiver, to, -1);
            },
            downTo_radrzu$: function ($receiver, to) {
                return new _.kotlin.ShortProgression($receiver.toShort(), to, -1);
            },
            downTo_v5vllf$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver.toInt(), to, -1);
            },
            downTo_sdf3um$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver.toLong(), to, -(1).toLong());
            },
            downTo_r3aztm$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver.toFloat(), to, -1);
            },
            downTo_df7tnx$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver.toDouble(), to, -1.0);
            },
            downTo_9r634a$: function ($receiver, to) {
                return new _.kotlin.ShortProgression($receiver, to, -1);
            },
            downTo_9r5t6k$: function ($receiver, to) {
                return new _.kotlin.ShortProgression($receiver, to.toShort(), -1);
            },
            downTo_i0qws2$: function ($receiver, to) {
                return new _.kotlin.ShortProgression($receiver, to, -1);
            },
            downTo_rt69vj$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to, -1);
            },
            downTo_9qzwt2$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver.toLong(), to, -(1).toLong());
            },
            downTo_i7toya$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_2lzxtr$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_2jcion$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to, -1);
            },
            downTo_2jc8qx$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to.toInt(), -1);
            },
            downTo_7dmh8l$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to, -1);
            },
            downTo_rksjo2$: function ($receiver, to) {
                return new Kotlin.NumberProgression($receiver, to, -1);
            },
            downTo_2j6cdf$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver.toLong(), to, -(1).toLong());
            },
            downTo_7kp9et$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_mmqya6$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_jzdo0$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver, to.toLong(), -(1).toLong());
            },
            downTo_jznlq$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver, to.toLong(), -(1).toLong());
            },
            downTo_hgibo4$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver, to.toLong(), -(1).toLong());
            },
            downTo_mw85q1$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver, to.toLong(), -(1).toLong());
            },
            downTo_k5jz8$: function ($receiver, to) {
                return new _.kotlin.LongProgression($receiver, to, -(1).toLong());
            },
            downTo_h9fjhw$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver.toFloat(), to, -1);
            },
            downTo_y0unuv$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver.toDouble(), to, -1.0);
            },
            downTo_kquaae$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_kquk84$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to.toFloat(), -1);
            },
            downTo_433x66$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_jyaijj$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_kr0glm$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to.toFloat(), -1);
            },
            downTo_3w14zy$: function ($receiver, to) {
                return new _.kotlin.FloatProgression($receiver, to, -1);
            },
            downTo_mdktgh$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_stl18b$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_stkral$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to.toDouble(), -1.0);
            },
            downTo_u6e7j3$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_aiyy8i$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_steux3$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to.toDouble(), -1.0);
            },
            downTo_tzbfcv$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            downTo_541hxq$: function ($receiver, to) {
                return new _.kotlin.DoubleProgression($receiver, to, -1.0);
            },
            flatMap_de9h66$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_1jm7xb$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_50zxbw$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_uoz9bj$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_x245au$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_o451x3$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_h5ed0c$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_xryfpz$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_24jijj$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_6s9ff2$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_im8pe8$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_lbhsbh$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_1xntkt$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_4m2m1i$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_3cuuyy$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_ru2r$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_p67zio$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_wion7n$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_vqr6wr$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_ywx4y6$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_gld13f$: function ($receiver, transform) {
                return _.kotlin.flatMapTo_inv7mm$($receiver, new Kotlin.ArrayList(), transform);
            },
            flatMap_9fpnal$: function ($receiver, transform) {
                return new _.kotlin.FlatteningStream($receiver, transform);
            },
            flatMapTo_1jm7xb$: function ($receiver, collection, transform) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_uoz9bj$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_o451x3$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_xryfpz$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_6s9ff2$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_lbhsbh$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_4m2m1i$: function ($receiver, collection, transform) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_ru2r$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_wion7n$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_ywx4y6$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_inv7mm$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_wtmfso$(collection, list);
                    }
                }
                return collection;
            },
            flatMapTo_ggat1c$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var list = transform(element);
                        _.kotlin.addAll_ngcqne$(collection, list);
                    }
                }
                return collection;
            },
            groupBy_de9h66$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_dmnozt$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_50zxbw$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_7i5ojf$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_x245au$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_du5x9d$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_h5ed0c$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_4mj9lf$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_24jijj$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_yr676w$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_im8pe8$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_fktjsp$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_1xntkt$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_8qaat0$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_3cuuyy$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_rnq9xv$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_p67zio$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_yb8vhj$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_vqr6wr$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_cyhgqk$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_gld13f$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_7qivbo$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupBy_9fpnal$: function ($receiver, toKey) {
                return _.kotlin.groupByTo_fsw8ae$($receiver, new Kotlin.ComplexHashMap(), toKey);
            },
            groupByTo_dmnozt$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_dmnozt$: function ($receiver, map, toKey) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_dmnozt$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_7i5ojf$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_7i5ojf$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_7i5ojf$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_du5x9d$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_du5x9d$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_du5x9d$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_4mj9lf$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_4mj9lf$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_4mj9lf$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_yr676w$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_yr676w$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_yr676w$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_fktjsp$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_fktjsp$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_fktjsp$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_8qaat0$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_8qaat0$: function ($receiver, map, toKey) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_8qaat0$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_rnq9xv$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_rnq9xv$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_rnq9xv$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_yb8vhj$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_yb8vhj$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_yb8vhj$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_cyhgqk$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_cyhgqk$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_cyhgqk$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_7qivbo$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_7qivbo$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_7qivbo$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            groupByTo_fsw8ae$f: function () {
                return new Kotlin.ArrayList();
            },
            groupByTo_fsw8ae$: function ($receiver, map, toKey) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        var key = toKey(element);
                        var list = _.kotlin.getOrPut_ynyybx$(map, key, _.kotlin.groupByTo_fsw8ae$f);
                        list.add_za3rmp$(element);
                    }
                }
                return map;
            },
            map_de9h66$: function ($receiver, transform) {
                return _.kotlin.mapTo_1jm7xb$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_50zxbw$: function ($receiver, transform) {
                return _.kotlin.mapTo_uoz9bj$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_x245au$: function ($receiver, transform) {
                return _.kotlin.mapTo_o451x3$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_h5ed0c$: function ($receiver, transform) {
                return _.kotlin.mapTo_xryfpz$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_24jijj$: function ($receiver, transform) {
                return _.kotlin.mapTo_6s9ff2$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_im8pe8$: function ($receiver, transform) {
                return _.kotlin.mapTo_lbhsbh$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_1xntkt$: function ($receiver, transform) {
                return _.kotlin.mapTo_4m2m1i$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_3cuuyy$: function ($receiver, transform) {
                return _.kotlin.mapTo_ru2r$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_p67zio$: function ($receiver, transform) {
                return _.kotlin.mapTo_wion7n$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_vqr6wr$: function ($receiver, transform) {
                return _.kotlin.mapTo_ywx4y6$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_gld13f$: function ($receiver, transform) {
                return _.kotlin.mapTo_inv7mm$($receiver, new Kotlin.ArrayList(), transform);
            },
            map_9fpnal$: function ($receiver, transform) {
                return new _.kotlin.TransformingStream($receiver, transform);
            },
            mapNotNull_de9h66$: function ($receiver, transform) {
                return _.kotlin.mapNotNullTo_1jm7xb$($receiver, new Kotlin.ArrayList(), transform);
            },
            mapNotNull_vqr6wr$: function ($receiver, transform) {
                return _.kotlin.mapNotNullTo_ywx4y6$($receiver, new Kotlin.ArrayList(), transform);
            },
            mapNotNull_9fpnal$f: function (it) {
                return it != null;
            },
            mapNotNull_9fpnal$: function ($receiver, transform) {
                var tmp$0;
                return new _.kotlin.TransformingStream((tmp$0 = new _.kotlin.FilteringStream($receiver, false, _.kotlin.mapNotNull_9fpnal$f)) != null ? tmp$0 : Kotlin.throwNPE(), transform);
            },
            mapNotNullTo_1jm7xb$: function ($receiver, collection, transform) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (element != null) {
                            collection.add_za3rmp$(transform(element));
                        }
                    }
                }
                return collection;
            },
            mapNotNullTo_ywx4y6$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element != null) {
                            collection.add_za3rmp$(transform(element));
                        }
                    }
                }
                return collection;
            },
            mapNotNullTo_ggat1c$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (element != null) {
                            collection.add_za3rmp$(transform(element));
                        }
                    }
                }
                return collection;
            },
            mapTo_1jm7xb$: function ($receiver, collection, transform) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_uoz9bj$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_o451x3$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_xryfpz$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_6s9ff2$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_lbhsbh$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_4m2m1i$: function ($receiver, collection, transform) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var item = tmp$0[tmp$2];
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_ru2r$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_wion7n$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_ywx4y6$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_inv7mm$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            mapTo_ggat1c$: function ($receiver, collection, transform) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        collection.add_za3rmp$(transform(item));
                    }
                }
                return collection;
            },
            withIndices_2hx8bi$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_2hx8bi$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_1jm7xb$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_2hx8bi$f(index));
            },
            withIndices_l1lu5s$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_l1lu5s$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_uoz9bj$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_l1lu5s$f(index));
            },
            withIndices_964n92$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_964n92$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_o451x3$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_964n92$f(index));
            },
            withIndices_355nu0$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_355nu0$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_xryfpz$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_355nu0$f(index));
            },
            withIndices_bvy38t$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_bvy38t$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_6s9ff2$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_bvy38t$f(index));
            },
            withIndices_rjqrz0$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_rjqrz0$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_lbhsbh$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_rjqrz0$f(index));
            },
            withIndices_tmsbgp$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_tmsbgp$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_4m2m1i$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_tmsbgp$f(index));
            },
            withIndices_se6h4y$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_se6h4y$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_ru2r$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_se6h4y$f(index));
            },
            withIndices_i2lc78$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_i2lc78$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_wion7n$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_i2lc78$f(index));
            },
            withIndices_h3panj$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_h3panj$: function ($receiver) {
                var index = {v: 0};
                return _.kotlin.mapTo_ywx4y6$($receiver, new Kotlin.ArrayList(), _.kotlin.withIndices_h3panj$f(index));
            },
            withIndices_pdnvbz$f: function (index) {
                return function (it) {
                    return _.kotlin.to_l1ob02$(index.v++, it);
                };
            },
            withIndices_pdnvbz$: function ($receiver) {
                var index = {v: 0};
                return new _.kotlin.TransformingStream($receiver, _.kotlin.withIndices_pdnvbz$f(index));
            },
            trim_94jgcu$: function ($receiver, text) {
                return _.kotlin.trimTrailing_94jgcu$(_.kotlin.trimLeading_94jgcu$($receiver, text), text);
            },
            first_pdl1w0$: function ($receiver) {
                return $receiver.charAt(0);
            },
            last_pdl1w0$: function ($receiver) {
                return $receiver.charAt($receiver.length - 1);
            },
            trim_ex0kps$: function ($receiver, prefix, postfix) {
                return _.kotlin.trimTrailing_94jgcu$(_.kotlin.trimLeading_94jgcu$($receiver, prefix), postfix);
            },
            trimLeading_94jgcu$: function ($receiver, prefix) {
                var answer = $receiver;
                if (answer.startsWith(prefix)) {
                    answer = answer.substring(prefix.length);
                }
                return answer;
            },
            trimTrailing_94jgcu$: function ($receiver, postfix) {
                var answer = $receiver;
                if (answer.endsWith(postfix)) {
                    answer = answer.substring(0, $receiver.length - postfix.length);
                }
                return answer;
            },
            isNotEmpty_pdl1w0$: function ($receiver) {
                return $receiver != null && $receiver.length > 0;
            },
            iterator_gw00vq$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [_.kotlin.CharIterator];
                }, function $fun() {
                    $fun.baseInitializer.call(this);
                    this.index_xuly00$ = 0;
                }, {
                    nextChar: function () {
                        return $receiver.get_za3lpa$(this.index_xuly00$++);
                    },
                    hasNext: function () {
                        return this.index_xuly00$ < $receiver.length;
                    }
                });
            },
            orEmpty_pdl1w0$: function ($receiver) {
                return $receiver != null ? $receiver : '';
            },
            get_size_1: {value: function ($receiver) {
                return $receiver.length;
            }},
            count_t73kuc$: function ($receiver, predicate) {
                var answer = 0;
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var c = tmp$0.next();
                        if (predicate(c)) {
                            answer++;
                        }
                    }
                }
                return answer;
            },
            f: function (this$toGenerator, nextValue) {
                return function (result) {
                    nextValue.v = this$toGenerator(result);
                    return result;
                };
            },
            toGenerator_n1mtj3$f: function (nextValue, this$toGenerator) {
                return function () {
                    var tmp$0;
                    return (tmp$0 = nextValue.v) != null ? _.kotlin.let_j58jph$(tmp$0, _.kotlin.f(this$toGenerator, nextValue)) : null;
                };
            },
            toGenerator_n1mtj3$: function ($receiver, initialValue) {
                var nextValue = {v: initialValue};
                return _.kotlin.toGenerator_n1mtj3$f(nextValue, $receiver);
            },
            Stream: Kotlin.createTrait(null),
            streamOf_mzrxf8$: function (elements) {
                return _.kotlin.stream_2hx8bi$(elements);
            },
            FilteringStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (stream, sendWhen, predicate) {
                if (sendWhen === void 0)
                    sendWhen = true;
                this.stream = stream;
                this.sendWhen = sendWhen;
                this.predicate = predicate;
            }, /** @lends _.kotlin.FilteringStream.prototype */ {
                iterator: function () {
                    return _.kotlin.FilteringStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.FilteringStream */ {
                iterator$f: function (this$FilteringStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator = this$FilteringStream.stream.iterator();
                    }, {
                        computeNext: function () {
                            while (this.iterator.hasNext()) {
                                var item = this.iterator.next();
                                if (Kotlin.equals(this$FilteringStream.predicate(item), this$FilteringStream.sendWhen)) {
                                    this.setNext_za3rmp$(item);
                                    return;
                                }
                            }
                            this.done();
                        }
                    });
                }
            }),
            TransformingStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (stream, transformer) {
                this.stream = stream;
                this.transformer = transformer;
            }, /** @lends _.kotlin.TransformingStream.prototype */ {
                iterator: function () {
                    return _.kotlin.TransformingStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.TransformingStream */ {
                iterator$f: function (this$TransformingStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator = this$TransformingStream.stream.iterator();
                    }, {
                        computeNext: function () {
                            if (this.iterator.hasNext()) {
                                this.setNext_za3rmp$(this$TransformingStream.transformer(this.iterator.next()));
                            }
                            else {
                                this.done();
                            }
                        }
                    });
                }
            }),
            ZippingStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (stream1, stream2) {
                this.stream1 = stream1;
                this.stream2 = stream2;
            }, /** @lends _.kotlin.ZippingStream.prototype */ {
                iterator: function () {
                    return _.kotlin.ZippingStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.ZippingStream */ {
                iterator$f: function (this$ZippingStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator1 = this$ZippingStream.stream1.iterator();
                        this.iterator2 = this$ZippingStream.stream2.iterator();
                    }, {
                        computeNext: function () {
                            if (this.iterator1.hasNext() && this.iterator2.hasNext()) {
                                this.setNext_za3rmp$(_.kotlin.to_l1ob02$(this.iterator1.next(), this.iterator2.next()));
                            }
                            else {
                                this.done();
                            }
                        }
                    });
                }
            }),
            FlatteningStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (stream, transformer) {
                this.stream = stream;
                this.transformer = transformer;
            }, /** @lends _.kotlin.FlatteningStream.prototype */ {
                iterator: function () {
                    return _.kotlin.FlatteningStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.FlatteningStream */ {
                iterator$f: function (this$FlatteningStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator = this$FlatteningStream.stream.iterator();
                        this.itemIterator = null;
                    }, {
                        computeNext: function () {
                            while (this.itemIterator == null) {
                                if (!this.iterator.hasNext()) {
                                    this.done();
                                    break;
                                }
                                else {
                                    var element = this.iterator.next();
                                    var nextItemIterator = this$FlatteningStream.transformer(element).iterator();
                                    if (nextItemIterator.hasNext())
                                        this.itemIterator = nextItemIterator;
                                }
                            }
                            var currentItemIterator = this.itemIterator;
                            if (currentItemIterator == null) {
                                this.done();
                            }
                            else {
                                this.setNext_za3rmp$(currentItemIterator.next());
                                if (!currentItemIterator.hasNext())
                                    this.itemIterator = null;
                            }
                        }
                    });
                }
            }),
            Multistream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (streams) {
                this.streams = streams;
            }, /** @lends _.kotlin.Multistream.prototype */ {
                iterator: function () {
                    return _.kotlin.Multistream.iterator$f(this);
                }
            }, /** @lends _.kotlin.Multistream */ {
                iterator$f: function (this$Multistream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator = this$Multistream.streams.iterator();
                        this.streamIterator = null;
                    }, {
                        computeNext: function () {
                            while (this.streamIterator == null) {
                                if (!this.iterator.hasNext()) {
                                    this.done();
                                    break;
                                }
                                else {
                                    var stream = this.iterator.next();
                                    var nextStreamIterator = stream.iterator();
                                    if (nextStreamIterator.hasNext())
                                        this.streamIterator = nextStreamIterator;
                                }
                            }
                            var currentStreamIterator = this.streamIterator;
                            if (currentStreamIterator == null) {
                                this.done();
                            }
                            else {
                                this.setNext_za3rmp$(currentStreamIterator.next());
                                if (!currentStreamIterator.hasNext())
                                    this.streamIterator = null;
                            }
                        }
                    });
                }
            }),
            LimitedStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (stream, stopWhen, predicate) {
                if (stopWhen === void 0)
                    stopWhen = true;
                this.stream = stream;
                this.stopWhen = stopWhen;
                this.predicate = predicate;
            }, /** @lends _.kotlin.LimitedStream.prototype */ {
                iterator: function () {
                    return _.kotlin.LimitedStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.LimitedStream */ {
                iterator$f: function (this$LimitedStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                        this.iterator = this$LimitedStream.stream.iterator();
                    }, {
                        computeNext: function () {
                            if (!this.iterator.hasNext()) {
                                this.done();
                            }
                            else {
                                var item = this.iterator.next();
                                if (Kotlin.equals(this$LimitedStream.predicate(item), this$LimitedStream.stopWhen)) {
                                    this.done();
                                }
                                else {
                                    this.setNext_za3rmp$(item);
                                }
                            }
                        }
                    });
                }
            }),
            FunctionStream: Kotlin.createClass(function () {
                return [_.kotlin.Stream];
            }, function (producer) {
                this.producer = producer;
            }, /** @lends _.kotlin.FunctionStream.prototype */ {
                iterator: function () {
                    return _.kotlin.FunctionStream.iterator$f(this);
                }
            }, /** @lends _.kotlin.FunctionStream */ {
                iterator$f: function (this$FunctionStream) {
                    return Kotlin.createObject(function () {
                        return [_.kotlin.support.AbstractIterator];
                    }, function $fun() {
                        $fun.baseInitializer.call(this);
                    }, {
                        computeNext: function () {
                            var item = this$FunctionStream.producer();
                            if (item == null) {
                                this.done();
                            }
                            else {
                                this.setNext_za3rmp$(item);
                            }
                        }
                    });
                }
            }),
            stream_n8bj3p$: function (nextFunction) {
                return new _.kotlin.FunctionStream(nextFunction);
            },
            stream_74f9dl$: function (initialValue, nextFunction) {
                return _.kotlin.stream_n8bj3p$(_.kotlin.toGenerator_n1mtj3$(nextFunction, initialValue));
            },
            get_size: {value: function ($receiver) {
                return $receiver.size();
            }},
            get_empty: {value: function ($receiver) {
                return $receiver.isEmpty();
            }},
            set_f7ra8x$: function ($receiver, key, value) {
                return $receiver.put_wn2jw4$(key, value);
            },
            orEmpty_s8ckw1$: function ($receiver) {
                var tmp$0;
                return $receiver != null ? $receiver : (tmp$0 = Kotlin.emptyMap()) != null ? tmp$0 : Kotlin.throwNPE();
            },
            get_key: {value: function ($receiver) {
                return $receiver.getKey();
            }},
            get_value: {value: function ($receiver) {
                return $receiver.getValue();
            }},
            component1: function ($receiver) {
                return $receiver.getKey();
            },
            component2: function ($receiver) {
                return $receiver.getValue();
            },
            getOrElse_9bj33b$: function ($receiver, key, defaultValue) {
                if ($receiver.containsKey_za3rmp$(key)) {
                    var tmp$0;
                    return (tmp$0 = $receiver.get_za3rmp$(key)) != null ? tmp$0 : Kotlin.throwNPE();
                }
                else {
                    return defaultValue();
                }
            },
            getOrPut_ynyybx$: function ($receiver, key, defaultValue) {
                if ($receiver.containsKey_za3rmp$(key)) {
                    var tmp$0;
                    return (tmp$0 = $receiver.get_za3rmp$(key)) != null ? tmp$0 : Kotlin.throwNPE();
                }
                else {
                    var answer = defaultValue();
                    $receiver.put_wn2jw4$(key, answer);
                    return answer;
                }
            },
            iterator_s8ckw1$: function ($receiver) {
                var entrySet = $receiver.entrySet();
                return entrySet.iterator();
            },
            mapValuesTo_7qivbo$: function ($receiver, result, transform) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var e = tmp$0.next();
                        var newValue = transform(e);
                        result.put_wn2jw4$(_.kotlin.get_key(e), newValue);
                    }
                }
                return result;
            },
            putAll_nvpytz$: function ($receiver, values) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = values, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var v = tmp$0[tmp$2];
                        $receiver.put_wn2jw4$(v.first, v.second);
                    }
                }
            },
            toMap_cj6vvg$: function ($receiver, map) {
                map.putAll_za3j1t$($receiver);
                return map;
            },
            mapValues_gld13f$: function ($receiver, transform) {
                return _.kotlin.mapValuesTo_7qivbo$($receiver, new Kotlin.ComplexHashMap(_.kotlin.get_size($receiver)), transform);
            },
            iterator_rscjuh$: function ($receiver) {
                return Kotlin.createObject(function () {
                    return [Kotlin.Iterator];
                }, null, {
                    hasNext: function () {
                        return $receiver.hasMoreElements();
                    },
                    next: function () {
                        return $receiver.nextElement();
                    }
                });
            },
            iterator_h40uyb$: function ($receiver) {
                return $receiver;
            },
            get_lastIndex: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_0: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_1: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_2: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_3: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_4: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_5: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_6: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            get_lastIndex_7: {value: function ($receiver) {
                return $receiver.length - 1;
            }},
            listOf_mzrxf8$: function (values) {
                return _.kotlin.arrayListOf_mzrxf8$(values);
            },
            mapOf_mzrxf8$: function (values) {
                return _.kotlin.hashMapOf_mzrxf8$(values);
            },
            arrayListOf_mzrxf8$: function (values) {
                return _.kotlin.toCollection_xpmo5j$(values, new Kotlin.ArrayList(values.length));
            },
            hashSetOf_mzrxf8$: function (values) {
                return _.kotlin.toCollection_xpmo5j$(values, new Kotlin.ComplexHashSet(values.length));
            },
            hashMapOf_mzrxf8$: function (values) {
                var answer = new Kotlin.ComplexHashMap(values.length);
                _.kotlin.putAll_nvpytz$(answer, values);
                return answer;
            },
            get_size_0: {value: function ($receiver) {
                return $receiver.size();
            }},
            get_empty_0: {value: function ($receiver) {
                return $receiver.isEmpty();
            }},
            get_indices: {value: function ($receiver) {
                return new Kotlin.NumberRange(0, _.kotlin.get_size_0($receiver) - 1);
            }},
            get_indices_0: {value: function ($receiver) {
                return new Kotlin.NumberRange(0, $receiver - 1);
            }},
            isNotEmpty_tkvw3h$: function ($receiver) {
                return !$receiver.isEmpty();
            },
            get_notEmpty: {value: function ($receiver) {
                return _.kotlin.isNotEmpty_tkvw3h$($receiver);
            }},
            orEmpty_tkvw3h$: function ($receiver) {
                return $receiver != null ? $receiver : Kotlin.emptyList();
            },
            orEmpty_mtvwn1$: function ($receiver) {
                return $receiver != null ? $receiver : Kotlin.emptyList();
            },
            get_first: {value: function ($receiver) {
                return _.kotlin.get_head($receiver);
            }},
            get_last: {value: function ($receiver) {
                var s = _.kotlin.get_size_0($receiver);
                return s > 0 ? $receiver.get_za3lpa$(s - 1) : null;
            }},
            get_lastIndex_8: {value: function ($receiver) {
                return _.kotlin.get_size_0($receiver) - 1;
            }},
            get_head: {value: function ($receiver) {
                return _.kotlin.isNotEmpty_tkvw3h$($receiver) ? $receiver.get_za3lpa$(0) : null;
            }},
            get_tail: {value: function ($receiver) {
                return _.kotlin.drop_odt3s5$($receiver, 1);
            }},
            addAll_wtmfso$: function ($receiver, iterable) {
                {
                    var tmp$0 = iterable.iterator();
                    while (tmp$0.hasNext()) {
                        var e = tmp$0.next();
                        $receiver.add_za3rmp$(e);
                    }
                }
            },
            addAll_ngcqne$: function ($receiver, stream) {
                {
                    var tmp$0 = stream.iterator();
                    while (tmp$0.hasNext()) {
                        var e = tmp$0.next();
                        $receiver.add_za3rmp$(e);
                    }
                }
            },
            addAll_jl7u2r$: function ($receiver, array) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = array, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var e = tmp$0[tmp$2];
                        $receiver.add_za3rmp$(e);
                    }
                }
            },
            times_97ovpz$: function ($receiver, body) {
                var count = $receiver;
                while (count > 0) {
                    body();
                    count--;
                }
            },
            appendString_vt6b28$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_v2fgr2$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_ds6lso$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_2b34ga$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_kjxfqn$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_bt92bi$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_xc3j4b$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_2bqqsc$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_ex638e$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_4ybsr7$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            appendString_tsa3bz$: function ($receiver, buffer, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                buffer.append(prefix);
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (++count > 1)
                            buffer.append(separator);
                        if (limit < 0 || count <= limit) {
                            var text = element == null ? 'null' : element.toString();
                            buffer.append(text);
                        }
                        else
                            break;
                    }
                }
                if (limit >= 0 && count > limit)
                    buffer.append(truncated);
                buffer.append(postfix);
            },
            makeString_7s66u8$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_vt6b28$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_cmivou$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_v2fgr2$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_7gqm6g$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_ds6lso$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_5g9kba$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_2b34ga$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_fwx41b$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_kjxfqn$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_sfhf6m$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_bt92bi$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_6b4cej$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_xc3j4b$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_s6c98k$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_2bqqsc$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_pukide$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_ex638e$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_mc2pv1$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_4ybsr7$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            makeString_tpghi9$: function ($receiver, separator, prefix, postfix, limit, truncated) {
                if (separator === void 0)
                    separator = ', ';
                if (prefix === void 0)
                    prefix = '';
                if (postfix === void 0)
                    postfix = '';
                if (limit === void 0)
                    limit = -1;
                if (truncated === void 0)
                    truncated = '...';
                var buffer = new Kotlin.StringBuilder();
                _.kotlin.appendString_tsa3bz$($receiver, buffer, separator, prefix, postfix, limit, truncated);
                return buffer.toString();
            },
            contains_fdw1a9$: function ($receiver, element) {
                return _.kotlin.indexOf_fdw1a9$($receiver, element) >= 0;
            },
            contains_bsmqrv$: function ($receiver, element) {
                return _.kotlin.indexOf_bsmqrv$($receiver, element) >= 0;
            },
            contains_hgt5d7$: function ($receiver, element) {
                return _.kotlin.indexOf_hgt5d7$($receiver, element) >= 0;
            },
            contains_q79yhh$: function ($receiver, element) {
                return _.kotlin.indexOf_q79yhh$($receiver, element) >= 0;
            },
            contains_96a6a3$: function ($receiver, element) {
                return _.kotlin.indexOf_96a6a3$($receiver, element) >= 0;
            },
            contains_thi4tv$: function ($receiver, element) {
                return _.kotlin.indexOf_thi4tv$($receiver, element) >= 0;
            },
            contains_tb5gmf$: function ($receiver, element) {
                return _.kotlin.indexOf_tb5gmf$($receiver, element) >= 0;
            },
            contains_ssilt7$: function ($receiver, element) {
                return _.kotlin.indexOf_ssilt7$($receiver, element) >= 0;
            },
            contains_x27eb7$: function ($receiver, element) {
                return _.kotlin.indexOf_x27eb7$($receiver, element) >= 0;
            },
            contains_eq3phq$: function ($receiver, element) {
                return _.kotlin.indexOf_eq3phq$($receiver, element) >= 0;
            },
            contains_9ipe0w$: function ($receiver, element) {
                return _.kotlin.indexOf_9ipe0w$($receiver, element) >= 0;
            },
            elementAt_fdw77o$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_rz0vgy$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_ucmip8$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_cwi0e2$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_3qx2rv$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_2e964m$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_tb5gmf$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_x09c4g$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_7naycm$: function ($receiver, index) {
                return $receiver[index];
            },
            elementAt_eq3vf5$: function ($receiver, index) {
                var tmp$0;
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return (tmp$0 = $receiver.get_za3lpa$(index)) != null ? tmp$0 : Kotlin.throwNPE();
                var iterator = $receiver.iterator();
                var count = 0;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (index === count++)
                        return element;
                }
                throw new RangeError("Collection doesn't contain element at index");
            },
            elementAt_ureun9$: function ($receiver, index) {
                return $receiver.get_za3lpa$(index);
            },
            elementAt_9ip83h$: function ($receiver, index) {
                var iterator = $receiver.iterator();
                var count = 0;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (index === count++)
                        return element;
                }
                throw new RangeError("Collection doesn't contain element at index");
            },
            first_2hx8bi$: function ($receiver) {
                return $receiver[0];
            },
            first_l1lu5s$: function ($receiver) {
                return $receiver[0];
            },
            first_964n92$: function ($receiver) {
                return $receiver[0];
            },
            first_355nu0$: function ($receiver) {
                return $receiver[0];
            },
            first_bvy38t$: function ($receiver) {
                return $receiver[0];
            },
            first_rjqrz0$: function ($receiver) {
                return $receiver[0];
            },
            first_tmsbgp$: function ($receiver) {
                return $receiver[0];
            },
            first_se6h4y$: function ($receiver) {
                return $receiver[0];
            },
            first_i2lc78$: function ($receiver) {
                return $receiver[0];
            },
            first_h3panj$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return iterator.next();
            },
            first_mtvwn1$: function ($receiver) {
                return $receiver.get_za3lpa$(0);
            },
            first_pdnvbz$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return iterator.next();
            },
            first_de9h66$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_50zxbw$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_x245au$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_h5ed0c$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_24jijj$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_im8pe8$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_1xntkt$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_3cuuyy$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_p67zio$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_vqr6wr$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            first_9fpnal$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                throw new Kotlin.IllegalArgumentException('No element matching predicate was found');
            },
            firstOrNull_2hx8bi$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_l1lu5s$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_964n92$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_355nu0$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_bvy38t$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_rjqrz0$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_tmsbgp$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_se6h4y$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_i2lc78$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[0] : null;
            },
            firstOrNull_h3panj$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                return iterator.next();
            },
            firstOrNull_mtvwn1$: function ($receiver) {
                return _.kotlin.get_size_0($receiver) > 0 ? $receiver.get_za3lpa$(0) : null;
            },
            firstOrNull_pdnvbz$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                return iterator.next();
            },
            firstOrNull_de9h66$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_50zxbw$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_x245au$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_h5ed0c$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_24jijj$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_im8pe8$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_1xntkt$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_3cuuyy$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_p67zio$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_vqr6wr$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            firstOrNull_9fpnal$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return element;
                    }
                }
                return null;
            },
            indexOf_fdw1a9$: function ($receiver, element) {
                if (element == null) {
                    var tmp$0, tmp$1, tmp$2, tmp$3;
                    {
                        tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                        for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                            if ($receiver[index] == null) {
                                return index;
                            }
                        }
                    }
                }
                else {
                    var tmp$4, tmp$5, tmp$6, tmp$7;
                    {
                        tmp$4 = Kotlin.arrayIndices($receiver), tmp$5 = tmp$4.start, tmp$6 = tmp$4.end, tmp$7 = tmp$4.increment;
                        for (var index_0 = tmp$5; index_0 <= tmp$6; index_0 += tmp$7) {
                            if (Kotlin.equals(element, $receiver[index_0])) {
                                return index_0;
                            }
                        }
                    }
                }
                return -1;
            },
            indexOf_bsmqrv$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (Kotlin.equals(element, $receiver[index])) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_hgt5d7$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_q79yhh$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_96a6a3$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_thi4tv$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_tb5gmf$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_ssilt7$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_x27eb7$: function ($receiver, element) {
                var tmp$0, tmp$1, tmp$2, tmp$3;
                {
                    tmp$0 = Kotlin.arrayIndices($receiver), tmp$1 = tmp$0.start, tmp$2 = tmp$0.end, tmp$3 = tmp$0.increment;
                    for (var index = tmp$1; index <= tmp$2; index += tmp$3) {
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            indexOf_eq3phq$: function ($receiver, element) {
                var index = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (Kotlin.equals(element, item))
                            return index;
                        index++;
                    }
                }
                return -1;
            },
            indexOf_9ipe0w$: function ($receiver, element) {
                var index = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (Kotlin.equals(element, item))
                            return index;
                        index++;
                    }
                }
                return -1;
            },
            last_2hx8bi$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_l1lu5s$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_964n92$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_355nu0$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_bvy38t$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_rjqrz0$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_tmsbgp$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_se6h4y$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_i2lc78$: function ($receiver) {
                if ($receiver.length === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver[$receiver.length - 1];
            },
            last_h3panj$: function ($receiver) {
                var tmp$0;
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return (tmp$0 = $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1)) != null ? tmp$0 : Kotlin.throwNPE();
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection is empty');
                    var last = iterator.next();
                    while (iterator.hasNext())
                        last = iterator.next();
                    return last;
                }
            },
            last_mtvwn1$: function ($receiver) {
                if (_.kotlin.get_size_0($receiver) === 0)
                    throw new Kotlin.IllegalArgumentException('Collection is empty');
                return $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1);
            },
            last_pdnvbz$: function ($receiver) {
                var tmp$0;
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return (tmp$0 = $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1)) != null ? tmp$0 : Kotlin.throwNPE();
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection is empty');
                    var last = iterator.next();
                    while (iterator.hasNext())
                        last = iterator.next();
                    return last;
                }
            },
            last_de9h66$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_de9h66$: function ($receiver, predicate) {
                var first = _.kotlin.last_de9h66$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_50zxbw$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_50zxbw$: function ($receiver, predicate) {
                var first = _.kotlin.last_50zxbw$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_x245au$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_x245au$: function ($receiver, predicate) {
                var first = _.kotlin.last_x245au$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_h5ed0c$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_h5ed0c$: function ($receiver, predicate) {
                var first = _.kotlin.last_h5ed0c$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_24jijj$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_24jijj$: function ($receiver, predicate) {
                var first = _.kotlin.last_24jijj$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_im8pe8$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_im8pe8$: function ($receiver, predicate) {
                var first = _.kotlin.last_im8pe8$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_1xntkt$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_1xntkt$: function ($receiver, predicate) {
                var first = _.kotlin.last_1xntkt$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_3cuuyy$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_3cuuyy$: function ($receiver, predicate) {
                var first = _.kotlin.last_3cuuyy$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_p67zio$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_p67zio$: function ($receiver, predicate) {
                var first = _.kotlin.last_p67zio$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_vqr6wr$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_vqr6wr$: function ($receiver, predicate) {
                var first = _.kotlin.last_vqr6wr$first(predicate);
                var iterator = $receiver.iterator();
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            last_9fpnal$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't contain any element matching predicate");
                };
            },
            last_9fpnal$: function ($receiver, predicate) {
                var first = _.kotlin.last_9fpnal$first(predicate);
                var iterator = $receiver.iterator();
                var last = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastIndexOf_fdw1a9$: function ($receiver, element) {
                if (element == null) {
                    {
                        var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                        while (tmp$0.hasNext()) {
                            var index = tmp$0.next();
                            if ($receiver[index] == null) {
                                return index;
                            }
                        }
                    }
                }
                else {
                    {
                        var tmp$1 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                        while (tmp$1.hasNext()) {
                            var index_0 = tmp$1.next();
                            if (Kotlin.equals(element, $receiver[index_0])) {
                                return index_0;
                            }
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_bsmqrv$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (Kotlin.equals(element, $receiver[index])) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_hgt5d7$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_q79yhh$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_96a6a3$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_thi4tv$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_tb5gmf$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_ssilt7$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_x27eb7$: function ($receiver, element) {
                {
                    var tmp$0 = _.kotlin.reverse_h3panj$(Kotlin.arrayIndices($receiver)).iterator();
                    while (tmp$0.hasNext()) {
                        var index = tmp$0.next();
                        if (element === $receiver[index]) {
                            return index;
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_eq3phq$: function ($receiver, element) {
                var lastIndex = -1;
                var index = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (Kotlin.equals(element, item))
                            lastIndex = index;
                        index++;
                    }
                }
                return lastIndex;
            },
            lastIndexOf_ureopu$: function ($receiver, element) {
                if (element == null) {
                    {
                        var tmp$0 = _.kotlin.reverse_h3panj$(_.kotlin.get_indices($receiver)).iterator();
                        while (tmp$0.hasNext()) {
                            var index = tmp$0.next();
                            if ($receiver.get_za3lpa$(index) == null) {
                                return index;
                            }
                        }
                    }
                }
                else {
                    {
                        var tmp$1 = _.kotlin.reverse_h3panj$(_.kotlin.get_indices($receiver)).iterator();
                        while (tmp$1.hasNext()) {
                            var index_0 = tmp$1.next();
                            if (Kotlin.equals(element, $receiver.get_za3lpa$(index_0))) {
                                return index_0;
                            }
                        }
                    }
                }
                return -1;
            },
            lastIndexOf_9ipe0w$: function ($receiver, element) {
                var lastIndex = -1;
                var index = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var item = tmp$0.next();
                        if (Kotlin.equals(element, item))
                            lastIndex = index;
                        index++;
                    }
                }
                return lastIndex;
            },
            lastOrNull_2hx8bi$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_l1lu5s$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_964n92$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_355nu0$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_bvy38t$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_rjqrz0$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_tmsbgp$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_se6h4y$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_i2lc78$: function ($receiver) {
                return $receiver.length > 0 ? $receiver[$receiver.length - 1] : null;
            },
            lastOrNull_h3panj$: function ($receiver) {
                var tmp$0;
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return _.kotlin.get_size_0($receiver) > 0 ? (tmp$0 = $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1)) != null ? tmp$0 : Kotlin.throwNPE() : null;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        return null;
                    var last = iterator.next();
                    while (iterator.hasNext())
                        last = iterator.next();
                    return last;
                }
            },
            lastOrNull_mtvwn1$: function ($receiver) {
                return _.kotlin.get_size_0($receiver) > 0 ? $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1) : null;
            },
            lastOrNull_pdnvbz$: function ($receiver) {
                var tmp$0;
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return _.kotlin.get_size_0($receiver) > 0 ? (tmp$0 = $receiver.get_za3lpa$(_.kotlin.get_size_0($receiver) - 1)) != null ? tmp$0 : Kotlin.throwNPE() : null;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        return null;
                    var last = iterator.next();
                    while (iterator.hasNext())
                        last = iterator.next();
                    return last;
                }
            },
            lastOrNull_de9h66$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_de9h66$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_de9h66$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_50zxbw$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_50zxbw$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_50zxbw$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_x245au$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_x245au$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_x245au$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_h5ed0c$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_h5ed0c$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_h5ed0c$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_24jijj$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_24jijj$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_24jijj$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_im8pe8$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_im8pe8$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_im8pe8$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_1xntkt$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_1xntkt$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_1xntkt$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_3cuuyy$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_3cuuyy$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_3cuuyy$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_p67zio$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_p67zio$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_p67zio$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_vqr6wr$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_vqr6wr$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_vqr6wr$first(predicate);
                var iterator = $receiver.iterator();
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            lastOrNull_9fpnal$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            lastOrNull_9fpnal$: function ($receiver, predicate) {
                var first = _.kotlin.lastOrNull_9fpnal$first(predicate);
                var iterator = $receiver.iterator();
                var last = first(iterator);
                if (last == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        last = element;
                }
                return last;
            },
            single_2hx8bi$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_l1lu5s$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_964n92$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_355nu0$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_bvy38t$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_rjqrz0$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_tmsbgp$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_se6h4y$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_i2lc78$: function ($receiver) {
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            single_h3panj$: function ($receiver) {
                var tmp$0, tmp$1;
                if (_.kotlin.get_size_0($receiver) === 1)
                    tmp$1 = (tmp$0 = $receiver.get_za3lpa$(0)) != null ? tmp$0 : Kotlin.throwNPE();
                else
                    throw new Kotlin.IllegalArgumentException('Collection has ' + _.kotlin.get_size_0($receiver) + ' elements');
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return tmp$1;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection is empty');
                    var single = iterator.next();
                    if (iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection has more than one element');
                    return single;
                }
            },
            single_pdnvbz$: function ($receiver) {
                var tmp$0, tmp$1;
                if (_.kotlin.get_size_0($receiver) === 1)
                    tmp$1 = (tmp$0 = $receiver.get_za3lpa$(0)) != null ? tmp$0 : Kotlin.throwNPE();
                else
                    throw new Kotlin.IllegalArgumentException('Collection has ' + _.kotlin.get_size_0($receiver) + ' elements');
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return tmp$1;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection is empty');
                    var single = iterator.next();
                    if (iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection has more than one element');
                    return single;
                }
            },
            single_de9h66$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_de9h66$: function ($receiver, predicate) {
                var first = _.kotlin.single_de9h66$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_50zxbw$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_50zxbw$: function ($receiver, predicate) {
                var first = _.kotlin.single_50zxbw$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_x245au$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_x245au$: function ($receiver, predicate) {
                var first = _.kotlin.single_x245au$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_h5ed0c$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_h5ed0c$: function ($receiver, predicate) {
                var first = _.kotlin.single_h5ed0c$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_24jijj$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_24jijj$: function ($receiver, predicate) {
                var first = _.kotlin.single_24jijj$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_im8pe8$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_im8pe8$: function ($receiver, predicate) {
                var first = _.kotlin.single_im8pe8$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_1xntkt$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_1xntkt$: function ($receiver, predicate) {
                var first = _.kotlin.single_1xntkt$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_3cuuyy$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_3cuuyy$: function ($receiver, predicate) {
                var first = _.kotlin.single_3cuuyy$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_p67zio$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_p67zio$: function ($receiver, predicate) {
                var first = _.kotlin.single_p67zio$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_vqr6wr$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_vqr6wr$: function ($receiver, predicate) {
                var first = _.kotlin.single_vqr6wr$first(predicate);
                var iterator = $receiver.iterator();
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            single_9fpnal$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    throw new Kotlin.IllegalArgumentException("Collection doesn't have matching element");
                };
            },
            single_9fpnal$: function ($receiver, predicate) {
                var first = _.kotlin.single_9fpnal$first(predicate);
                var iterator = $receiver.iterator();
                var single = first(iterator);
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_2hx8bi$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_l1lu5s$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_964n92$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_355nu0$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_bvy38t$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_rjqrz0$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_tmsbgp$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_se6h4y$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_i2lc78$: function ($receiver) {
                if ($receiver.length === 0)
                    return null;
                if ($receiver.length !== 1)
                    throw new Kotlin.IllegalArgumentException('Collection has ' + $receiver.length + ' elements');
                return $receiver[0];
            },
            singleOrNull_h3panj$: function ($receiver) {
                var tmp$0, tmp$1;
                if (_.kotlin.get_size_0($receiver) === 1)
                    tmp$1 = (tmp$0 = $receiver.get_za3lpa$(0)) != null ? tmp$0 : Kotlin.throwNPE();
                else if (_.kotlin.get_size_0($receiver) === 0)
                    tmp$1 = null;
                else
                    throw new Kotlin.IllegalArgumentException('Collection has ' + _.kotlin.get_size_0($receiver) + ' elements');
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return tmp$1;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        return null;
                    var single = iterator.next();
                    if (iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection has more than one element');
                    return single;
                }
            },
            singleOrNull_pdnvbz$: function ($receiver) {
                var tmp$0, tmp$1;
                if (_.kotlin.get_size_0($receiver) === 1)
                    tmp$1 = (tmp$0 = $receiver.get_za3lpa$(0)) != null ? tmp$0 : Kotlin.throwNPE();
                else if (_.kotlin.get_size_0($receiver) === 0)
                    tmp$1 = null;
                else
                    throw new Kotlin.IllegalArgumentException('Collection has ' + _.kotlin.get_size_0($receiver) + ' elements');
                if (Kotlin.isType($receiver, _.kotlin.List))
                    return tmp$1;
                else {
                    var iterator = $receiver.iterator();
                    if (!iterator.hasNext())
                        return null;
                    var single = iterator.next();
                    if (iterator.hasNext())
                        throw new Kotlin.IllegalArgumentException('Collection has more than one element');
                    return single;
                }
            },
            singleOrNull_de9h66$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_de9h66$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_de9h66$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_50zxbw$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_50zxbw$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_50zxbw$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_x245au$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_x245au$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_x245au$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_h5ed0c$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_h5ed0c$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_h5ed0c$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_24jijj$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_24jijj$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_24jijj$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_im8pe8$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_im8pe8$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_im8pe8$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_1xntkt$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_1xntkt$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_1xntkt$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_3cuuyy$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_3cuuyy$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_3cuuyy$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_p67zio$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_p67zio$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_p67zio$first(predicate);
                var iterator = Kotlin.arrayIterator($receiver);
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_vqr6wr$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_vqr6wr$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_vqr6wr$first(predicate);
                var iterator = $receiver.iterator();
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            singleOrNull_9fpnal$first: function (predicate) {
                return function (it) {
                    {
                        var tmp$0 = it;
                        while (tmp$0.hasNext()) {
                            var element = tmp$0.next();
                            if (predicate(element))
                                return element;
                        }
                    }
                    return null;
                };
            },
            singleOrNull_9fpnal$: function ($receiver, predicate) {
                var first = _.kotlin.singleOrNull_9fpnal$first(predicate);
                var iterator = $receiver.iterator();
                var single = first(iterator);
                if (single == null)
                    return null;
                while (iterator.hasNext()) {
                    var element = iterator.next();
                    if (predicate(element))
                        throw new Kotlin.IllegalArgumentException('Collection has more than one matching element');
                }
                return single;
            },
            reverse_2hx8bi$: function ($receiver) {
                var list = _.kotlin.toArrayList_2hx8bi$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_l1lu5s$: function ($receiver) {
                var list = _.kotlin.toArrayList_l1lu5s$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_964n92$: function ($receiver) {
                var list = _.kotlin.toArrayList_964n92$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_355nu0$: function ($receiver) {
                var list = _.kotlin.toArrayList_355nu0$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_bvy38t$: function ($receiver) {
                var list = _.kotlin.toArrayList_bvy38t$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_rjqrz0$: function ($receiver) {
                var list = _.kotlin.toArrayList_rjqrz0$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_tmsbgp$: function ($receiver) {
                var list = _.kotlin.toArrayList_tmsbgp$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_se6h4y$: function ($receiver) {
                var list = _.kotlin.toArrayList_se6h4y$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_i2lc78$: function ($receiver) {
                var list = _.kotlin.toArrayList_i2lc78$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            reverse_h3panj$: function ($receiver) {
                var list = _.kotlin.toArrayList_h3panj$($receiver);
                Kotlin.reverse(list);
                return list;
            },
            sort_h3panj$: function ($receiver) {
                var sortedList = _.kotlin.toArrayList_h3panj$($receiver);
                Kotlin.collectionsSort(sortedList);
                return sortedList;
            },
            sortBy_lykrt4$: function ($receiver, comparator) {
                var sortedList = _.kotlin.toArrayList_2hx8bi$($receiver);
                Kotlin.collectionsSort(sortedList, comparator);
                return sortedList;
            },
            sortBy_yknd17$: function ($receiver, comparator) {
                var sortedList = _.kotlin.toArrayList_h3panj$($receiver);
                Kotlin.collectionsSort(sortedList, comparator);
                return sortedList;
            },
            sortBy_de9h66$f: function (order) {
                return function (x, y) {
                    return order(x).compareTo_za3rmp$(order(y));
                };
            },
            sortBy_de9h66$: function ($receiver, order) {
                var sortedList = _.kotlin.toArrayList_2hx8bi$($receiver);
                var sortBy = Kotlin.comparator(_.kotlin.sortBy_de9h66$f(order));
                Kotlin.collectionsSort(sortedList, sortBy);
                return sortedList;
            },
            sortBy_vqr6wr$f: function (order) {
                return function (x, y) {
                    return order(x).compareTo_za3rmp$(order(y));
                };
            },
            sortBy_vqr6wr$: function ($receiver, order) {
                var sortedList = _.kotlin.toArrayList_h3panj$($receiver);
                var sortBy = Kotlin.comparator(_.kotlin.sortBy_vqr6wr$f(order));
                Kotlin.collectionsSort(sortedList, sortBy);
                return sortedList;
            },
            sortDescending_h3panj$f: function (x, y) {
                return -x.compareTo_za3rmp$(y);
            },
            sortDescending_h3panj$: function ($receiver) {
                var sortedList = _.kotlin.toArrayList_h3panj$($receiver);
                var sortBy = Kotlin.comparator(_.kotlin.sortDescending_h3panj$f);
                Kotlin.collectionsSort(sortedList, sortBy);
                return sortedList;
            },
            sortDescendingBy_de9h66$f: function (order) {
                return function (x, y) {
                    return -order(x).compareTo_za3rmp$(order(y));
                };
            },
            sortDescendingBy_de9h66$: function ($receiver, order) {
                var sortedList = _.kotlin.toArrayList_2hx8bi$($receiver);
                var sortBy = Kotlin.comparator(_.kotlin.sortDescendingBy_de9h66$f(order));
                Kotlin.collectionsSort(sortedList, sortBy);
                return sortedList;
            },
            sortDescendingBy_vqr6wr$f: function (order) {
                return function (x, y) {
                    return -order(x).compareTo_za3rmp$(order(y));
                };
            },
            sortDescendingBy_vqr6wr$: function ($receiver, order) {
                var sortedList = _.kotlin.toArrayList_h3panj$($receiver);
                var sortBy = Kotlin.comparator(_.kotlin.sortDescendingBy_vqr6wr$f(order));
                Kotlin.collectionsSort(sortedList, sortBy);
                return sortedList;
            },
            all_de9h66$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_50zxbw$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_x245au$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_h5ed0c$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_24jijj$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_im8pe8$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_1xntkt$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_3cuuyy$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_p67zio$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_vqr6wr$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_gld13f$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            all_9fpnal$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (!predicate(element))
                            return false;
                    }
                }
                return true;
            },
            any_2hx8bi$: function ($receiver) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        return true;
                    }
                }
                return false;
            },
            any_l1lu5s$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_964n92$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_355nu0$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_bvy38t$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_rjqrz0$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_tmsbgp$: function ($receiver) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        return true;
                    }
                }
                return false;
            },
            any_se6h4y$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_i2lc78$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_h3panj$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_s8ckw1$: function ($receiver) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_pdnvbz$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return true;
                    }
                }
                return false;
            },
            any_de9h66$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_50zxbw$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_x245au$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_h5ed0c$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_24jijj$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_im8pe8$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_1xntkt$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_3cuuyy$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_p67zio$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_vqr6wr$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_gld13f$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            any_9fpnal$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return true;
                    }
                }
                return false;
            },
            count_2hx8bi$: function ($receiver) {
                return $receiver.length;
            },
            count_l1lu5s$: function ($receiver) {
                return $receiver.length;
            },
            count_964n92$: function ($receiver) {
                return $receiver.length;
            },
            count_355nu0$: function ($receiver) {
                return $receiver.length;
            },
            count_bvy38t$: function ($receiver) {
                return $receiver.length;
            },
            count_rjqrz0$: function ($receiver) {
                return $receiver.length;
            },
            count_tmsbgp$: function ($receiver) {
                return $receiver.length;
            },
            count_se6h4y$: function ($receiver) {
                return $receiver.length;
            },
            count_i2lc78$: function ($receiver) {
                return $receiver.length;
            },
            count_tkvw3h$: function ($receiver) {
                return _.kotlin.get_size_0($receiver);
            },
            count_h3panj$: function ($receiver) {
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        count++;
                    }
                }
                return count;
            },
            count_s8ckw1$: function ($receiver) {
                return _.kotlin.get_size($receiver);
            },
            count_pdnvbz$: function ($receiver) {
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        count++;
                    }
                }
                return count;
            },
            count_de9h66$: function ($receiver, predicate) {
                var count = 0;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_50zxbw$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_x245au$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_h5ed0c$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_24jijj$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_im8pe8$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_1xntkt$: function ($receiver, predicate) {
                var count = 0;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_3cuuyy$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_p67zio$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_vqr6wr$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_gld13f$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            count_9fpnal$: function ($receiver, predicate) {
                var count = 0;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            count++;
                    }
                }
                return count;
            },
            fold_8stajs$: function ($receiver, initial, operation) {
                var accumulator = initial;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_v8qmra$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_4lvz2o$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_gtjzry$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_pn2g5j$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_tj8q8m$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_s4q4mb$: function ($receiver, initial, operation) {
                var accumulator = initial;
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_g9t0ho$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_8hjqyy$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_gu2wyd$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            fold_9hsf09$: function ($receiver, initial, operation) {
                var accumulator = initial;
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        accumulator = operation(accumulator, element);
                    }
                }
                return accumulator;
            },
            foldRight_8stajs$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_v8qmra$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_4lvz2o$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_gtjzry$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_pn2g5j$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_tj8q8m$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_s4q4mb$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_g9t0ho$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_8hjqyy$: function ($receiver, initial, operation) {
                var index = $receiver.length - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            foldRight_qwc90p$: function ($receiver, initial, operation) {
                var index = _.kotlin.get_size_0($receiver) - 1;
                var accumulator = initial;
                while (index >= 0) {
                    accumulator = operation($receiver.get_za3lpa$(index--), accumulator);
                }
                return accumulator;
            },
            forEach_de9h66$: function ($receiver, operation) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        operation(element);
                    }
                }
            },
            forEach_50zxbw$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_x245au$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_h5ed0c$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_24jijj$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_im8pe8$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_1xntkt$: function ($receiver, operation) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        operation(element);
                    }
                }
            },
            forEach_3cuuyy$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_p67zio$: function ($receiver, operation) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_vqr6wr$: function ($receiver, operation) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_gld13f$: function ($receiver, operation) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            forEach_9fpnal$: function ($receiver, operation) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        operation(element);
                    }
                }
            },
            max_2hx8bi$: function ($receiver) {
                if (_.kotlin.isEmpty_2hx8bi$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_7($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_964n92$: function ($receiver) {
                if (_.kotlin.isEmpty_964n92$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_0($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_355nu0$: function ($receiver) {
                if (_.kotlin.isEmpty_355nu0$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_6($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_bvy38t$: function ($receiver) {
                if (_.kotlin.isEmpty_bvy38t$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_5($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_rjqrz0$: function ($receiver) {
                if (_.kotlin.isEmpty_rjqrz0$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_4($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_tmsbgp$: function ($receiver) {
                if (_.kotlin.isEmpty_tmsbgp$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_2($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_se6h4y$: function ($receiver) {
                if (_.kotlin.isEmpty_se6h4y$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_3($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_i2lc78$: function ($receiver) {
                if (_.kotlin.isEmpty_i2lc78$($receiver))
                    return null;
                var max = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_1($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (max < e)
                            max = e;
                    }
                }
                return max;
            },
            max_h3panj$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var max = iterator.next();
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    if (max < e)
                        max = e;
                }
                return max;
            },
            max_pdnvbz$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var max = iterator.next();
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    if (max < e)
                        max = e;
                }
                return max;
            },
            maxBy_de9h66$: function ($receiver, f) {
                if (_.kotlin.isEmpty_2hx8bi$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_7($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_50zxbw$: function ($receiver, f) {
                if (_.kotlin.isEmpty_l1lu5s$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_x245au$: function ($receiver, f) {
                if (_.kotlin.isEmpty_964n92$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_0($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_h5ed0c$: function ($receiver, f) {
                if (_.kotlin.isEmpty_355nu0$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_6($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_24jijj$: function ($receiver, f) {
                if (_.kotlin.isEmpty_bvy38t$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_5($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_im8pe8$: function ($receiver, f) {
                if (_.kotlin.isEmpty_rjqrz0$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_4($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_1xntkt$: function ($receiver, f) {
                if (_.kotlin.isEmpty_tmsbgp$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_2($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_3cuuyy$: function ($receiver, f) {
                if (_.kotlin.isEmpty_se6h4y$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_3($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_p67zio$: function ($receiver, f) {
                if (_.kotlin.isEmpty_i2lc78$($receiver))
                    return null;
                var maxElem = $receiver[0];
                var maxValue = f(maxElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_1($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (maxValue < v) {
                            maxElem = e;
                            maxValue = v;
                        }
                    }
                }
                return maxElem;
            },
            maxBy_vqr6wr$: function ($receiver, f) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var maxElem = iterator.next();
                var maxValue = f(maxElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (maxValue < v) {
                        maxElem = e;
                        maxValue = v;
                    }
                }
                return maxElem;
            },
            maxBy_9fpnal$: function ($receiver, f) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var maxElem = iterator.next();
                var maxValue = f(maxElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (maxValue < v) {
                        maxElem = e;
                        maxValue = v;
                    }
                }
                return maxElem;
            },
            maxBy_gld13f$: function ($receiver, f) {
                var iterator = $receiver;
                if (!iterator.hasNext())
                    return null;
                var maxElem = iterator.next();
                var maxValue = f(maxElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (maxValue < v) {
                        maxElem = e;
                        maxValue = v;
                    }
                }
                return maxElem;
            },
            min_2hx8bi$: function ($receiver) {
                if (_.kotlin.isEmpty_2hx8bi$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_7($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_964n92$: function ($receiver) {
                if (_.kotlin.isEmpty_964n92$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_0($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_355nu0$: function ($receiver) {
                if (_.kotlin.isEmpty_355nu0$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_6($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_bvy38t$: function ($receiver) {
                if (_.kotlin.isEmpty_bvy38t$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_5($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_rjqrz0$: function ($receiver) {
                if (_.kotlin.isEmpty_rjqrz0$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_4($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_tmsbgp$: function ($receiver) {
                if (_.kotlin.isEmpty_tmsbgp$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_2($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_se6h4y$: function ($receiver) {
                if (_.kotlin.isEmpty_se6h4y$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_3($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_i2lc78$: function ($receiver) {
                if (_.kotlin.isEmpty_i2lc78$($receiver))
                    return null;
                var min = $receiver[0];
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_1($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        if (min > e)
                            min = e;
                    }
                }
                return min;
            },
            min_h3panj$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var min = iterator.next();
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    if (min > e)
                        min = e;
                }
                return min;
            },
            min_pdnvbz$: function ($receiver) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var min = iterator.next();
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    if (min > e)
                        min = e;
                }
                return min;
            },
            minBy_de9h66$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_7($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_50zxbw$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_x245au$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_0($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_h5ed0c$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_6($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_24jijj$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_5($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_im8pe8$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_4($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_1xntkt$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_2($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_3cuuyy$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_3($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_p67zio$: function ($receiver, f) {
                if ($receiver.length === 0)
                    return null;
                var minElem = $receiver[0];
                var minValue = f(minElem);
                var tmp$0;
                {
                    tmp$0 = _.kotlin.get_lastIndex_1($receiver) + 1;
                    for (var i = 1; i !== tmp$0; i++) {
                        var e = $receiver[i];
                        var v = f(e);
                        if (minValue > v) {
                            minElem = e;
                            minValue = v;
                        }
                    }
                }
                return minElem;
            },
            minBy_vqr6wr$: function ($receiver, f) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var minElem = iterator.next();
                var minValue = f(minElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (minValue > v) {
                        minElem = e;
                        minValue = v;
                    }
                }
                return minElem;
            },
            minBy_9fpnal$: function ($receiver, f) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    return null;
                var minElem = iterator.next();
                var minValue = f(minElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (minValue > v) {
                        minElem = e;
                        minValue = v;
                    }
                }
                return minElem;
            },
            minBy_gld13f$: function ($receiver, f) {
                var iterator = $receiver;
                if (!iterator.hasNext())
                    return null;
                var minElem = iterator.next();
                var minValue = f(minElem);
                while (iterator.hasNext()) {
                    var e = iterator.next();
                    var v = f(e);
                    if (minValue > v) {
                        minElem = e;
                        minValue = v;
                    }
                }
                return minElem;
            },
            none_2hx8bi$: function ($receiver) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        return false;
                    }
                }
                return true;
            },
            none_l1lu5s$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_964n92$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_355nu0$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_bvy38t$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_rjqrz0$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_tmsbgp$: function ($receiver) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        return false;
                    }
                }
                return true;
            },
            none_se6h4y$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_i2lc78$: function ($receiver) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_h3panj$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_s8ckw1$: function ($receiver) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_pdnvbz$: function ($receiver) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        return false;
                    }
                }
                return true;
            },
            none_de9h66$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_50zxbw$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_x245au$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_h5ed0c$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_24jijj$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_im8pe8$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_1xntkt$: function ($receiver, predicate) {
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_3cuuyy$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_p67zio$: function ($receiver, predicate) {
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_vqr6wr$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_gld13f$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver;
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            none_9fpnal$: function ($receiver, predicate) {
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element))
                            return false;
                    }
                }
                return true;
            },
            reduce_de9h67$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_50zxbx$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_x245av$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_h5ed0b$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_24jijk$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_im8pe7$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_1xntks$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_3cuuyz$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_p67zip$: function ($receiver, operation) {
                var iterator = Kotlin.arrayIterator($receiver);
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_vqr6ws$: function ($receiver, operation) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduce_9fpnam$: function ($receiver, operation) {
                var iterator = $receiver.iterator();
                if (!iterator.hasNext())
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = iterator.next();
                while (iterator.hasNext()) {
                    accumulator = operation(accumulator, iterator.next());
                }
                return accumulator;
            },
            reduceRight_de9h67$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_50zxbx$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_x245av$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_h5ed0b$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_24jijk$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_im8pe7$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_1xntks$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_3cuuyz$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_p67zip$: function ($receiver, operation) {
                var index = $receiver.length - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver[index--];
                while (index >= 0) {
                    accumulator = operation($receiver[index--], accumulator);
                }
                return accumulator;
            },
            reduceRight_7bxqi8$: function ($receiver, operation) {
                var index = _.kotlin.get_size_0($receiver) - 1;
                if (index < 0)
                    throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
                var accumulator = $receiver.get_za3lpa$(index--);
                while (index >= 0) {
                    accumulator = operation($receiver.get_za3lpa$(index--), accumulator);
                }
                return accumulator;
            },
            require_eltq40$: function (value, message) {
                if (message === void 0)
                    message = 'Failed requirement';
                if (!value) {
                    throw new Kotlin.IllegalArgumentException(message.toString());
                }
            },
            require_zgzqbg$: function (value, lazyMessage) {
                if (!value) {
                    var message = lazyMessage();
                    throw new Kotlin.IllegalArgumentException(message.toString());
                }
            },
            requireNotNull_wn2jw4$: function (value, message) {
                if (message === void 0)
                    message = 'Required value was null';
                if (value == null) {
                    throw new Kotlin.IllegalArgumentException(message.toString());
                }
                else {
                    return value;
                }
            },
            check_eltq40$: function (value, message) {
                if (message === void 0)
                    message = 'Check failed';
                if (!value) {
                    throw new Kotlin.IllegalStateException(message.toString());
                }
            },
            check_zgzqbg$: function (value, lazyMessage) {
                if (!value) {
                    var message = lazyMessage();
                    throw new Kotlin.IllegalStateException(message.toString());
                }
            },
            checkNotNull_hwpqgh$: function (value, message) {
                if (message === void 0)
                    message = 'Required value was null';
                if (value == null) {
                    throw new Kotlin.IllegalStateException(message);
                }
                else {
                    return value;
                }
            },
            error_61zpoe$: function (message) {
                throw new Kotlin.RuntimeException(message);
            },
            isEmpty_2hx8bi$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_l1lu5s$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_964n92$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_355nu0$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_bvy38t$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_rjqrz0$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_tmsbgp$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_se6h4y$: function ($receiver) {
                return $receiver.length === 0;
            },
            isEmpty_i2lc78$: function ($receiver) {
                return $receiver.length === 0;
            },
            isNotEmpty_2hx8bi$: function ($receiver) {
                return !_.kotlin.isEmpty_2hx8bi$($receiver);
            },
            isNotEmpty_l1lu5s$: function ($receiver) {
                return !_.kotlin.isEmpty_l1lu5s$($receiver);
            },
            isNotEmpty_964n92$: function ($receiver) {
                return !_.kotlin.isEmpty_964n92$($receiver);
            },
            isNotEmpty_355nu0$: function ($receiver) {
                return !_.kotlin.isEmpty_355nu0$($receiver);
            },
            isNotEmpty_bvy38t$: function ($receiver) {
                return !_.kotlin.isEmpty_bvy38t$($receiver);
            },
            isNotEmpty_rjqrz0$: function ($receiver) {
                return !_.kotlin.isEmpty_rjqrz0$($receiver);
            },
            isNotEmpty_tmsbgp$: function ($receiver) {
                return !_.kotlin.isEmpty_tmsbgp$($receiver);
            },
            isNotEmpty_se6h4y$: function ($receiver) {
                return !_.kotlin.isEmpty_se6h4y$($receiver);
            },
            isNotEmpty_i2lc78$: function ($receiver) {
                return !_.kotlin.isEmpty_i2lc78$($receiver);
            },
            partition_de9h66$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_50zxbw$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_x245au$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_h5ed0c$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_24jijj$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_im8pe8$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_1xntkt$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                var tmp$0, tmp$1, tmp$2;
                {
                    tmp$0 = $receiver, tmp$1 = tmp$0.length;
                    for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
                        var element = tmp$0[tmp$2];
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_3cuuyy$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_p67zio$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = Kotlin.arrayIterator($receiver);
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_vqr6wr$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            partition_9fpnal$: function ($receiver, predicate) {
                var first = new Kotlin.ArrayList();
                var second = new Kotlin.ArrayList();
                {
                    var tmp$0 = $receiver.iterator();
                    while (tmp$0.hasNext()) {
                        var element = tmp$0.next();
                        if (predicate(element)) {
                            first.add_za3rmp$(element);
                        }
                        else {
                            second.add_za3rmp$(element);
                        }
                    }
                }
                return new _.kotlin.Pair(first, second);
            },
            plus_bctcxa$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_2hx8bi$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_w5fksc$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_l1lu5s$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_qsh4fe$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_964n92$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_uy8ycc$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_355nu0$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_kvfz4v$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_bvy38t$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_tev20g$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_rjqrz0$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_wgl9xf$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_tmsbgp$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_v0fo6u$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_se6h4y$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_wshjbk$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_i2lc78$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_fnn263$: function ($receiver, array) {
                var answer = _.kotlin.toArrayList_h3panj$($receiver);
                _.kotlin.addAll_jl7u2r$(answer, array);
                return answer;
            },
            plus_qxrbi5$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_2hx8bi$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_34aosx$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_l1lu5s$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_dto1g5$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_964n92$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_ldb6x3$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_355nu0$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_5ya7ho$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_bvy38t$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_t349z9$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_rjqrz0$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_3cdrzs$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_tmsbgp$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_cc6qan$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_se6h4y$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_w98n8l$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_i2lc78$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_975xw0$: function ($receiver, collection) {
                var answer = _.kotlin.toArrayList_h3panj$($receiver);
                _.kotlin.addAll_wtmfso$(answer, collection);
                return answer;
            },
            plus_1lsq3i$: function ($receiver, collection) {
                return new _.kotlin.Multistream(_.kotlin.streamOf_mzrxf8$([$receiver, _.kotlin.stream_h3panj$(collection)]));
            },
            plus_fdw1a9$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_2hx8bi$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_bsmqrv$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_l1lu5s$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_hgt5d7$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_964n92$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_q79yhh$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_355nu0$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_96a6a3$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_bvy38t$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_thi4tv$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_rjqrz0$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_tb5gmf$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_tmsbgp$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_ssilt7$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_se6h4y$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_x27eb7$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_i2lc78$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_eq3phq$: function ($receiver, element) {
                var answer = _.kotlin.toArrayList_h3panj$($receiver);
                answer.add_za3rmp$(element);
                return answer;
            },
            plus_9ipe0w$: function ($receiver, element) {
                return new _.kotlin.Multistream(_.kotlin.streamOf_mzrxf8$([$receiver, _.kotlin.streamOf_mzrxf8$([element])]));
            },
            plus_y4w53o$: function ($receiver, stream) {
                return new _.kotlin.Multistream(_.kotlin.streamOf_mzrxf8$([$receiver, stream]));
            },
            zip_bctcxa$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_w5fksc$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_qsh4fe$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_uy8ycc$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_kvfz4v$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_tev20g$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_wgl9xf$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_v0fo6u$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_wshjbk$: function ($receiver, array) {
                var first = Kotlin.arrayIterator($receiver);
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_fnn263$: function ($receiver, array) {
                var first = $receiver.iterator();
                var second = Kotlin.arrayIterator(array);
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_qxrbi5$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_34aosx$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_dto1g5$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_ldb6x3$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_5ya7ho$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_t349z9$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_3cdrzs$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_cc6qan$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_w98n8l$: function ($receiver, collection) {
                var first = Kotlin.arrayIterator($receiver);
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_975xw0$: function ($receiver, collection) {
                var first = $receiver.iterator();
                var second = collection.iterator();
                var list = new Kotlin.ArrayList();
                while (first.hasNext() && second.hasNext()) {
                    list.add_za3rmp$(_.kotlin.to_l1ob02$(first.next(), second.next()));
                }
                return list;
            },
            zip_y4w53o$: function ($receiver, stream) {
                return new _.kotlin.ZippingStream($receiver, stream);
            },
            test: Kotlin.definePackage(function () {
                this.asserter = new _.kotlin.test.QUnitAsserter();
            }, /** @lends _.kotlin.test */ {
                todo_n8bj3p$: function (block) {
                    Kotlin.println('TODO at ' + block);
                },
                QUnitAsserter: Kotlin.createClass(function () {
                    return [_.kotlin.test.Asserter];
                }, null, /** @lends _.kotlin.test.QUnitAsserter.prototype */ {
                    assertTrue_ivxn3r$: function (message, actual) {
                        ok(actual, message);
                    },
                    assertEquals_a59ba6$: function (message, expected, actual) {
                        ok(Kotlin.equals(expected, actual), message + '. Expected <' + Kotlin.toString(expected) + '> actual <' + Kotlin.toString(actual) + '>');
                    },
                    assertNotNull_bm4g0d$: function (message, actual) {
                        ok(actual != null, message);
                    },
                    assertNull_bm4g0d$: function (message, actual) {
                        ok(actual == null, message);
                    },
                    fail_61zpoe$: function (message) {
                        ok(false, message);
                    }
                }),
                assertTrue_2xfrrb$: function (message, block) {
                    var actual = block();
                    _.kotlin.test.asserter.assertTrue_ivxn3r$(message, actual);
                },
                assertTrue_n8bj3p$: function (block) {
                    _.kotlin.test.assertTrue_2xfrrb$('exprected true', block);
                },
                assertNot_2xfrrb$f: function (block) {
                    return function () {
                        return !block();
                    };
                },
                assertNot_2xfrrb$: function (message, block) {
                    _.kotlin.test.assertTrue_2xfrrb$(message, _.kotlin.test.assertNot_2xfrrb$f(block));
                },
                assertNot_n8bj3p$: function (block) {
                    _.kotlin.test.assertNot_2xfrrb$('expected false', block);
                },
                assertTrue_8kj6y5$: function (actual, message) {
                    if (message === void 0)
                        message = '';
                    return _.kotlin.test.assertEquals_8vv676$(true, actual, message);
                },
                assertFalse_8kj6y5$: function (actual, message) {
                    if (message === void 0)
                        message = '';
                    return _.kotlin.test.assertEquals_8vv676$(false, actual, message);
                },
                assertEquals_8vv676$: function (expected, actual, message) {
                    if (message === void 0)
                        message = '';
                    _.kotlin.test.asserter.assertEquals_a59ba6$(message, expected, actual);
                },
                assertNotNull_hwpqgh$: function (actual, message) {
                    if (message === void 0)
                        message = '';
                    _.kotlin.test.asserter.assertNotNull_bm4g0d$(message, actual);
                    return actual != null ? actual : Kotlin.throwNPE();
                },
                assertNotNull_74f9dl$: function (actual, block) {
                    _.kotlin.test.assertNotNull_ll92s9$(actual, '', block);
                },
                assertNotNull_ll92s9$: function (actual, message, block) {
                    _.kotlin.test.asserter.assertNotNull_bm4g0d$(message, actual);
                    if (actual != null) {
                        block(actual);
                    }
                },
                assertNull_hwpqgh$: function (actual, message) {
                    if (message === void 0)
                        message = '';
                    _.kotlin.test.asserter.assertNull_bm4g0d$(message, actual);
                },
                fail_61zpoe$: function (message) {
                    if (message === void 0)
                        message = '';
                    _.kotlin.test.asserter.fail_61zpoe$(message);
                },
                expect_74f9dk$: function (expected, block) {
                    _.kotlin.test.expect_ll92sa$(expected, 'expected ' + expected, block);
                },
                expect_ll92sa$: function (expected, message, block) {
                    var actual = block();
                    _.kotlin.test.assertEquals_8vv676$(expected, actual, message);
                },
                fails_n8bj3p$: function (block) {
                    try {
                        block();
                        _.kotlin.test.asserter.fail_61zpoe$('Expected an exception to be thrown');
                        return null;
                    }
                    catch (e) {
                        return e;
                    }
                },
                Asserter: Kotlin.createTrait(null)
            }),
            dom: Kotlin.definePackage(null, /** @lends _.kotlin.dom */ {
                createDocument: function () {
                    return document.implementation.createDocument(null, null, null);
                },
                toXmlString_asww5t$: function ($receiver) {
                    return $receiver.outerHTML;
                },
                toXmlString_rq0l4m$: function ($receiver, xmlDeclaration) {
                    return $receiver.outerHTML;
                },
                eventHandler: function (handler) {
                    return new _.kotlin.dom.EventListenerHandler(handler);
                },
                EventListenerHandler: Kotlin.createClass(function () {
                    return [_.org.w3c.dom.events.EventListener];
                }, function (handler) {
                    this.handler = handler;
                }, /** @lends _.kotlin.dom.EventListenerHandler.prototype */ {
                    handleEvent_9ojx7i$: function (e) {
                        if (e != null) {
                            this.handler(e);
                        }
                    }
                }),
                mouseEventHandler$f: function (handler) {
                    return function (e) {
                        if (Kotlin.isType(e, MouseEvent)) {
                            handler(e);
                        }
                    };
                },
                mouseEventHandler: function (handler) {
                    return _.kotlin.dom.eventHandler(_.kotlin.dom.mouseEventHandler$f(handler));
                },
                on_10gtds$: function ($receiver, name, capture, handler) {
                    return _.kotlin.dom.on_edii0a$($receiver, name, capture, _.kotlin.dom.eventHandler(handler));
                },
                on_edii0a$: function ($receiver, name, capture, listener) {
                    var tmp$0;
                    if (Kotlin.isType($receiver, EventTarget)) {
                        $receiver.addEventListener(name, listener, capture);
                        tmp$0 = new _.kotlin.dom.CloseableEventListener($receiver, listener, name, capture);
                    }
                    else {
                        tmp$0 = null;
                    }
                    return tmp$0;
                },
                CloseableEventListener: Kotlin.createClass(function () {
                    return [Kotlin.Closeable];
                }, function (target, listener, name, capture) {
                    this.target = target;
                    this.listener = listener;
                    this.name = name;
                    this.capture = capture;
                }, /** @lends _.kotlin.dom.CloseableEventListener.prototype */ {
                    close: function () {
                        this.target.removeEventListener(this.name, this.listener, this.capture);
                    }
                }),
                onClick_alenf6$: function ($receiver, capture, handler) {
                    if (capture === void 0)
                        capture = false;
                    return _.kotlin.dom.on_edii0a$($receiver, 'click', capture, _.kotlin.dom.mouseEventHandler(handler));
                },
                onDoubleClick_alenf6$: function ($receiver, capture, handler) {
                    if (capture === void 0)
                        capture = false;
                    return _.kotlin.dom.on_edii0a$($receiver, 'dblclick', capture, _.kotlin.dom.mouseEventHandler(handler));
                },
                emptyElementList: function () {
                    return Kotlin.emptyList();
                },
                emptyNodeList: function () {
                    return Kotlin.emptyList();
                },
                get_text: {value: function ($receiver) {
                    return $receiver.textContent;
                }},
                set_text: {value: function ($receiver, value) {
                    $receiver.textContent = value;
                }},
                get_childrenText: {value: function ($receiver) {
                    var buffer = new Kotlin.StringBuilder();
                    var nodeList = $receiver.childNodes;
                    var i = 0;
                    var size = nodeList.length;
                    while (i < size) {
                        var node = nodeList.item(i);
                        if (node != null) {
                            if (_.kotlin.dom.isText(node)) {
                                buffer.append(node.nodeValue);
                            }
                        }
                        i++;
                    }
                    return buffer.toString();
                }},
                set_childrenText: {value: function ($receiver, value) {
                    var element = $receiver;
                    {
                        var tmp$0 = _.kotlin.dom.children(element).iterator();
                        while (tmp$0.hasNext()) {
                            var node = tmp$0.next();
                            if (_.kotlin.dom.isText(node)) {
                                $receiver.removeChild(node);
                            }
                        }
                    }
                    _.kotlin.dom.addText(element, value);
                }},
                get_id: {value: function ($receiver) {
                    var tmp$0;
                    return (tmp$0 = $receiver.getAttribute('id')) != null ? tmp$0 : '';
                }},
                set_id: {value: function ($receiver, value) {
                    $receiver.setAttribute('id', value);
                    $receiver.setIdAttribute('id', true);
                }},
                get_style: {value: function ($receiver) {
                    var tmp$0;
                    return (tmp$0 = $receiver.getAttribute('style')) != null ? tmp$0 : '';
                }},
                set_style: {value: function ($receiver, value) {
                    $receiver.setAttribute('style', value);
                }},
                get_classes: {value: function ($receiver) {
                    var tmp$0;
                    return (tmp$0 = $receiver.getAttribute('class')) != null ? tmp$0 : '';
                }},
                set_classes: {value: function ($receiver, value) {
                    $receiver.setAttribute('class', value);
                }},
                hasClass: function ($receiver, cssClass) {
                    var c = _.kotlin.dom.get_classes($receiver);
                    return _.js.matches_94jgcu$(c, '(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)');
                },
                children: function ($receiver) {
                    return _.kotlin.dom.toList($receiver != null ? $receiver.childNodes : null);
                },
                childElements$f: function (it) {
                    return it.nodeType === Node.ELEMENT_NODE;
                },
                childElements$f_0: function (it) {
                    return it != null ? it : Kotlin.throwNPE();
                },
                childElements: function ($receiver) {
                    return _.kotlin.map_vqr6wr$(_.kotlin.filter_vqr6wr$(_.kotlin.dom.children($receiver), _.kotlin.dom.childElements$f), _.kotlin.dom.childElements$f_0);
                },
                childElements_1$f: function (name) {
                    return function (it) {
                        return it.nodeType === Node.ELEMENT_NODE && Kotlin.equals(it.nodeName, name);
                    };
                },
                childElements_1$f_0: function (it) {
                    return it != null ? it : Kotlin.throwNPE();
                },
                childElements_1: function ($receiver, name) {
                    return _.kotlin.map_vqr6wr$(_.kotlin.filter_vqr6wr$(_.kotlin.dom.children($receiver), _.kotlin.dom.childElements_1$f(name)), _.kotlin.dom.childElements_1$f_0);
                },
                get_elements: {value: function ($receiver) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
                }},
                get_elements_0: {value: function ($receiver) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName('*') : null);
                }},
                elements_1: function ($receiver, localName) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
                },
                elements_2: function ($receiver, localName) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagName(localName) : null);
                },
                elements_3: function ($receiver, namespaceUri, localName) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
                },
                elements_2_0: function ($receiver, namespaceUri, localName) {
                    return _.kotlin.dom.toElementList($receiver != null ? $receiver.getElementsByTagNameNS(namespaceUri, localName) : null);
                },
                toList: function ($receiver) {
                    var tmp$0;
                    if ($receiver == null) {
                        tmp$0 = _.kotlin.dom.emptyNodeList();
                    }
                    else {
                        tmp$0 = new _.kotlin.dom.NodeListAsList($receiver);
                    }
                    return tmp$0;
                },
                toElementList: function ($receiver) {
                    var tmp$0;
                    if ($receiver == null) {
                        tmp$0 = new Kotlin.ArrayList();
                    }
                    else {
                        tmp$0 = new _.kotlin.dom.ElementListAsList($receiver);
                    }
                    return tmp$0;
                },
                get$f: function (selector) {
                    return function (it) {
                        return _.kotlin.dom.hasClass(it, selector.substring(1));
                    };
                },
                get: function ($receiver, selector) {
                    var root = $receiver != null ? $receiver.documentElement : null;
                    var tmp$0;
                    if (root != null) {
                        if (Kotlin.equals(selector, '*')) {
                            tmp$0 = _.kotlin.dom.get_elements($receiver);
                        }
                        else if (selector.startsWith('.')) {
                            tmp$0 = _.kotlin.toList_h3panj$(_.kotlin.filter_vqr6wr$(_.kotlin.dom.get_elements($receiver), _.kotlin.dom.get$f(selector)));
                        }
                        else if (selector.startsWith('#')) {
                            var id = selector.substring(1);
                            var element = $receiver != null ? $receiver.getElementById(id) : null;
                            return element != null ? _.kotlin.arrayListOf_mzrxf8$([element]) : _.kotlin.dom.emptyElementList();
                        }
                        else {
                            tmp$0 = _.kotlin.dom.elements_2($receiver, selector);
                        }
                    }
                    else {
                        tmp$0 = _.kotlin.dom.emptyElementList();
                    }
                    return tmp$0;
                },
                get_1$f: function (selector) {
                    return function (it) {
                        return _.kotlin.dom.hasClass(it, selector.substring(1));
                    };
                },
                get_1: function ($receiver, selector) {
                    var tmp$1;
                    if (Kotlin.equals(selector, '*')) {
                        tmp$1 = _.kotlin.dom.get_elements_0($receiver);
                    }
                    else if (selector.startsWith('.')) {
                        tmp$1 = _.kotlin.toList_h3panj$(_.kotlin.filter_vqr6wr$(_.kotlin.dom.get_elements_0($receiver), _.kotlin.dom.get_1$f(selector)));
                    }
                    else if (selector.startsWith('#')) {
                        var tmp$0;
                        var element = (tmp$0 = $receiver.ownerDocument) != null ? tmp$0.getElementById(selector.substring(1)) : null;
                        return element != null ? _.kotlin.arrayListOf_mzrxf8$([element]) : _.kotlin.dom.emptyElementList();
                    }
                    else {
                        tmp$1 = _.kotlin.dom.elements_1($receiver, selector);
                    }
                    return tmp$1;
                },
                NodeListAsList: Kotlin.createClass(function () {
                    return [Kotlin.AbstractList];
                }, function $fun(nodeList) {
                    $fun.baseInitializer.call(this);
                    this.nodeList = nodeList;
                }, /** @lends _.kotlin.dom.NodeListAsList.prototype */ {
                    get_za3lpa$: function (index) {
                        var node = this.nodeList.item(index);
                        if (node == null) {
                            throw new RangeError('NodeList does not contain a node at index: ' + index);
                        }
                        else {
                            return node;
                        }
                    },
                    size: function () {
                        return this.nodeList.length;
                    }
                }),
                ElementListAsList: Kotlin.createClass(function () {
                    return [Kotlin.AbstractList];
                }, function $fun(nodeList) {
                    $fun.baseInitializer.call(this);
                    this.nodeList = nodeList;
                }, /** @lends _.kotlin.dom.ElementListAsList.prototype */ {
                    get_za3lpa$: function (index) {
                        var node = this.nodeList.item(index);
                        if (node == null) {
                            throw new RangeError('NodeList does not contain a node at index: ' + index);
                        }
                        else if (node.nodeType === Node.ELEMENT_NODE) {
                            return node != null ? node : Kotlin.throwNPE();
                        }
                        else {
                            throw new Kotlin.IllegalArgumentException('Node is not an Element as expected but is ' + node);
                        }
                    },
                    size: function () {
                        return this.nodeList.length;
                    }
                }),
                clear: function ($receiver) {
                    while (true) {
                        var child = $receiver.firstChild;
                        if (child == null) {
                            return;
                        }
                        else {
                            $receiver.removeChild(child);
                        }
                    }
                },
                nextSiblings: function ($receiver) {
                    return new _.kotlin.dom.NextSiblings($receiver);
                },
                NextSiblings: Kotlin.createClass(null, function (node) {
                    this.node = node;
                }, /** @lends _.kotlin.dom.NextSiblings.prototype */ {
                    iterator: function () {
                        return _.kotlin.dom.NextSiblings.iterator$f(this);
                    }
                }, /** @lends _.kotlin.dom.NextSiblings */ {
                    iterator$f: function (this$NextSiblings) {
                        return Kotlin.createObject(function () {
                            return [_.kotlin.support.AbstractIterator];
                        }, function $fun() {
                            $fun.baseInitializer.call(this);
                        }, {
                            computeNext: function () {
                                var nextValue = this$NextSiblings.node.nextSibling;
                                if (nextValue != null) {
                                    this.setNext_za3rmp$(nextValue);
                                    this$NextSiblings.node = nextValue;
                                }
                                else {
                                    this.done();
                                }
                            }
                        });
                    }
                }),
                previousSiblings: function ($receiver) {
                    return new _.kotlin.dom.PreviousSiblings($receiver);
                },
                PreviousSiblings: Kotlin.createClass(null, function (node) {
                    this.node = node;
                }, /** @lends _.kotlin.dom.PreviousSiblings.prototype */ {
                    iterator: function () {
                        return _.kotlin.dom.PreviousSiblings.iterator$f(this);
                    }
                }, /** @lends _.kotlin.dom.PreviousSiblings */ {
                    iterator$f: function (this$PreviousSiblings) {
                        return Kotlin.createObject(function () {
                            return [_.kotlin.support.AbstractIterator];
                        }, function $fun() {
                            $fun.baseInitializer.call(this);
                        }, {
                            computeNext: function () {
                                var nextValue = this$PreviousSiblings.node.previousSibling;
                                if (nextValue != null) {
                                    this.setNext_za3rmp$(nextValue);
                                    this$PreviousSiblings.node = nextValue;
                                }
                                else {
                                    this.done();
                                }
                            }
                        });
                    }
                }),
                isText: function ($receiver) {
                    var nt = $receiver.nodeType;
                    return nt === Node.TEXT_NODE || nt === Node.CDATA_SECTION_NODE;
                },
                attribute: function ($receiver, name) {
                    var tmp$0;
                    return (tmp$0 = $receiver.getAttribute(name)) != null ? tmp$0 : '';
                },
                get_head: {value: function ($receiver) {
                    return $receiver != null && $receiver.length > 0 ? $receiver.item(0) : null;
                }},
                get_first: {value: function ($receiver) {
                    return _.kotlin.dom.get_head($receiver);
                }},
                get_tail: {value: function ($receiver) {
                    if ($receiver == null) {
                        return null;
                    }
                    else {
                        var s = $receiver.length;
                        return s > 0 ? $receiver.item(s - 1) : null;
                    }
                }},
                get_last: {value: function ($receiver) {
                    return _.kotlin.dom.get_tail($receiver);
                }},
                toXmlString_1: function ($receiver, xmlDeclaration) {
                    if (xmlDeclaration === void 0)
                        xmlDeclaration = false;
                    var tmp$0;
                    if ($receiver == null)
                        tmp$0 = '';
                    else {
                        tmp$0 = _.kotlin.dom.nodesToXmlString_lwhwg8$(_.kotlin.dom.toList($receiver), xmlDeclaration);
                    }
                    return tmp$0;
                },
                nodesToXmlString_lwhwg8$: function (nodes, xmlDeclaration) {
                    if (xmlDeclaration === void 0)
                        xmlDeclaration = false;
                    var builder = new Kotlin.StringBuilder();
                    {
                        var tmp$0 = nodes.iterator();
                        while (tmp$0.hasNext()) {
                            var n = tmp$0.next();
                            builder.append(_.kotlin.dom.toXmlString_rq0l4m$(n, xmlDeclaration));
                        }
                    }
                    return builder.toString();
                },
                plus_1: function ($receiver, child) {
                    if (child != null) {
                        $receiver.appendChild(child);
                    }
                    return $receiver;
                },
                plus: function ($receiver, text) {
                    return _.kotlin.dom.addText($receiver, text);
                },
                plusAssign: function ($receiver, text) {
                    return _.kotlin.dom.addText($receiver, text);
                },
                createElement: function ($receiver, name, init) {
                    var tmp$0;
                    var elem = (tmp$0 = $receiver.createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
                    init.call(elem);
                    return elem;
                },
                createElement_1: function ($receiver, name, doc, init) {
                    if (doc === void 0)
                        doc = null;
                    var tmp$0;
                    var elem = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
                    init.call(elem);
                    return elem;
                },
                ownerDocument: function ($receiver, doc) {
                    if (doc === void 0)
                        doc = null;
                    var tmp$0;
                    if ($receiver.nodeType === Node.DOCUMENT_NODE)
                        tmp$0 = $receiver != null ? $receiver : Kotlin.throwNPE();
                    else if (doc == null)
                        tmp$0 = $receiver.ownerDocument;
                    else
                        tmp$0 = doc;
                    var answer = tmp$0;
                    if (answer == null) {
                        throw new Kotlin.IllegalArgumentException('Element does not have an ownerDocument and none was provided for: ' + $receiver);
                    }
                    else {
                        return answer;
                    }
                },
                addElement: function ($receiver, name, init) {
                    var child = _.kotlin.dom.createElement($receiver, name, init);
                    $receiver.appendChild(child);
                    return child;
                },
                addElement_1: function ($receiver, name, doc, init) {
                    if (doc === void 0)
                        doc = null;
                    var child = _.kotlin.dom.createElement_1($receiver, name, doc, init);
                    $receiver.appendChild(child);
                    return child;
                },
                addText: function ($receiver, text, doc) {
                    if (doc === void 0)
                        doc = null;
                    if (text != null) {
                        var tmp$0;
                        var child = (tmp$0 = _.kotlin.dom.ownerDocument($receiver, doc).createTextNode(text)) != null ? tmp$0 : Kotlin.throwNPE();
                        $receiver.appendChild(child);
                    }
                    return $receiver;
                }
            }),
            support: Kotlin.definePackage(function () {
                this.State = Kotlin.createObject(null, function () {
                    this.Ready = 0;
                    this.NotReady = 1;
                    this.Done = 2;
                    this.Failed = 3;
                });
            }, /** @lends _.kotlin.support */ {
                AbstractIterator: Kotlin.createClass(function () {
                    return [Kotlin.Iterator];
                }, function () {
                    this.state_xrvatb$ = _.kotlin.support.State.NotReady;
                    this.nextValue_u0jzfw$ = null;
                }, /** @lends _.kotlin.support.AbstractIterator.prototype */ {
                    hasNext: function () {
                        _.kotlin.require_eltq40$(this.state_xrvatb$ !== _.kotlin.support.State.Failed);
                        var tmp$0 = this.state_xrvatb$, tmp$1;
                        if (tmp$0 === _.kotlin.support.State.Done)
                            tmp$1 = false;
                        else if (tmp$0 === _.kotlin.support.State.Ready)
                            tmp$1 = true;
                        else
                            tmp$1 = this.tryToComputeNext();
                        return tmp$1;
                    },
                    next: function () {
                        if (!this.hasNext())
                            throw new Kotlin.NoSuchElementException();
                        this.state_xrvatb$ = _.kotlin.support.State.NotReady;
                        var tmp$0;
                        return (tmp$0 = this.nextValue_u0jzfw$) != null ? tmp$0 : Kotlin.throwNPE();
                    },
                    peek: function () {
                        if (!this.hasNext())
                            throw new Kotlin.NoSuchElementException();
                        var tmp$0;
                        return (tmp$0 = this.nextValue_u0jzfw$) != null ? tmp$0 : Kotlin.throwNPE();
                    },
                    tryToComputeNext: function () {
                        this.state_xrvatb$ = _.kotlin.support.State.Failed;
                        this.computeNext();
                        return this.state_xrvatb$ === _.kotlin.support.State.Ready;
                    },
                    setNext_za3rmp$: function (value) {
                        this.nextValue_u0jzfw$ = value;
                        this.state_xrvatb$ = _.kotlin.support.State.Ready;
                    },
                    done: function () {
                        this.state_xrvatb$ = _.kotlin.support.State.Done;
                    }
                })
            })
        })
    });
    
    Kotlin.defineModule('org.kevoree.model.js', _);
}

module.exports = Kotlin.modules['org.kevoree.model.js'];